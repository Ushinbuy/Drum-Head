#ifndef USER_INC_DBINFLOAT_H_
#define USER_INC_DBINFLOAT_H_

/**
 * This calculated by equation
 * pow(10.0. DB / 20.0f)
 * Do it for more faster calculation
 */
float convertDbInFloat(float dB) {
	int dbInt = (int) (dB * 2.0); 	// *2 give precision to 0.5 DB
	if (dbInt <= -100 * 2) {
		return 0.0;
	}
	else if (dbInt <= 0) {
		dbInt *= -1;
		float dbInFloat[] = {
			1.000000, 	//	0
			0.944061, 	//	-0.5
			0.891251, 	//	-1
			0.841395, 	//	-1.5
			0.794328, 	//	-2
			0.749894, 	//	-2.5
			0.707946, 	//	-3
			0.668344, 	//	-3.5
			0.630957, 	//	-4
			0.595662, 	//	-4.5
			0.562341, 	//	-5
			0.530884, 	//	-5.5
			0.501187, 	//	-6
			0.473151, 	//	-6.5
			0.446684, 	//	-7
			0.421697, 	//	-7.5
			0.398107, 	//	-8
			0.375837, 	//	-8.5
			0.354813, 	//	-9
			0.334965, 	//	-9.5
			0.316228, 	//	-10
			0.298538, 	//	-10.5
			0.281838, 	//	-11
			0.266073, 	//	-11.5
			0.251189, 	//	-12
			0.237137, 	//	-12.5
			0.223872, 	//	-13
			0.211349, 	//	-13.5
			0.199526, 	//	-14
			0.188365, 	//	-14.5
			0.177828, 	//	-15
			0.167880, 	//	-15.5
			0.158489, 	//	-16
			0.149624, 	//	-16.5
			0.141254, 	//	-17
			0.133352, 	//	-17.5
			0.125893, 	//	-18
			0.118850, 	//	-18.5
			0.112202, 	//	-19
			0.105925, 	//	-19.5
			0.100000, 	//	-20
			0.094406, 	//	-20.5
			0.089125, 	//	-21
			0.084140, 	//	-21.5
			0.079433, 	//	-22
			0.074989, 	//	-22.5
			0.070795, 	//	-23
			0.066834, 	//	-23.5
			0.063096, 	//	-24
			0.059566, 	//	-24.5
			0.056234, 	//	-25
			0.053088, 	//	-25.5
			0.050119, 	//	-26
			0.047315, 	//	-26.5
			0.044668, 	//	-27
			0.042170, 	//	-27.5
			0.039811, 	//	-28
			0.037584, 	//	-28.5
			0.035481, 	//	-29
			0.033497, 	//	-29.5
			0.031623, 	//	-30
			0.029854, 	//	-30.5
			0.028184, 	//	-31
			0.026607, 	//	-31.5
			0.025119, 	//	-32
			0.023714, 	//	-32.5
			0.022387, 	//	-33
			0.021135, 	//	-33.5
			0.019953, 	//	-34
			0.018836, 	//	-34.5
			0.017783, 	//	-35
			0.016788, 	//	-35.5
			0.015849, 	//	-36
			0.014962, 	//	-36.5
			0.014125, 	//	-37
			0.013335, 	//	-37.5
			0.012589, 	//	-38
			0.011885, 	//	-38.5
			0.011220, 	//	-39
			0.010593, 	//	-39.5
			0.010000, 	//	-40
			0.009441, 	//	-40.5
			0.008913, 	//	-41
			0.008414, 	//	-41.5
			0.007943, 	//	-42
			0.007499, 	//	-42.5
			0.007079, 	//	-43
			0.006683, 	//	-43.5
			0.006310, 	//	-44
			0.005957, 	//	-44.5
			0.005623, 	//	-45
			0.005309, 	//	-45.5
			0.005012, 	//	-46
			0.004732, 	//	-46.5
			0.004467, 	//	-47
			0.004217, 	//	-47.5
			0.003981, 	//	-48
			0.003758, 	//	-48.5
			0.003548, 	//	-49
			0.003350, 	//	-49.5
			0.003162, 	//	-50
			0.002985, 	//	-50.5
			0.002818, 	//	-51
			0.002661, 	//	-51.5
			0.002512, 	//	-52
			0.002371, 	//	-52.5
			0.002239, 	//	-53
			0.002113, 	//	-53.5
			0.001995, 	//	-54
			0.001884, 	//	-54.5
			0.001778, 	//	-55
			0.001679, 	//	-55.5
			0.001585, 	//	-56
			0.001496, 	//	-56.5
			0.001413, 	//	-57
			0.001334, 	//	-57.5
			0.001259, 	//	-58
			0.001189, 	//	-58.5
			0.001122, 	//	-59
			0.001059, 	//	-59.5
			0.001000, 	//	-60
			0.000944, 	//	-60.5
			0.000891, 	//	-61
			0.000841, 	//	-61.5
			0.000794, 	//	-62
			0.000750, 	//	-62.5
			0.000708, 	//	-63
			0.000668, 	//	-63.5
			0.000631, 	//	-64
			0.000596, 	//	-64.5
			0.000562, 	//	-65
			0.000531, 	//	-65.5
			0.000501, 	//	-66
			0.000473, 	//	-66.5
			0.000447, 	//	-67
			0.000422, 	//	-67.5
			0.000398, 	//	-68
			0.000376, 	//	-68.5
			0.000355, 	//	-69
			0.000335, 	//	-69.5
			0.000316, 	//	-70
			0.000299, 	//	-70.5
			0.000282, 	//	-71
			0.000266, 	//	-71.5
			0.000251, 	//	-72
			0.000237, 	//	-72.5
			0.000224, 	//	-73
			0.000211, 	//	-73.5
			0.000200, 	//	-74
			0.000188, 	//	-74.5
			0.000178, 	//	-75
			0.000168, 	//	-75.5
			0.000158, 	//	-76
			0.000150, 	//	-76.5
			0.000141, 	//	-77
			0.000133, 	//	-77.5
			0.000126, 	//	-78
			0.000119, 	//	-78.5
			0.000112, 	//	-79
			0.000106, 	//	-79.5
			0.000100, 	//	-80
			0.000094, 	//	-80.5
			0.000089, 	//	-81
			0.000084, 	//	-81.5
			0.000079, 	//	-82
			0.000075, 	//	-82.5
			0.000071, 	//	-83
			0.000067, 	//	-83.5
			0.000063, 	//	-84
			0.000060, 	//	-84.5
			0.000056, 	//	-85
			0.000053, 	//	-85.5
			0.000050, 	//	-86
			0.000047, 	//	-86.5
			0.000045, 	//	-87
			0.000042, 	//	-87.5
			0.000040, 	//	-88
			0.000038, 	//	-88.5
			0.000035, 	//	-89
			0.000033, 	//	-89.5
			0.000032, 	//	-90
			0.000030, 	//	-90.5
			0.000028, 	//	-91
			0.000027, 	//	-91.5
			0.000025, 	//	-92
			0.000024, 	//	-92.5
			0.000022, 	//	-93
			0.000021, 	//	-93.5
			0.000020, 	//	-94
			0.000019, 	//	-94.5
			0.000018, 	//	-95
			0.000017, 	//	-95.5
			0.000016, 	//	-96
			0.000015, 	//	-96.5
			0.000014, 	//	-97
			0.000013, 	//	-97.5
			0.000013, 	//	-98
			0.000012, 	//	-98.5
			0.000011, 	//	-99
			0.000011 //	-99.5
		};
		return dbInFloat[dbInt];
	}

	else if (dbInt >= 6 * 2) {
		return 1.995;
	}

	else {
		float dbInFloat[] = {
			1.000000, //	0
			1.059254, //	0,5
			1.122018, //	1
			1.188502, //	1,5
			1.258925, //	2
			1.333521, //	2,5
			1.412538, //	3
			1.496236, //	3,5
			1.584893, //	4
			1.678804, //	4,5
			1.778279, //	5
			1.883649 //	5,5
		};
		return dbInFloat[dbInt];
	}
}

#endif /* USER_INC_DBINFLOAT_H_ */
