
DrumidyF412.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f2c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000660  080110fc  080110fc  000210fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801175c  0801175c  000303f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801175c  0801175c  0002175c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011764  08011764  000303f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011764  08011764  00021764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011768  08011768  00021768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  0801176c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002588  200003f8  08011b64  000303f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002980  08011b64  00032980  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000303f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fe79  00000000  00000000  00030428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061fb  00000000  00000000  000602a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002100  00000000  00000000  000664a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ec0  00000000  00000000  000685a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029058  00000000  00000000  0006a460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d248  00000000  00000000  000934b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dec1a  00000000  00000000  000c0700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019f31a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fa4  00000000  00000000  0019f370  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003f8 	.word	0x200003f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080110e4 	.word	0x080110e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003fc 	.word	0x200003fc
 800020c:	080110e4 	.word	0x080110e4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	// 10kHz trigger, 0.1ms
	if (htim->Instance == htim4.Instance) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d109      	bne.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0x28>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adc_buf[0], NUMBER_OF_CHANNELS);
 8000db8:	2206      	movs	r2, #6
 8000dba:	490c      	ldr	r1, [pc, #48]	; (8000dec <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000dbc:	480c      	ldr	r0, [pc, #48]	; (8000df0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000dbe:	f003 fcdf 	bl	8004780 <HAL_ADC_Start_DMA>
		cnt++;
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000dca:	6013      	str	r3, [r2, #0]
	}

	// 3.33Hz active sensing, 300ms
	if (htim->Instance == htim2.Instance) {
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	4b09      	ldr	r3, [pc, #36]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d102      	bne.n	8000dde <HAL_TIM_PeriodElapsedCallback+0x3a>
		upd_active_sens = 1;
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	701a      	strb	r2, [r3, #0]
	}
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200006d8 	.word	0x200006d8
 8000dec:	20000f64 	.word	0x20000f64
 8000df0:	200009e4 	.word	0x200009e4
 8000df4:	20000880 	.word	0x20000880
 8000df8:	20000f7c 	.word	0x20000f7c
 8000dfc:	20000414 	.word	0x20000414

08000e00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <HAL_UART_RxCpltCallback+0x28>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d102      	bne.n	8000e1a <HAL_UART_RxCpltCallback+0x1a>
		buffer_in[15] = 1;
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_UART_RxCpltCallback+0x2c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	73da      	strb	r2, [r3, #15]
	}
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	20000fc4 	.word	0x20000fc4
 8000e2c:	20000c40 	.word	0x20000c40

08000e30 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <HAL_ADC_ConvCpltCallback+0x88>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d135      	bne.n	8000eb0 <HAL_ADC_ConvCpltCallback+0x80>
		for (uint8_t i = 0; i < NUMBER_OF_CHANNELS; i++) {
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]
 8000e48:	e00b      	b.n	8000e62 <HAL_ADC_ConvCpltCallback+0x32>
			adc_val[i] = adc_buf[i];
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <HAL_ADC_ConvCpltCallback+0x8c>)
 8000e4e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	b291      	uxth	r1, r2
 8000e56:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000e58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for (uint8_t i = 0; i < NUMBER_OF_CHANNELS; i++) {
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	2b05      	cmp	r3, #5
 8000e66:	d9f0      	bls.n	8000e4a <HAL_ADC_ConvCpltCallback+0x1a>
		}

		getAuxState(aux_current_state);
 8000e68:	4816      	ldr	r0, [pc, #88]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x94>)
 8000e6a:	f001 f859 	bl	8001f20 <getAuxState>

		setStepTime(HAL_GetTick());
 8000e6e:	f003 fa1d 	bl	80042ac <HAL_GetTick>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fc07 	bl	8003688 <setStepTime>

		for (uint8_t i = 0; i < NUMBER_OF_CHANNELS; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73bb      	strb	r3, [r7, #14]
 8000e7e:	e014      	b.n	8000eaa <HAL_ADC_ConvCpltCallback+0x7a>
			Update_channel(&channel[i], adc_val[i], aux_current_state[i]);
 8000e80:	7bba      	ldrb	r2, [r7, #14]
 8000e82:	4613      	mov	r3, r2
 8000e84:	00db      	lsls	r3, r3, #3
 8000e86:	4413      	add	r3, r2
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <HAL_ADC_ConvCpltCallback+0x98>)
 8000e8c:	1898      	adds	r0, r3, r2
 8000e8e:	7bbb      	ldrb	r3, [r7, #14]
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_ADC_ConvCpltCallback+0x90>)
 8000e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e96:	4619      	mov	r1, r3
 8000e98:	7bbb      	ldrb	r3, [r7, #14]
 8000e9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ec4 <HAL_ADC_ConvCpltCallback+0x94>)
 8000e9c:	5cd3      	ldrb	r3, [r2, r3]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	f002 fc9a 	bl	80037d8 <Update_channel>
		for (uint8_t i = 0; i < NUMBER_OF_CHANNELS; i++) {
 8000ea4:	7bbb      	ldrb	r3, [r7, #14]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	73bb      	strb	r3, [r7, #14]
 8000eaa:	7bbb      	ldrb	r3, [r7, #14]
 8000eac:	2b05      	cmp	r3, #5
 8000eae:	d9e7      	bls.n	8000e80 <HAL_ADC_ConvCpltCallback+0x50>
		}
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	200009e4 	.word	0x200009e4
 8000ebc:	20000f64 	.word	0x20000f64
 8000ec0:	20000664 	.word	0x20000664
 8000ec4:	200006d0 	.word	0x200006d0
 8000ec8:	20000a90 	.word	0x20000a90

08000ecc <HAL_I2SEx_TxRxCpltCallback>:
	outBufPtr = &dacData[0];

	dataDacReadyFlag = 1;
}

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	outBufPtr = &dacData[AUDIO_BUFFER_SIZE / 2];
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_I2SEx_TxRxCpltCallback+0x20>)
 8000ed6:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_I2SEx_TxRxCpltCallback+0x24>)
 8000ed8:	601a      	str	r2, [r3, #0]

	dataDacReadyFlag = 1;
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	20000194 	.word	0x20000194
 8000ef0:	200007a0 	.word	0x200007a0
 8000ef4:	2000087c 	.word	0x2000087c

08000ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000efe:	f003 f96f 	bl	80041e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f893 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f06:	f000 fb25 	bl	8001554 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0a:	f000 fadd 	bl	80014c8 <MX_DMA_Init>
  MX_I2S3_Init();
 8000f0e:	f000 f9c7 	bl	80012a0 <MX_I2S3_Init>
  MX_USART2_UART_Init();
 8000f12:	f000 faaf 	bl	8001474 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f16:	f000 f8fd 	bl	8001114 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f1a:	f000 fa0f 	bl	800133c <MX_TIM2_Init>
  MX_TIM4_Init();
 8000f1e:	f000 fa5b 	bl	80013d8 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000f22:	f00e fef5 	bl	800fd10 <MX_USB_DEVICE_Init>
  MX_SDIO_SD_Init();
 8000f26:	f000 f9e9 	bl	80012fc <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000f2a:	f00d faa7 	bl	800e47c <MX_FATFS_Init>
  MX_I2C1_Init();
 8000f2e:	f000 f989 	bl	8001244 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */


	HAL_ADC_Start(&hadc1);
 8000f32:	4830      	ldr	r0, [pc, #192]	; (8000ff4 <main+0xfc>)
 8000f34:	f003 fa2e 	bl	8004394 <HAL_ADC_Start>
	HAL_Delay(200);
 8000f38:	20c8      	movs	r0, #200	; 0xc8
 8000f3a:	f003 f9c3 	bl	80042c4 <HAL_Delay>

	/// **************************
	/// ******* Defaul CFG *******
	/// **************************
	getAuxState(aux_current_state);
 8000f3e:	482e      	ldr	r0, [pc, #184]	; (8000ff8 <main+0x100>)
 8000f40:	f000 ffee 	bl	8001f20 <getAuxState>

	initDrum(&channel[0], HHCLOSE, HHCLOSE, MESH_PAD_AUTOAUX, aux_current_state[0]);
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <main+0x100>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	222a      	movs	r2, #42	; 0x2a
 8000f4e:	212a      	movs	r1, #42	; 0x2a
 8000f50:	482a      	ldr	r0, [pc, #168]	; (8000ffc <main+0x104>)
 8000f52:	f002 fba9 	bl	80036a8 <initDrum>
	initDrum(&channel[1], TOMF, TOMF, MESH_PAD_AUTOAUX, aux_current_state[1]);
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <main+0x100>)
 8000f58:	785b      	ldrb	r3, [r3, #1]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	222b      	movs	r2, #43	; 0x2b
 8000f60:	212b      	movs	r1, #43	; 0x2b
 8000f62:	4827      	ldr	r0, [pc, #156]	; (8001000 <main+0x108>)
 8000f64:	f002 fba0 	bl	80036a8 <initDrum>
	initDrum(&channel[2], HHPEDAL, HHPEDAL, MESH_PAD_AUTOAUX, aux_current_state[2]);
 8000f68:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <main+0x100>)
 8000f6a:	789b      	ldrb	r3, [r3, #2]
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	222c      	movs	r2, #44	; 0x2c
 8000f72:	212c      	movs	r1, #44	; 0x2c
 8000f74:	4823      	ldr	r0, [pc, #140]	; (8001004 <main+0x10c>)
 8000f76:	f002 fb97 	bl	80036a8 <initDrum>
	initDrum(&channel[3], TOM3, TOM3, MESH_PAD_AUTOAUX, aux_current_state[3]);
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <main+0x100>)
 8000f7c:	78db      	ldrb	r3, [r3, #3]
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2300      	movs	r3, #0
 8000f82:	222d      	movs	r2, #45	; 0x2d
 8000f84:	212d      	movs	r1, #45	; 0x2d
 8000f86:	4820      	ldr	r0, [pc, #128]	; (8001008 <main+0x110>)
 8000f88:	f002 fb8e 	bl	80036a8 <initDrum>
	initDrum(&channel[4], HHOPEN, HHOPEN, MESH_PAD_AUTOAUX, aux_current_state[4]);
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <main+0x100>)
 8000f8e:	791b      	ldrb	r3, [r3, #4]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2300      	movs	r3, #0
 8000f94:	222e      	movs	r2, #46	; 0x2e
 8000f96:	212e      	movs	r1, #46	; 0x2e
 8000f98:	481c      	ldr	r0, [pc, #112]	; (800100c <main+0x114>)
 8000f9a:	f002 fb85 	bl	80036a8 <initDrum>
	initDrum(&channel[5], TOM2, TOM2, MESH_PAD_AUTOAUX, aux_current_state[5]);
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <main+0x100>)
 8000fa0:	795b      	ldrb	r3, [r3, #5]
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	222f      	movs	r2, #47	; 0x2f
 8000fa8:	212f      	movs	r1, #47	; 0x2f
 8000faa:	4819      	ldr	r0, [pc, #100]	; (8001010 <main+0x118>)
 8000fac:	f002 fb7c 	bl	80036a8 <initDrum>
//  // cymbals
//  initDrum(&channel[7], CRASH, CRASH 	, CYMBAL_MUTE			, aux_current_state[7]);	// CH7 aux disabled
//  initDrum(&channel[8], RIDE ,  BELL 	, CYMBAL_2_ZONE			, aux_current_state[8]);

	// === Previous Settings ===
	sendUart(ASCIILOGO);
 8000fb0:	4818      	ldr	r0, [pc, #96]	; (8001014 <main+0x11c>)
 8000fb2:	f000 fc4b 	bl	800184c <sendUart>
	HAL_Delay(500);
 8000fb6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fba:	f003 f983 	bl	80042c4 <HAL_Delay>

	Load_Setting();
 8000fbe:	f001 f995 	bl	80022ec <Load_Setting>

	// start waiting for serial commands
	HAL_Delay(200);
 8000fc2:	20c8      	movs	r0, #200	; 0xc8
 8000fc4:	f003 f97e 	bl	80042c4 <HAL_Delay>
	config_Mode[0] = 0;
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <main+0x120>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4911      	ldr	r1, [pc, #68]	; (8001018 <main+0x120>)
 8000fd2:	4812      	ldr	r0, [pc, #72]	; (800101c <main+0x124>)
 8000fd4:	f00a f9df 	bl	800b396 <HAL_UART_Receive_IT>

	/// **************************
	/// ******* LETS ROCK! *******
	/// **************************
	HAL_TIM_Base_Start_IT(&htim2); //AS
 8000fd8:	4811      	ldr	r0, [pc, #68]	; (8001020 <main+0x128>)
 8000fda:	f009 fccb 	bl	800a974 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4); //ADC
 8000fde:	4811      	ldr	r0, [pc, #68]	; (8001024 <main+0x12c>)
 8000fe0:	f009 fcc8 	bl	800a974 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		handleConfigFromUart();
 8000fe4:	f000 fc46 	bl	8001874 <handleConfigFromUart>
		sendMidiActiveSense(&upd_active_sens);
 8000fe8:	480f      	ldr	r0, [pc, #60]	; (8001028 <main+0x130>)
 8000fea:	f002 fd69 	bl	8003ac0 <sendMidiActiveSense>
		checkPiezoChannels();
 8000fee:	f000 fc89 	bl	8001904 <checkPiezoChannels>
		handleConfigFromUart();
 8000ff2:	e7f7      	b.n	8000fe4 <main+0xec>
 8000ff4:	200009e4 	.word	0x200009e4
 8000ff8:	200006d0 	.word	0x200006d0
 8000ffc:	20000a90 	.word	0x20000a90
 8001000:	20000ad8 	.word	0x20000ad8
 8001004:	20000b20 	.word	0x20000b20
 8001008:	20000b68 	.word	0x20000b68
 800100c:	20000bb0 	.word	0x20000bb0
 8001010:	20000bf8 	.word	0x20000bf8
 8001014:	20000004 	.word	0x20000004
 8001018:	20000418 	.word	0x20000418
 800101c:	20000fc4 	.word	0x20000fc4
 8001020:	20000f7c 	.word	0x20000f7c
 8001024:	200006d8 	.word	0x200006d8
 8001028:	20000414 	.word	0x20000414

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	; 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2234      	movs	r2, #52	; 0x34
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f00f fc1c 	bl	8010878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	4b2d      	ldr	r3, [pc, #180]	; (800110c <SystemClock_Config+0xe0>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001058:	4a2c      	ldr	r2, [pc, #176]	; (800110c <SystemClock_Config+0xe0>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	; 0x40
 8001060:	4b2a      	ldr	r3, [pc, #168]	; (800110c <SystemClock_Config+0xe0>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	4b27      	ldr	r3, [pc, #156]	; (8001110 <SystemClock_Config+0xe4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a26      	ldr	r2, [pc, #152]	; (8001110 <SystemClock_Config+0xe4>)
 8001076:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	4b24      	ldr	r3, [pc, #144]	; (8001110 <SystemClock_Config+0xe4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001088:	2303      	movs	r3, #3
 800108a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800108c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001090:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001092:	2301      	movs	r3, #1
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001096:	2310      	movs	r3, #16
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800109a:	2302      	movs	r3, #2
 800109c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010a4:	2304      	movs	r3, #4
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010a8:	23a8      	movs	r3, #168	; 0xa8
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010ac:	2304      	movs	r3, #4
 80010ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b0:	2307      	movs	r3, #7
 80010b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4618      	mov	r0, r3
 80010be:	f007 fe6d 	bl	8008d9c <HAL_RCC_OscConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80010c8:	f001 fe0e 	bl	8002ce8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010cc:	230f      	movs	r3, #15
 80010ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010d0:	2302      	movs	r3, #2
 80010d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	2102      	movs	r1, #2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f007 f8c1 	bl	8008270 <HAL_RCC_ClockConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80010f4:	f001 fdf8 	bl	8002ce8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f007 f99d 	bl	800843c <HAL_RCC_MCOConfig>
}
 8001102:	bf00      	nop
 8001104:	3750      	adds	r7, #80	; 0x50
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800
 8001110:	40007000 	.word	0x40007000

08001114 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001126:	4b44      	ldr	r3, [pc, #272]	; (8001238 <MX_ADC1_Init+0x124>)
 8001128:	4a44      	ldr	r2, [pc, #272]	; (800123c <MX_ADC1_Init+0x128>)
 800112a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <MX_ADC1_Init+0x124>)
 800112e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001132:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001134:	4b40      	ldr	r3, [pc, #256]	; (8001238 <MX_ADC1_Init+0x124>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800113a:	4b3f      	ldr	r3, [pc, #252]	; (8001238 <MX_ADC1_Init+0x124>)
 800113c:	2201      	movs	r2, #1
 800113e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001140:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <MX_ADC1_Init+0x124>)
 8001142:	2200      	movs	r2, #0
 8001144:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001146:	4b3c      	ldr	r3, [pc, #240]	; (8001238 <MX_ADC1_Init+0x124>)
 8001148:	2200      	movs	r2, #0
 800114a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800114e:	4b3a      	ldr	r3, [pc, #232]	; (8001238 <MX_ADC1_Init+0x124>)
 8001150:	2200      	movs	r2, #0
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001154:	4b38      	ldr	r3, [pc, #224]	; (8001238 <MX_ADC1_Init+0x124>)
 8001156:	4a3a      	ldr	r2, [pc, #232]	; (8001240 <MX_ADC1_Init+0x12c>)
 8001158:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800115a:	4b37      	ldr	r3, [pc, #220]	; (8001238 <MX_ADC1_Init+0x124>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001160:	4b35      	ldr	r3, [pc, #212]	; (8001238 <MX_ADC1_Init+0x124>)
 8001162:	2206      	movs	r2, #6
 8001164:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <MX_ADC1_Init+0x124>)
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800116e:	4b32      	ldr	r3, [pc, #200]	; (8001238 <MX_ADC1_Init+0x124>)
 8001170:	2201      	movs	r2, #1
 8001172:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001174:	4830      	ldr	r0, [pc, #192]	; (8001238 <MX_ADC1_Init+0x124>)
 8001176:	f003 f8c9 	bl	800430c <HAL_ADC_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001180:	f001 fdb2 	bl	8002ce8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001184:	2301      	movs	r3, #1
 8001186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001188:	2301      	movs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 800118c:	2302      	movs	r3, #2
 800118e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4828      	ldr	r0, [pc, #160]	; (8001238 <MX_ADC1_Init+0x124>)
 8001196:	f003 fc01 	bl	800499c <HAL_ADC_ConfigChannel>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011a0:	f001 fda2 	bl	8002ce8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011a4:	230b      	movs	r3, #11
 80011a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	4619      	mov	r1, r3
 80011b0:	4821      	ldr	r0, [pc, #132]	; (8001238 <MX_ADC1_Init+0x124>)
 80011b2:	f003 fbf3 	bl	800499c <HAL_ADC_ConfigChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80011bc:	f001 fd94 	bl	8002ce8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80011c0:	230d      	movs	r3, #13
 80011c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80011c4:	2303      	movs	r3, #3
 80011c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c8:	463b      	mov	r3, r7
 80011ca:	4619      	mov	r1, r3
 80011cc:	481a      	ldr	r0, [pc, #104]	; (8001238 <MX_ADC1_Init+0x124>)
 80011ce:	f003 fbe5 	bl	800499c <HAL_ADC_ConfigChannel>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d001      	beq.n	80011dc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80011d8:	f001 fd86 	bl	8002ce8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80011dc:	230e      	movs	r3, #14
 80011de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80011e0:	2304      	movs	r3, #4
 80011e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e4:	463b      	mov	r3, r7
 80011e6:	4619      	mov	r1, r3
 80011e8:	4813      	ldr	r0, [pc, #76]	; (8001238 <MX_ADC1_Init+0x124>)
 80011ea:	f003 fbd7 	bl	800499c <HAL_ADC_ConfigChannel>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80011f4:	f001 fd78 	bl	8002ce8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80011f8:	230f      	movs	r3, #15
 80011fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80011fc:	2305      	movs	r3, #5
 80011fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	480c      	ldr	r0, [pc, #48]	; (8001238 <MX_ADC1_Init+0x124>)
 8001206:	f003 fbc9 	bl	800499c <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001210:	f001 fd6a 	bl	8002ce8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001214:	2308      	movs	r3, #8
 8001216:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001218:	2306      	movs	r3, #6
 800121a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_ADC1_Init+0x124>)
 8001222:	f003 fbbb 	bl	800499c <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800122c:	f001 fd5c 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	200009e4 	.word	0x200009e4
 800123c:	40012000 	.word	0x40012000
 8001240:	0f000001 	.word	0x0f000001

08001244 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_I2C1_Init+0x50>)
 800124a:	4a13      	ldr	r2, [pc, #76]	; (8001298 <MX_I2C1_Init+0x54>)
 800124c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_I2C1_Init+0x50>)
 8001250:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_I2C1_Init+0x58>)
 8001252:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_I2C1_Init+0x50>)
 8001262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001266:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_I2C1_Init+0x50>)
 8001282:	f005 f81d 	bl	80062c0 <HAL_I2C_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800128c:	f001 fd2c 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000828 	.word	0x20000828
 8001298:	40005400 	.word	0x40005400
 800129c:	000186a0 	.word	0x000186a0

080012a0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <MX_I2S3_Init+0x58>)
 80012a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80012be:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012c8:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80012cc:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80012ce:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012dc:	2201      	movs	r2, #1
 80012de:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80012e0:	4804      	ldr	r0, [pc, #16]	; (80012f4 <MX_I2S3_Init+0x54>)
 80012e2:	f005 f931 	bl	8006548 <HAL_I2S_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 80012ec:	f001 fcfc 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200013f4 	.word	0x200013f4
 80012f8:	40003c00 	.word	0x40003c00

080012fc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001300:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <MX_SDIO_SD_Init+0x38>)
 8001302:	4a0d      	ldr	r2, [pc, #52]	; (8001338 <MX_SDIO_SD_Init+0x3c>)
 8001304:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001306:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_SDIO_SD_Init+0x38>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <MX_SDIO_SD_Init+0x38>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_SDIO_SD_Init+0x38>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_SDIO_SD_Init+0x38>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <MX_SDIO_SD_Init+0x38>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <MX_SDIO_SD_Init+0x38>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	20000ee0 	.word	0x20000ee0
 8001338:	40012c00 	.word	0x40012c00

0800133c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM2_Init+0x94>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001362:	2200      	movs	r2, #0
 8001364:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 30000000;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM2_Init+0x94>)
 800136e:	4a19      	ldr	r2, [pc, #100]	; (80013d4 <MX_TIM2_Init+0x98>)
 8001370:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_TIM2_Init+0x94>)
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137e:	4814      	ldr	r0, [pc, #80]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001380:	f009 faa9 	bl	800a8d6 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800138a:	f001 fcad 	bl	8002ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4619      	mov	r1, r3
 800139a:	480d      	ldr	r0, [pc, #52]	; (80013d0 <MX_TIM2_Init+0x94>)
 800139c:	f009 fc62 	bl	800ac64 <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80013a6:	f001 fc9f 	bl	8002ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b2:	463b      	mov	r3, r7
 80013b4:	4619      	mov	r1, r3
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <MX_TIM2_Init+0x94>)
 80013b8:	f009 fe7e 	bl	800b0b8 <HAL_TIMEx_MasterConfigSynchronization>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80013c2:	f001 fc91 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000f7c 	.word	0x20000f7c
 80013d4:	01c9c380 	.word	0x01c9c380

080013d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM4_Init+0x94>)
 80013f6:	4a1e      	ldr	r2, [pc, #120]	; (8001470 <MX_TIM4_Init+0x98>)
 80013f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013fa:	4b1c      	ldr	r3, [pc, #112]	; (800146c <MX_TIM4_Init+0x94>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001400:	4b1a      	ldr	r3, [pc, #104]	; (800146c <MX_TIM4_Init+0x94>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 8400;
 8001406:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM4_Init+0x94>)
 8001408:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800140c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140e:	4b17      	ldr	r3, [pc, #92]	; (800146c <MX_TIM4_Init+0x94>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001414:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_TIM4_Init+0x94>)
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800141a:	4814      	ldr	r0, [pc, #80]	; (800146c <MX_TIM4_Init+0x94>)
 800141c:	f009 fa5b 	bl	800a8d6 <HAL_TIM_Base_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001426:	f001 fc5f 	bl	8002ce8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800142e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4619      	mov	r1, r3
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <MX_TIM4_Init+0x94>)
 8001438:	f009 fc14 	bl	800ac64 <HAL_TIM_ConfigClockSource>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001442:	f001 fc51 	bl	8002ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001446:	2300      	movs	r3, #0
 8001448:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <MX_TIM4_Init+0x94>)
 8001454:	f009 fe30 	bl	800b0b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800145e:	f001 fc43 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	3718      	adds	r7, #24
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	200006d8 	.word	0x200006d8
 8001470:	40000800 	.word	0x40000800

08001474 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_USART2_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014ac:	f009 fe94 	bl	800b1d8 <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014b6:	f001 fc17 	bl	8002ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000fc4 	.word	0x20000fc4
 80014c4:	40004400 	.word	0x40004400

080014c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_DMA_Init+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <MX_DMA_Init+0x88>)
 80014d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_DMA_Init+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014e6:	607b      	str	r3, [r7, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_DMA_Init+0x88>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a17      	ldr	r2, [pc, #92]	; (8001550 <MX_DMA_Init+0x88>)
 80014f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_DMA_Init+0x88>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2010      	movs	r0, #16
 800150c:	f003 fdcb 	bl	80050a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001510:	2010      	movs	r0, #16
 8001512:	f003 fde4 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2100      	movs	r1, #0
 800151a:	2038      	movs	r0, #56	; 0x38
 800151c:	f003 fdc3 	bl	80050a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001520:	2038      	movs	r0, #56	; 0x38
 8001522:	f003 fddc 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2100      	movs	r1, #0
 800152a:	203b      	movs	r0, #59	; 0x3b
 800152c:	f003 fdbb 	bl	80050a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001530:	203b      	movs	r0, #59	; 0x3b
 8001532:	f003 fdd4 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2045      	movs	r0, #69	; 0x45
 800153c:	f003 fdb3 	bl	80050a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001540:	2045      	movs	r0, #69	; 0x45
 8001542:	f003 fdcc 	bl	80050de <HAL_NVIC_EnableIRQ>

}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40023800 	.word	0x40023800

08001554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b08e      	sub	sp, #56	; 0x38
 8001558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800155a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
 800156e:	4bb0      	ldr	r3, [pc, #704]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4aaf      	ldr	r2, [pc, #700]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4bad      	ldr	r3, [pc, #692]	; (8001830 <MX_GPIO_Init+0x2dc>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0310 	and.w	r3, r3, #16
 8001582:	623b      	str	r3, [r7, #32]
 8001584:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
 800158a:	4ba9      	ldr	r3, [pc, #676]	; (8001830 <MX_GPIO_Init+0x2dc>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4aa8      	ldr	r2, [pc, #672]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001590:	f043 0304 	orr.w	r3, r3, #4
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4ba6      	ldr	r3, [pc, #664]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0304 	and.w	r3, r3, #4
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	4ba2      	ldr	r3, [pc, #648]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4aa1      	ldr	r2, [pc, #644]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015ac:	f043 0320 	orr.w	r3, r3, #32
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b9f      	ldr	r3, [pc, #636]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0320 	and.w	r3, r3, #32
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4b9b      	ldr	r3, [pc, #620]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a9a      	ldr	r2, [pc, #616]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b98      	ldr	r3, [pc, #608]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]
 80015de:	4b94      	ldr	r3, [pc, #592]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a93      	ldr	r2, [pc, #588]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015e4:	f043 0301 	orr.w	r3, r3, #1
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b91      	ldr	r3, [pc, #580]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	613b      	str	r3, [r7, #16]
 80015f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b8d      	ldr	r3, [pc, #564]	; (8001830 <MX_GPIO_Init+0x2dc>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a8c      	ldr	r2, [pc, #560]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b8a      	ldr	r3, [pc, #552]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	4b86      	ldr	r3, [pc, #536]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a85      	ldr	r2, [pc, #532]	; (8001830 <MX_GPIO_Init+0x2dc>)
 800161c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b83      	ldr	r3, [pc, #524]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	4b7f      	ldr	r3, [pc, #508]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a7e      	ldr	r2, [pc, #504]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b7c      	ldr	r3, [pc, #496]	; (8001830 <MX_GPIO_Init+0x2dc>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800164a:	2200      	movs	r2, #0
 800164c:	210f      	movs	r1, #15
 800164e:	4879      	ldr	r0, [pc, #484]	; (8001834 <MX_GPIO_Init+0x2e0>)
 8001650:	f004 fe02 	bl	8006258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 8001654:	2200      	movs	r2, #0
 8001656:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 800165a:	4877      	ldr	r0, [pc, #476]	; (8001838 <MX_GPIO_Init+0x2e4>)
 800165c:	f004 fdfc 	bl	8006258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001666:	4875      	ldr	r0, [pc, #468]	; (800183c <MX_GPIO_Init+0x2e8>)
 8001668:	f004 fdf6 	bl	8006258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTGFS_PPWR_EN_GPIO_Port, USB_OTGFS_PPWR_EN_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001672:	4873      	ldr	r0, [pc, #460]	; (8001840 <MX_GPIO_Init+0x2ec>)
 8001674:	f004 fdf0 	bl	8006258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED3_Pin LED4_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|LED1_Pin|LED2_Pin;
 8001678:	230f      	movs	r3, #15
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800167c:	2311      	movs	r3, #17
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168c:	4619      	mov	r1, r3
 800168e:	4869      	ldr	r0, [pc, #420]	; (8001834 <MX_GPIO_Init+0x2e0>)
 8001690:	f004 fc36 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : DD3_Pin DD5_Pin */
  GPIO_InitStruct.Pin = DD3_Pin|DD5_Pin;
 8001694:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001698:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169e:	2301      	movs	r3, #1
 80016a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a6:	4619      	mov	r1, r3
 80016a8:	4863      	ldr	r0, [pc, #396]	; (8001838 <MX_GPIO_Init+0x2e4>)
 80016aa:	f004 fc29 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BLCTRL_Pin EXT_RESET_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_BLCTRL_Pin|EXT_RESET_Pin|CTP_RST_Pin;
 80016ae:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	4619      	mov	r1, r3
 80016c6:	485c      	ldr	r0, [pc, #368]	; (8001838 <MX_GPIO_Init+0x2e4>)
 80016c8:	f004 fc1a 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80016cc:	2301      	movs	r3, #1
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	4619      	mov	r1, r3
 80016e0:	4858      	ldr	r0, [pc, #352]	; (8001844 <MX_GPIO_Init+0x2f0>)
 80016e2:	f004 fc0d 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_RIGHT_Pin JOY_LEFT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin|JOY_LEFT_Pin;
 80016e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	484f      	ldr	r0, [pc, #316]	; (8001838 <MX_GPIO_Init+0x2e4>)
 80016fc:	f004 fc00 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : JOY_UP_Pin JOY_DOWN_Pin LCD_TE_Pin USB_OTGFS_OVRCR_Pin */
  GPIO_InitStruct.Pin = JOY_UP_Pin|JOY_DOWN_Pin|LCD_TE_Pin|USB_OTGFS_OVRCR_Pin;
 8001700:	2393      	movs	r3, #147	; 0x93
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001704:	2300      	movs	r3, #0
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	484b      	ldr	r0, [pc, #300]	; (8001840 <MX_GPIO_Init+0x2ec>)
 8001714:	f004 fbf4 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SCL_Pin */
  GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 8001718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171e:	2312      	movs	r3, #18
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800172a:	2304      	movs	r3, #4
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	4844      	ldr	r0, [pc, #272]	; (8001848 <MX_GPIO_Init+0x2f4>)
 8001736:	f004 fbe3 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKIN_Pin */
  GPIO_InitStruct.Pin = M2_CKIN_Pin;
 800173a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174c:	2305      	movs	r3, #5
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKIN_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001754:	4619      	mov	r1, r3
 8001756:	483c      	ldr	r0, [pc, #240]	; (8001848 <MX_GPIO_Init+0x2f4>)
 8001758:	f004 fbd2 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 800175c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001762:	2301      	movs	r3, #1
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800176e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001772:	4619      	mov	r1, r3
 8001774:	4831      	ldr	r0, [pc, #196]	; (800183c <MX_GPIO_Init+0x2e8>)
 8001776:	f004 fbc3 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : CODEC_INT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = CODEC_INT_Pin|CTP_INT_Pin;
 800177a:	2324      	movs	r3, #36	; 0x24
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	482c      	ldr	r0, [pc, #176]	; (8001840 <MX_GPIO_Init+0x2ec>)
 8001790:	f004 fbb6 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTGFS_PPWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTGFS_PPWR_EN_Pin;
 8001794:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800179a:	2311      	movs	r3, #17
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2300      	movs	r3, #0
 80017a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTGFS_PPWR_EN_GPIO_Port, &GPIO_InitStruct);
 80017a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017aa:	4619      	mov	r1, r3
 80017ac:	4824      	ldr	r0, [pc, #144]	; (8001840 <MX_GPIO_Init+0x2ec>)
 80017ae:	f004 fba7 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : M2_CKINA8_Pin */
  GPIO_InitStruct.Pin = M2_CKINA8_Pin;
 80017b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b8:	2302      	movs	r3, #2
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80017c4:	2300      	movs	r3, #0
 80017c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(M2_CKINA8_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <MX_GPIO_Init+0x2f0>)
 80017d0:	f004 fb96 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_DETECT_Pin */
  GPIO_InitStruct.Pin = uSD_DETECT_Pin;
 80017d4:	2308      	movs	r3, #8
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e4:	4619      	mov	r1, r3
 80017e6:	4815      	ldr	r0, [pc, #84]	; (800183c <MX_GPIO_Init+0x2e8>)
 80017e8:	f004 fb8a 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : DD0_Pin DD4_Pin DD2_Pin DD1_Pin */
  GPIO_InitStruct.Pin = DD0_Pin|DD4_Pin|DD2_Pin|DD1_Pin;
 80017ec:	f44f 43e4 	mov.w	r3, #29184	; 0x7200
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f2:	2300      	movs	r3, #0
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	480f      	ldr	r0, [pc, #60]	; (8001840 <MX_GPIO_Init+0x2ec>)
 8001802:	f004 fb7d 	bl	8005f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800180c:	2312      	movs	r3, #18
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001818:	2309      	movs	r3, #9
 800181a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001820:	4619      	mov	r1, r3
 8001822:	4809      	ldr	r0, [pc, #36]	; (8001848 <MX_GPIO_Init+0x2f4>)
 8001824:	f004 fb6c 	bl	8005f00 <HAL_GPIO_Init>

}
 8001828:	bf00      	nop
 800182a:	3738      	adds	r7, #56	; 0x38
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40021000 	.word	0x40021000
 8001838:	40021400 	.word	0x40021400
 800183c:	40020c00 	.word	0x40020c00
 8001840:	40021800 	.word	0x40021800
 8001844:	40020000 	.word	0x40020000
 8001848:	40020400 	.word	0x40020400

0800184c <sendUart>:

/* USER CODE BEGIN 4 */

void sendUart (char *_msg){
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) _msg, strlen((char const*) _msg), 50);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7fe fcdb 	bl	8000210 <strlen>
 800185a:	4603      	mov	r3, r0
 800185c:	b29a      	uxth	r2, r3
 800185e:	2332      	movs	r3, #50	; 0x32
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <sendUart+0x24>)
 8001864:	f009 fd05 	bl	800b272 <HAL_UART_Transmit>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000fc4 	.word	0x20000fc4

08001874 <handleConfigFromUart>:

void handleConfigFromUart(void){
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
	while (config_Mode[0]) {
 800187a:	e030      	b.n	80018de <handleConfigFromUart+0x6a>

		uint8_t rs = UartConfigDialog();
 800187c:	f000 fed0 	bl	8002620 <UartConfigDialog>
 8001880:	4603      	mov	r3, r0
 8001882:	71fb      	strb	r3, [r7, #7]

		if ((rs == 1) || (rs == 2)) {
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d002      	beq.n	8001890 <handleConfigFromUart+0x1c>
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d10d      	bne.n	80018ac <handleConfigFromUart+0x38>
			rs = Save_Setting(0);
 8001890:	2000      	movs	r0, #0
 8001892:	f000 fb87 	bl	8001fa4 <Save_Setting>
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
			sprintf(buffer_out, "New configuration saved (%X)\n", rs);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	461a      	mov	r2, r3
 800189e:	4914      	ldr	r1, [pc, #80]	; (80018f0 <handleConfigFromUart+0x7c>)
 80018a0:	4814      	ldr	r0, [pc, #80]	; (80018f4 <handleConfigFromUart+0x80>)
 80018a2:	f00e fff1 	bl	8010888 <siprintf>
			sendUart(buffer_out);
 80018a6:	4813      	ldr	r0, [pc, #76]	; (80018f4 <handleConfigFromUart+0x80>)
 80018a8:	f7ff ffd0 	bl	800184c <sendUart>
		}
		if (rs == 99) {
 80018ac:	79fb      	ldrb	r3, [r7, #7]
 80018ae:	2b63      	cmp	r3, #99	; 0x63
 80018b0:	d10d      	bne.n	80018ce <handleConfigFromUart+0x5a>
			rs = Save_Setting(1);
 80018b2:	2001      	movs	r0, #1
 80018b4:	f000 fb76 	bl	8001fa4 <Save_Setting>
 80018b8:	4603      	mov	r3, r0
 80018ba:	71fb      	strb	r3, [r7, #7]
			sprintf(buffer_out, "Reset to default values, restart the device (%X)\n", rs);
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	461a      	mov	r2, r3
 80018c0:	490d      	ldr	r1, [pc, #52]	; (80018f8 <handleConfigFromUart+0x84>)
 80018c2:	480c      	ldr	r0, [pc, #48]	; (80018f4 <handleConfigFromUart+0x80>)
 80018c4:	f00e ffe0 	bl	8010888 <siprintf>
			sendUart(buffer_out);
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <handleConfigFromUart+0x80>)
 80018ca:	f7ff ffbf 	bl	800184c <sendUart>
		}
		config_Mode[0] = 0;
 80018ce:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <handleConfigFromUart+0x88>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &config_Mode[0], 1);
 80018d4:	2201      	movs	r2, #1
 80018d6:	4909      	ldr	r1, [pc, #36]	; (80018fc <handleConfigFromUart+0x88>)
 80018d8:	4809      	ldr	r0, [pc, #36]	; (8001900 <handleConfigFromUart+0x8c>)
 80018da:	f009 fd5c 	bl	800b396 <HAL_UART_Receive_IT>
	while (config_Mode[0]) {
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <handleConfigFromUart+0x88>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ca      	bne.n	800187c <handleConfigFromUart+0x8>
	}
}
 80018e6:	bf00      	nop
 80018e8:	bf00      	nop
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	080110fc 	.word	0x080110fc
 80018f4:	2000100c 	.word	0x2000100c
 80018f8:	0801111c 	.word	0x0801111c
 80018fc:	20000418 	.word	0x20000418
 8001900:	20000fc4 	.word	0x20000fc4

08001904 <checkPiezoChannels>:

void checkPiezoChannels(){
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
	int _volume;
	for (uint8_t ch = 0; ch < NUMBER_OF_CHANNELS; ch++) {
 800190a:	2300      	movs	r3, #0
 800190c:	70fb      	strb	r3, [r7, #3]
 800190e:	e22b      	b.n	8001d68 <checkPiezoChannels+0x464>

		if (channel[ch].main_rdy) {
 8001910:	78fa      	ldrb	r2, [r7, #3]
 8001912:	49ca      	ldr	r1, [pc, #808]	; (8001c3c <checkPiezoChannels+0x338>)
 8001914:	4613      	mov	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	3311      	adds	r3, #17
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 812d 	beq.w	8001b82 <checkPiezoChannels+0x27e>
			channel[ch].main_rdy = 0;
 8001928:	78fa      	ldrb	r2, [r7, #3]
 800192a:	49c4      	ldr	r1, [pc, #784]	; (8001c3c <checkPiezoChannels+0x338>)
 800192c:	4613      	mov	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	4413      	add	r3, r2
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	3311      	adds	r3, #17
 8001938:	2200      	movs	r2, #0
 800193a:	701a      	strb	r2, [r3, #0]

			// custom volume calculation for mesh
			if (channel[ch].chnl_type < 2) {
 800193c:	78fa      	ldrb	r2, [r7, #3]
 800193e:	49bf      	ldr	r1, [pc, #764]	; (8001c3c <checkPiezoChannels+0x338>)
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	440b      	add	r3, r1
 800194a:	3303      	adds	r3, #3
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d865      	bhi.n	8001a1e <checkPiezoChannels+0x11a>
				_volume = (int) (100.
						* (float) (channel[ch].main_rdy_height - PEAK_THRESHOLD)
 8001952:	78fa      	ldrb	r2, [r7, #3]
 8001954:	49b9      	ldr	r1, [pc, #740]	; (8001c3c <checkPiezoChannels+0x338>)
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	440b      	add	r3, r1
 8001960:	331a      	adds	r3, #26
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	3b32      	subs	r3, #50	; 0x32
 8001966:	ee07 3a90 	vmov	s15, r3
 800196a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800196e:	ee17 0a90 	vmov	r0, s15
 8001972:	f7fe fe09 	bl	8000588 <__aeabi_f2d>
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4bb1      	ldr	r3, [pc, #708]	; (8001c40 <checkPiezoChannels+0x33c>)
 800197c:	f7fe fe5c 	bl	8000638 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
						/ 4096. * 100. / (float) channel[ch].peak_volume_norm);
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4bad      	ldr	r3, [pc, #692]	; (8001c44 <checkPiezoChannels+0x340>)
 800198e:	f7fe ff7d 	bl	800088c <__aeabi_ddiv>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4610      	mov	r0, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	4ba8      	ldr	r3, [pc, #672]	; (8001c40 <checkPiezoChannels+0x33c>)
 80019a0:	f7fe fe4a 	bl	8000638 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4614      	mov	r4, r2
 80019aa:	461d      	mov	r5, r3
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	49a3      	ldr	r1, [pc, #652]	; (8001c3c <checkPiezoChannels+0x338>)
 80019b0:	4613      	mov	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	4413      	add	r3, r2
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	440b      	add	r3, r1
 80019ba:	3306      	adds	r3, #6
 80019bc:	881b      	ldrh	r3, [r3, #0]
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c6:	ee17 0a90 	vmov	r0, s15
 80019ca:	f7fe fddd 	bl	8000588 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4620      	mov	r0, r4
 80019d4:	4629      	mov	r1, r5
 80019d6:	f7fe ff59 	bl	800088c <__aeabi_ddiv>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
				_volume = (int) (100.
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7ff f83b 	bl	8000a5c <__aeabi_d2iz>
 80019e6:	4603      	mov	r3, r0
 80019e8:	607b      	str	r3, [r7, #4]
				if ((channel[ch].chnl_type == MESH_RIM_AUTOAUX)
 80019ea:	78fa      	ldrb	r2, [r7, #3]
 80019ec:	4993      	ldr	r1, [pc, #588]	; (8001c3c <checkPiezoChannels+0x338>)
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	440b      	add	r3, r1
 80019f8:	3303      	adds	r3, #3
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d162      	bne.n	8001ac6 <checkPiezoChannels+0x1c2>
						&& (channel[ch].main_rdy_usealt))
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	498e      	ldr	r1, [pc, #568]	; (8001c3c <checkPiezoChannels+0x338>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3312      	adds	r3, #18
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d057      	beq.n	8001ac6 <checkPiezoChannels+0x1c2>
					_volume = _volume * 4;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	e053      	b.n	8001ac6 <checkPiezoChannels+0x1c2>
			} else {
				//volume for cymbals
				_volume = (int) (100.
						* (float) (channel[ch].main_rdy_height - PEAK_THRESHOLD)
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	4986      	ldr	r1, [pc, #536]	; (8001c3c <checkPiezoChannels+0x338>)
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	00db      	lsls	r3, r3, #3
 8001a2a:	440b      	add	r3, r1
 8001a2c:	331a      	adds	r3, #26
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	3b32      	subs	r3, #50	; 0x32
 8001a32:	ee07 3a90 	vmov	s15, r3
 8001a36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a3a:	ee17 0a90 	vmov	r0, s15
 8001a3e:	f7fe fda3 	bl	8000588 <__aeabi_f2d>
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b7e      	ldr	r3, [pc, #504]	; (8001c40 <checkPiezoChannels+0x33c>)
 8001a48:	f7fe fdf6 	bl	8000638 <__aeabi_dmul>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
						/ 4096. * 100. / (float) channel[ch].peak_volume_norm
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4b7a      	ldr	r3, [pc, #488]	; (8001c44 <checkPiezoChannels+0x340>)
 8001a5a:	f7fe ff17 	bl	800088c <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	4b75      	ldr	r3, [pc, #468]	; (8001c40 <checkPiezoChannels+0x33c>)
 8001a6c:	f7fe fde4 	bl	8000638 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4614      	mov	r4, r2
 8001a76:	461d      	mov	r5, r3
 8001a78:	78fa      	ldrb	r2, [r7, #3]
 8001a7a:	4970      	ldr	r1, [pc, #448]	; (8001c3c <checkPiezoChannels+0x338>)
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	00db      	lsls	r3, r3, #3
 8001a80:	4413      	add	r3, r2
 8001a82:	00db      	lsls	r3, r3, #3
 8001a84:	440b      	add	r3, r1
 8001a86:	3306      	adds	r3, #6
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	ee07 3a90 	vmov	s15, r3
 8001a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a92:	ee17 0a90 	vmov	r0, s15
 8001a96:	f7fe fd77 	bl	8000588 <__aeabi_f2d>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4620      	mov	r0, r4
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	f7fe fef3 	bl	800088c <__aeabi_ddiv>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4610      	mov	r0, r2
 8001aac:	4619      	mov	r1, r3
						* 2);
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	f7fe fc0b 	bl	80002cc <__adddf3>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
				_volume = (int) (100.
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7fe ffcd 	bl	8000a5c <__aeabi_d2iz>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	607b      	str	r3, [r7, #4]
			}

			if (_volume > 127)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b7f      	cmp	r3, #127	; 0x7f
 8001aca:	dd01      	ble.n	8001ad0 <checkPiezoChannels+0x1cc>
				_volume = 127;
 8001acc:	237f      	movs	r3, #127	; 0x7f
 8001ace:	607b      	str	r3, [r7, #4]
			if (_volume < 1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	dc01      	bgt.n	8001ada <checkPiezoChannels+0x1d6>
				_volume = 1;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	607b      	str	r3, [r7, #4]
			channel[ch].main_rdy_volume = (uint8_t) _volume;
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	b2d8      	uxtb	r0, r3
 8001ae0:	4956      	ldr	r1, [pc, #344]	; (8001c3c <checkPiezoChannels+0x338>)
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	440b      	add	r3, r1
 8001aec:	3320      	adds	r3, #32
 8001aee:	4602      	mov	r2, r0
 8001af0:	701a      	strb	r2, [r3, #0]

			uint8_t vc;
			if (channel[ch].main_rdy_usealt)
 8001af2:	78fa      	ldrb	r2, [r7, #3]
 8001af4:	4951      	ldr	r1, [pc, #324]	; (8001c3c <checkPiezoChannels+0x338>)
 8001af6:	4613      	mov	r3, r2
 8001af8:	00db      	lsls	r3, r3, #3
 8001afa:	4413      	add	r3, r2
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	440b      	add	r3, r1
 8001b00:	3312      	adds	r3, #18
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d00a      	beq.n	8001b1e <checkPiezoChannels+0x21a>
				vc = channel[ch].alt_voice;	//	sendMidiGEN(channel[ch].alt_voice ,channel[ch].main_rdy_volume);
 8001b08:	78fa      	ldrb	r2, [r7, #3]
 8001b0a:	494c      	ldr	r1, [pc, #304]	; (8001c3c <checkPiezoChannels+0x338>)
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	4413      	add	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	440b      	add	r3, r1
 8001b16:	3301      	adds	r3, #1
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	70bb      	strb	r3, [r7, #2]
 8001b1c:	e008      	b.n	8001b30 <checkPiezoChannels+0x22c>
			else
				vc = channel[ch].main_voice;//	sendMidiGEN(channel[ch].main_voice,channel[ch].main_rdy_volume);
 8001b1e:	78fa      	ldrb	r2, [r7, #3]
 8001b20:	4946      	ldr	r1, [pc, #280]	; (8001c3c <checkPiezoChannels+0x338>)
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	4413      	add	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	70bb      	strb	r3, [r7, #2]
			//#define DEBUG_ADC
#ifdef DEBUG_ADC
				  sprintf(buffer_out, "\r\n 0- %d 1 - %d 2 - %d 3 - %d 4 - %d 5 - %d", adc_val[0], adc_val[1], adc_val[2], adc_val[3], adc_val[4], adc_val[5]);
				  sendUart(buffer_out);
	#endif
			sendMidi(vc, channel[ch].main_rdy_volume);
 8001b30:	78fa      	ldrb	r2, [r7, #3]
 8001b32:	4942      	ldr	r1, [pc, #264]	; (8001c3c <checkPiezoChannels+0x338>)
 8001b34:	4613      	mov	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	440b      	add	r3, r1
 8001b3e:	3320      	adds	r3, #32
 8001b40:	781a      	ldrb	r2, [r3, #0]
 8001b42:	78bb      	ldrb	r3, [r7, #2]
 8001b44:	4611      	mov	r1, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	f001 ffd2 	bl	8003af0 <sendMidi>
			channel[ch].main_last_on_voice = vc;
 8001b4c:	78fa      	ldrb	r2, [r7, #3]
 8001b4e:	493b      	ldr	r1, [pc, #236]	; (8001c3c <checkPiezoChannels+0x338>)
 8001b50:	4613      	mov	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4413      	add	r3, r2
 8001b56:	00db      	lsls	r3, r3, #3
 8001b58:	440b      	add	r3, r1
 8001b5a:	333c      	adds	r3, #60	; 0x3c
 8001b5c:	78ba      	ldrb	r2, [r7, #2]
 8001b5e:	701a      	strb	r2, [r3, #0]
			channel[ch].main_last_on_time = HAL_GetTick();
 8001b60:	78fc      	ldrb	r4, [r7, #3]
 8001b62:	f002 fba3 	bl	80042ac <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4934      	ldr	r1, [pc, #208]	; (8001c3c <checkPiezoChannels+0x338>)
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	00db      	lsls	r3, r3, #3
 8001b6e:	4423      	add	r3, r4
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	440b      	add	r3, r1
 8001b74:	3338      	adds	r3, #56	; 0x38
 8001b76:	601a      	str	r2, [r3, #0]

			sendDebug(ch, 0);
 8001b78:	78fb      	ldrb	r3, [r7, #3]
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f91b 	bl	8001db8 <sendDebug>
		}

		if (channel[ch].aux_rdy) {
 8001b82:	78fa      	ldrb	r2, [r7, #3]
 8001b84:	492d      	ldr	r1, [pc, #180]	; (8001c3c <checkPiezoChannels+0x338>)
 8001b86:	4613      	mov	r3, r2
 8001b88:	00db      	lsls	r3, r3, #3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	440b      	add	r3, r1
 8001b90:	3324      	adds	r3, #36	; 0x24
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 80b3 	beq.w	8001d00 <checkPiezoChannels+0x3fc>
			channel[ch].aux_rdy = 0;
 8001b9a:	78fa      	ldrb	r2, [r7, #3]
 8001b9c:	4927      	ldr	r1, [pc, #156]	; (8001c3c <checkPiezoChannels+0x338>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	00db      	lsls	r3, r3, #3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3324      	adds	r3, #36	; 0x24
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
			sendDebug(ch, 1);
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	2101      	movs	r1, #1
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f900 	bl	8001db8 <sendDebug>

			switch (channel[ch].chnl_type) {
 8001bb8:	78fa      	ldrb	r2, [r7, #3]
 8001bba:	4920      	ldr	r1, [pc, #128]	; (8001c3c <checkPiezoChannels+0x338>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	440b      	add	r3, r1
 8001bc6:	3303      	adds	r3, #3
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b05      	cmp	r3, #5
 8001bcc:	d015      	beq.n	8001bfa <checkPiezoChannels+0x2f6>
 8001bce:	2b05      	cmp	r3, #5
 8001bd0:	dc4f      	bgt.n	8001c72 <checkPiezoChannels+0x36e>
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d002      	beq.n	8001bdc <checkPiezoChannels+0x2d8>
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d036      	beq.n	8001c48 <checkPiezoChannels+0x344>
 8001bda:	e04a      	b.n	8001c72 <checkPiezoChannels+0x36e>
			case CYMBAL_HIHAT:
				if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 8001bdc:	78fa      	ldrb	r2, [r7, #3]
 8001bde:	4917      	ldr	r1, [pc, #92]	; (8001c3c <checkPiezoChannels+0x338>)
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	332c      	adds	r3, #44	; 0x2c
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	f040 8083 	bne.w	8001cfa <checkPiezoChannels+0x3f6>
					sendMidiHHPedalOn();
 8001bf4:	f001 ffd2 	bl	8003b9c <sendMidiHHPedalOn>
				//				  else
				//					  sendMidiGEN(channel[ch].main_voice, 5);
				break;
 8001bf8:	e07f      	b.n	8001cfa <checkPiezoChannels+0x3f6>

			case CYMBAL_MUTE:
				if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 8001bfa:	78fa      	ldrb	r2, [r7, #3]
 8001bfc:	490f      	ldr	r1, [pc, #60]	; (8001c3c <checkPiezoChannels+0x338>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	00db      	lsls	r3, r3, #3
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	332c      	adds	r3, #44	; 0x2c
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	d176      	bne.n	8001cfe <checkPiezoChannels+0x3fa>
					sendMidi2(channel[ch].main_voice, 1, channel[ch].main_voice,
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	490a      	ldr	r1, [pc, #40]	; (8001c3c <checkPiezoChannels+0x338>)
 8001c14:	4613      	mov	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	4413      	add	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	440b      	add	r3, r1
 8001c1e:	7818      	ldrb	r0, [r3, #0]
 8001c20:	78fa      	ldrb	r2, [r7, #3]
 8001c22:	4906      	ldr	r1, [pc, #24]	; (8001c3c <checkPiezoChannels+0x338>)
 8001c24:	4613      	mov	r3, r2
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4413      	add	r3, r2
 8001c2a:	00db      	lsls	r3, r3, #3
 8001c2c:	440b      	add	r3, r1
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	2300      	movs	r3, #0
 8001c32:	2101      	movs	r1, #1
 8001c34:	f001 ff7c 	bl	8003b30 <sendMidi2>
							0);
				break;
 8001c38:	e061      	b.n	8001cfe <checkPiezoChannels+0x3fa>
 8001c3a:	bf00      	nop
 8001c3c:	20000a90 	.word	0x20000a90
 8001c40:	40590000 	.word	0x40590000
 8001c44:	40b00000 	.word	0x40b00000

			case CYMBAL_2_ZONE:
				sendMidi2(channel[ch].main_voice, 1, channel[ch].main_voice, 0);
 8001c48:	78fa      	ldrb	r2, [r7, #3]
 8001c4a:	494c      	ldr	r1, [pc, #304]	; (8001d7c <checkPiezoChannels+0x478>)
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	440b      	add	r3, r1
 8001c56:	7818      	ldrb	r0, [r3, #0]
 8001c58:	78fa      	ldrb	r2, [r7, #3]
 8001c5a:	4948      	ldr	r1, [pc, #288]	; (8001d7c <checkPiezoChannels+0x478>)
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	440b      	add	r3, r1
 8001c66:	781a      	ldrb	r2, [r3, #0]
 8001c68:	2300      	movs	r3, #0
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	f001 ff60 	bl	8003b30 <sendMidi2>
				break;
 8001c70:	e046      	b.n	8001d00 <checkPiezoChannels+0x3fc>

				// INDEPENDENT AUX INPUTS
			default:
				if (channel[ch].aux_type == AUX_TYPE_PAD)
 8001c72:	78fa      	ldrb	r2, [r7, #3]
 8001c74:	4941      	ldr	r1, [pc, #260]	; (8001d7c <checkPiezoChannels+0x478>)
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	3304      	adds	r3, #4
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d116      	bne.n	8001cb6 <checkPiezoChannels+0x3b2>
					sendMidi2(channel[ch].aux_voice, 100, channel[ch].aux_voice,
 8001c88:	78fa      	ldrb	r2, [r7, #3]
 8001c8a:	493c      	ldr	r1, [pc, #240]	; (8001d7c <checkPiezoChannels+0x478>)
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	4413      	add	r3, r2
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	440b      	add	r3, r1
 8001c96:	3302      	adds	r3, #2
 8001c98:	7818      	ldrb	r0, [r3, #0]
 8001c9a:	78fa      	ldrb	r2, [r7, #3]
 8001c9c:	4937      	ldr	r1, [pc, #220]	; (8001d7c <checkPiezoChannels+0x478>)
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	440b      	add	r3, r1
 8001ca8:	3302      	adds	r3, #2
 8001caa:	781a      	ldrb	r2, [r3, #0]
 8001cac:	2300      	movs	r3, #0
 8001cae:	2164      	movs	r1, #100	; 0x64
 8001cb0:	f001 ff3e 	bl	8003b30 <sendMidi2>
 8001cb4:	e024      	b.n	8001d00 <checkPiezoChannels+0x3fc>
							0);
				else { //PEDAL
					   // PEDAL pressed
					if (channel[ch].aux_rdy_state == CHANNEL_PEDAL_PRESSED)
 8001cb6:	78fa      	ldrb	r2, [r7, #3]
 8001cb8:	4930      	ldr	r1, [pc, #192]	; (8001d7c <checkPiezoChannels+0x478>)
 8001cba:	4613      	mov	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	4413      	add	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	440b      	add	r3, r1
 8001cc4:	332c      	adds	r3, #44	; 0x2c
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d119      	bne.n	8001d00 <checkPiezoChannels+0x3fc>
						sendMidi2(channel[ch].aux_voice, 100,
 8001ccc:	78fa      	ldrb	r2, [r7, #3]
 8001cce:	492b      	ldr	r1, [pc, #172]	; (8001d7c <checkPiezoChannels+0x478>)
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	440b      	add	r3, r1
 8001cda:	3302      	adds	r3, #2
 8001cdc:	7818      	ldrb	r0, [r3, #0]
 8001cde:	78fa      	ldrb	r2, [r7, #3]
								channel[ch].aux_voice, 0);
 8001ce0:	4926      	ldr	r1, [pc, #152]	; (8001d7c <checkPiezoChannels+0x478>)
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4413      	add	r3, r2
 8001ce8:	00db      	lsls	r3, r3, #3
 8001cea:	440b      	add	r3, r1
 8001cec:	3302      	adds	r3, #2
 8001cee:	781a      	ldrb	r2, [r3, #0]
						sendMidi2(channel[ch].aux_voice, 100,
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2164      	movs	r1, #100	; 0x64
 8001cf4:	f001 ff1c 	bl	8003b30 <sendMidi2>
 8001cf8:	e002      	b.n	8001d00 <checkPiezoChannels+0x3fc>
				break;
 8001cfa:	bf00      	nop
 8001cfc:	e000      	b.n	8001d00 <checkPiezoChannels+0x3fc>
				break;
 8001cfe:	bf00      	nop
					//						  sendMidi2(channel[ch].aux_voice, 1, channel[ch].aux_voice,0);
				}
			}
		}
		// send off command if needed
		if (channel[ch].main_last_on_voice > 0) {
 8001d00:	78fa      	ldrb	r2, [r7, #3]
 8001d02:	491e      	ldr	r1, [pc, #120]	; (8001d7c <checkPiezoChannels+0x478>)
 8001d04:	4613      	mov	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	440b      	add	r3, r1
 8001d0e:	333c      	adds	r3, #60	; 0x3c
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d025      	beq.n	8001d62 <checkPiezoChannels+0x45e>
			if (HAL_GetTick()
 8001d16:	f002 fac9 	bl	80042ac <HAL_GetTick>
 8001d1a:	4601      	mov	r1, r0
					> (channel[ch].main_last_on_time + OFF_DELAY_MS)) {
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	4817      	ldr	r0, [pc, #92]	; (8001d7c <checkPiezoChannels+0x478>)
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	4403      	add	r3, r0
 8001d2a:	3338      	adds	r3, #56	; 0x38
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	33c8      	adds	r3, #200	; 0xc8
			if (HAL_GetTick()
 8001d30:	4299      	cmp	r1, r3
 8001d32:	d916      	bls.n	8001d62 <checkPiezoChannels+0x45e>
				sendMidi(channel[ch].main_last_on_voice, 0);
 8001d34:	78fa      	ldrb	r2, [r7, #3]
 8001d36:	4911      	ldr	r1, [pc, #68]	; (8001d7c <checkPiezoChannels+0x478>)
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	440b      	add	r3, r1
 8001d42:	333c      	adds	r3, #60	; 0x3c
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fed1 	bl	8003af0 <sendMidi>
				channel[ch].main_last_on_voice = 0;
 8001d4e:	78fa      	ldrb	r2, [r7, #3]
 8001d50:	490a      	ldr	r1, [pc, #40]	; (8001d7c <checkPiezoChannels+0x478>)
 8001d52:	4613      	mov	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	333c      	adds	r3, #60	; 0x3c
 8001d5e:	2200      	movs	r2, #0
 8001d60:	701a      	strb	r2, [r3, #0]
	for (uint8_t ch = 0; ch < NUMBER_OF_CHANNELS; ch++) {
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	3301      	adds	r3, #1
 8001d66:	70fb      	strb	r3, [r7, #3]
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	2b05      	cmp	r3, #5
 8001d6c:	f67f add0 	bls.w	8001910 <checkPiezoChannels+0xc>
			}
		}
	}
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bdb0      	pop	{r4, r5, r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000a90 	.word	0x20000a90

08001d80 <tx_midi>:



void tx_midi(uint8_t *_buffer, uint16_t len) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
	uint8_t rt = USBD_BUSY;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]

	while (rt == USBD_BUSY) {
 8001d90:	e006      	b.n	8001da0 <tx_midi+0x20>
		rt = CDC_Transmit_FS(_buffer, len);
 8001d92:	887b      	ldrh	r3, [r7, #2]
 8001d94:	4619      	mov	r1, r3
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f00e f878 	bl	800fe8c <CDC_Transmit_FS>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	73fb      	strb	r3, [r7, #15]
	while (rt == USBD_BUSY) {
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d0f5      	beq.n	8001d92 <tx_midi+0x12>
	};

	TIM2->CNT = 0; // restart active sense timer
 8001da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001daa:	2200      	movs	r2, #0
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <sendDebug>:

void sendDebug(uint8_t _ch, uint8_t _aux)
{
 8001db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dba:	b08d      	sub	sp, #52	; 0x34
 8001dbc:	af06      	add	r7, sp, #24
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	73bb      	strb	r3, [r7, #14]
	uint8_t voice;
	uint8_t volume;
	uint8_t length;

	if (_aux) {
 8001dc8:	7bbb      	ldrb	r3, [r7, #14]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d032      	beq.n	8001e34 <sendDebug+0x7c>
		voice = channel[_ch].aux_voice;
 8001dce:	7bfa      	ldrb	r2, [r7, #15]
 8001dd0:	494e      	ldr	r1, [pc, #312]	; (8001f0c <sendDebug+0x154>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	440b      	add	r3, r1
 8001ddc:	3302      	adds	r3, #2
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	75fb      	strb	r3, [r7, #23]

		sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch, voice,
 8001de2:	7bf9      	ldrb	r1, [r7, #15]
 8001de4:	7df8      	ldrb	r0, [r7, #23]
				channel[_ch].aux_rdy_state, channel[_ch].main_peaking,
 8001de6:	7bfa      	ldrb	r2, [r7, #15]
 8001de8:	4c48      	ldr	r4, [pc, #288]	; (8001f0c <sendDebug+0x154>)
 8001dea:	4613      	mov	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	4413      	add	r3, r2
 8001df0:	00db      	lsls	r3, r3, #3
 8001df2:	4423      	add	r3, r4
 8001df4:	332c      	adds	r3, #44	; 0x2c
 8001df6:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch, voice,
 8001df8:	461d      	mov	r5, r3
				channel[_ch].aux_rdy_state, channel[_ch].main_peaking,
 8001dfa:	7bfa      	ldrb	r2, [r7, #15]
 8001dfc:	4c43      	ldr	r4, [pc, #268]	; (8001f0c <sendDebug+0x154>)
 8001dfe:	4613      	mov	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4413      	add	r3, r2
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4423      	add	r3, r4
 8001e08:	3310      	adds	r3, #16
 8001e0a:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch, voice,
 8001e0c:	461e      	mov	r6, r3
				channel[_ch].aux_status);
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	4c3e      	ldr	r4, [pc, #248]	; (8001f0c <sendDebug+0x154>)
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	00db      	lsls	r3, r3, #3
 8001e1a:	4423      	add	r3, r4
 8001e1c:	3318      	adds	r3, #24
 8001e1e:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer_out, ">>>AUX %d: %X %d [%d %d]\n", _ch, voice,
 8001e20:	9302      	str	r3, [sp, #8]
 8001e22:	9601      	str	r6, [sp, #4]
 8001e24:	9500      	str	r5, [sp, #0]
 8001e26:	4603      	mov	r3, r0
 8001e28:	460a      	mov	r2, r1
 8001e2a:	4939      	ldr	r1, [pc, #228]	; (8001f10 <sendDebug+0x158>)
 8001e2c:	4839      	ldr	r0, [pc, #228]	; (8001f14 <sendDebug+0x15c>)
 8001e2e:	f00e fd2b 	bl	8010888 <siprintf>
 8001e32:	e060      	b.n	8001ef6 <sendDebug+0x13e>
	} else {
		if (channel[_ch].main_rdy_usealt)
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	4935      	ldr	r1, [pc, #212]	; (8001f0c <sendDebug+0x154>)
 8001e38:	4613      	mov	r3, r2
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	440b      	add	r3, r1
 8001e42:	3312      	adds	r3, #18
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00a      	beq.n	8001e60 <sendDebug+0xa8>
			voice = channel[_ch].alt_voice;
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	492f      	ldr	r1, [pc, #188]	; (8001f0c <sendDebug+0x154>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	3301      	adds	r3, #1
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	75fb      	strb	r3, [r7, #23]
 8001e5e:	e008      	b.n	8001e72 <sendDebug+0xba>
		else
			voice = channel[_ch].main_voice;
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	492a      	ldr	r1, [pc, #168]	; (8001f0c <sendDebug+0x154>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	75fb      	strb	r3, [r7, #23]
		volume = channel[_ch].main_rdy_volume;
 8001e72:	7bfa      	ldrb	r2, [r7, #15]
 8001e74:	4925      	ldr	r1, [pc, #148]	; (8001f0c <sendDebug+0x154>)
 8001e76:	4613      	mov	r3, r2
 8001e78:	00db      	lsls	r3, r3, #3
 8001e7a:	4413      	add	r3, r2
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	440b      	add	r3, r1
 8001e80:	3320      	adds	r3, #32
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	75bb      	strb	r3, [r7, #22]
		length = channel[_ch].main_rdy_length;
 8001e86:	7bfa      	ldrb	r2, [r7, #15]
 8001e88:	4920      	ldr	r1, [pc, #128]	; (8001f0c <sendDebug+0x154>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	4413      	add	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	3322      	adds	r3, #34	; 0x22
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	757b      	strb	r3, [r7, #21]
		sprintf(buffer_out,
 8001e9a:	7bfc      	ldrb	r4, [r7, #15]
 8001e9c:	7dfd      	ldrb	r5, [r7, #23]
				">>MAIN %d: voice %X (alt:%d), vol %d (%u/4096) t=%u; AUX = %d\n",
				_ch, voice, channel[_ch].alt_voice, volume,
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	491a      	ldr	r1, [pc, #104]	; (8001f0c <sendDebug+0x154>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	00db      	lsls	r3, r3, #3
 8001eaa:	440b      	add	r3, r1
 8001eac:	3301      	adds	r3, #1
 8001eae:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer_out,
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	7db9      	ldrb	r1, [r7, #22]
				channel[_ch].main_rdy_height, length, channel[_ch].aux_status);
 8001eb4:	7bfa      	ldrb	r2, [r7, #15]
 8001eb6:	4815      	ldr	r0, [pc, #84]	; (8001f0c <sendDebug+0x154>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4403      	add	r3, r0
 8001ec2:	331a      	adds	r3, #26
 8001ec4:	881b      	ldrh	r3, [r3, #0]
		sprintf(buffer_out,
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	7d78      	ldrb	r0, [r7, #21]
				channel[_ch].main_rdy_height, length, channel[_ch].aux_status);
 8001eca:	7bfa      	ldrb	r2, [r7, #15]
 8001ecc:	4e0f      	ldr	r6, [pc, #60]	; (8001f0c <sendDebug+0x154>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4433      	add	r3, r6
 8001ed8:	3318      	adds	r3, #24
 8001eda:	781b      	ldrb	r3, [r3, #0]
		sprintf(buffer_out,
 8001edc:	9304      	str	r3, [sp, #16]
 8001ede:	9003      	str	r0, [sp, #12]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	9202      	str	r2, [sp, #8]
 8001ee4:	9101      	str	r1, [sp, #4]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	462b      	mov	r3, r5
 8001eec:	4622      	mov	r2, r4
 8001eee:	490a      	ldr	r1, [pc, #40]	; (8001f18 <sendDebug+0x160>)
 8001ef0:	4808      	ldr	r0, [pc, #32]	; (8001f14 <sendDebug+0x15c>)
 8001ef2:	f00e fcc9 	bl	8010888 <siprintf>
	}
	sendUart(buffer_out);
 8001ef6:	4807      	ldr	r0, [pc, #28]	; (8001f14 <sendDebug+0x15c>)
 8001ef8:	f7ff fca8 	bl	800184c <sendUart>

	HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8001efc:	2102      	movs	r1, #2
 8001efe:	4807      	ldr	r0, [pc, #28]	; (8001f1c <sendDebug+0x164>)
 8001f00:	f004 f9c3 	bl	800628a <HAL_GPIO_TogglePin>
}
 8001f04:	bf00      	nop
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f0c:	20000a90 	.word	0x20000a90
 8001f10:	08011150 	.word	0x08011150
 8001f14:	2000100c 	.word	0x2000100c
 8001f18:	0801116c 	.word	0x0801116c
 8001f1c:	40021000 	.word	0x40021000

08001f20 <getAuxState>:


// READ Diginal state of aux channels
void getAuxState (GPIO_PinState *_state){
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	_state[0] = HAL_GPIO_ReadPin(DD0_GPIO_Port, DD0_Pin);
 8001f28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f2c:	481b      	ldr	r0, [pc, #108]	; (8001f9c <getAuxState+0x7c>)
 8001f2e:	f004 f97b 	bl	8006228 <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	461a      	mov	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	701a      	strb	r2, [r3, #0]
	_state[1] = HAL_GPIO_ReadPin(DD1_GPIO_Port, DD1_Pin);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	1c5c      	adds	r4, r3, #1
 8001f3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f42:	4816      	ldr	r0, [pc, #88]	; (8001f9c <getAuxState+0x7c>)
 8001f44:	f004 f970 	bl	8006228 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	7023      	strb	r3, [r4, #0]
	_state[2] = HAL_GPIO_ReadPin(DD2_GPIO_Port, DD2_Pin);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	1c9c      	adds	r4, r3, #2
 8001f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f54:	4811      	ldr	r0, [pc, #68]	; (8001f9c <getAuxState+0x7c>)
 8001f56:	f004 f967 	bl	8006228 <HAL_GPIO_ReadPin>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	7023      	strb	r3, [r4, #0]
	_state[3] = HAL_GPIO_ReadPin(DD3_GPIO_Port, DD3_Pin);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	1cdc      	adds	r4, r3, #3
 8001f62:	2110      	movs	r1, #16
 8001f64:	480e      	ldr	r0, [pc, #56]	; (8001fa0 <getAuxState+0x80>)
 8001f66:	f004 f95f 	bl	8006228 <HAL_GPIO_ReadPin>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	7023      	strb	r3, [r4, #0]

	_state[4] = HAL_GPIO_ReadPin(DD4_GPIO_Port, DD4_Pin);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	1d1c      	adds	r4, r3, #4
 8001f72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f76:	4809      	ldr	r0, [pc, #36]	; (8001f9c <getAuxState+0x7c>)
 8001f78:	f004 f956 	bl	8006228 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	7023      	strb	r3, [r4, #0]
	_state[5] = HAL_GPIO_ReadPin(DD5_GPIO_Port, DD5_Pin);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	1d5c      	adds	r4, r3, #5
 8001f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f88:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <getAuxState+0x80>)
 8001f8a:	f004 f94d 	bl	8006228 <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	7023      	strb	r3, [r4, #0]
//	_state[6] = HAL_GPIO_ReadPin(DIG_IN7_GPIO_Port, DIG_IN7_Pin);
//	_state[7] = 0; //HAL_GPIO_ReadPin(DIG_IN8_GPIO_Port, DIG_IN8_Pin);

//	_state[8] = HAL_GPIO_ReadPin(DIG_IN9_GPIO_Port, DIG_IN9_Pin);
//	_state[9] = 0;
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd90      	pop	{r4, r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40021800 	.word	0x40021800
 8001fa0:	40021400 	.word	0x40021400

08001fa4 <Save_Setting>:

uint8_t Save_Setting(uint8_t _rst)
{
 8001fa4:	b5b0      	push	{r4, r5, r7, lr}
 8001fa6:	b0ce      	sub	sp, #312	; 0x138
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	4602      	mov	r2, r0
 8001fac:	1dfb      	adds	r3, r7, #7
 8001fae:	701a      	strb	r2, [r3, #0]
	uint32_t SavingBuff[64];
	uint8_t i;
	uint32_t error = 0;
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
	uint64_t val = 0;
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	FLASH_EraseInitTypeDef FLASH_EraseInitStruct = {
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	461a      	mov	r2, r3
 8001fca:	2300      	movs	r3, #0
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	6053      	str	r3, [r2, #4]
 8001fd0:	6093      	str	r3, [r2, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
 8001fd4:	6113      	str	r3, [r2, #16]
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	2201      	movs	r2, #1
 8001fdc:	605a      	str	r2, [r3, #4]
 8001fde:	f107 030c 	add.w	r3, r7, #12
 8001fe2:	2206      	movs	r2, #6
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	f107 030c 	add.w	r3, r7, #12
 8001fea:	2201      	movs	r2, #1
 8001fec:	60da      	str	r2, [r3, #12]
			.Banks = FLASH_BANK_1,
			.Sector = 6,
			.NbSectors = 1
	};

	for (i = 0; i < 64; i++)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8001ff4:	e00b      	b.n	800200e <Save_Setting+0x6a>
		SavingBuff[i] = 0;
 8001ff6:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8001ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ffe:	2100      	movs	r1, #0
 8002000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 0; i < 64; i++)
 8002004:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002008:	3301      	adds	r3, #1
 800200a:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800200e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002012:	2b3f      	cmp	r3, #63	; 0x3f
 8002014:	d9ef      	bls.n	8001ff6 <Save_Setting+0x52>
//112233445566778899 AABBCCDDEEFF
	if (_rst == 0)
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d104      	bne.n	8002028 <Save_Setting+0x84>
		SavingBuff[0] = 0xC4C0FFEE; // load settings marker
 800201e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002022:	4aae      	ldr	r2, [pc, #696]	; (80022dc <Save_Setting+0x338>)
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	e004      	b.n	8002032 <Save_Setting+0x8e>
	else
		SavingBuff[0] = 0xFFFFFFFF; // do not load marker
 8002028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002030:	601a      	str	r2, [r3, #0]
	SavingBuff[1] = 0xBB;
 8002032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002036:	22bb      	movs	r2, #187	; 0xbb
 8002038:	605a      	str	r2, [r3, #4]

	// 0x11223344
	for (i = 1; i < 10; i++) {
 800203a:	2301      	movs	r3, #1
 800203c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8002040:	e0bc      	b.n	80021bc <Save_Setting+0x218>
		// channel configuration settings
		SavingBuff[2 * i] = (channel[i - 1].main_voice & 0xFF) * 0x01000000;
 8002042:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002046:	1e5a      	subs	r2, r3, #1
 8002048:	49a5      	ldr	r1, [pc, #660]	; (80022e0 <Save_Setting+0x33c>)
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	440b      	add	r3, r1
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	0619      	lsls	r1, r3, #24
 8002058:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800205c:	005a      	lsls	r2, r3, #1
 800205e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2 * i] += (channel[i - 1].aux_voice & 0xFF) * 0x00010000;
 8002066:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800206a:	005a      	lsls	r2, r3, #1
 800206c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002070:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002074:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002078:	1e5a      	subs	r2, r3, #1
 800207a:	4899      	ldr	r0, [pc, #612]	; (80022e0 <Save_Setting+0x33c>)
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4403      	add	r3, r0
 8002086:	3302      	adds	r3, #2
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	041b      	lsls	r3, r3, #16
 800208c:	4618      	mov	r0, r3
 800208e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002092:	005a      	lsls	r2, r3, #1
 8002094:	4401      	add	r1, r0
 8002096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800209a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2 * i] += (channel[i - 1].alt_voice & 0xFF) * 0x00000100;
 800209e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80020a2:	005a      	lsls	r2, r3, #1
 80020a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020ac:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80020b0:	1e5a      	subs	r2, r3, #1
 80020b2:	488b      	ldr	r0, [pc, #556]	; (80022e0 <Save_Setting+0x33c>)
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4403      	add	r3, r0
 80020be:	3301      	adds	r3, #1
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	021b      	lsls	r3, r3, #8
 80020c4:	4618      	mov	r0, r3
 80020c6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80020ca:	005a      	lsls	r2, r3, #1
 80020cc:	4401      	add	r1, r0
 80020ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2 * i] += (channel[i - 1].chnl_type & 0xFF);
 80020d6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80020da:	005a      	lsls	r2, r3, #1
 80020dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020e4:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80020e8:	1e5a      	subs	r2, r3, #1
 80020ea:	487d      	ldr	r0, [pc, #500]	; (80022e0 <Save_Setting+0x33c>)
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4403      	add	r3, r0
 80020f6:	3303      	adds	r3, #3
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002100:	005a      	lsls	r2, r3, #1
 8002102:	4401      	add	r1, r0
 8002104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002108:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		// channel parameter settings
		SavingBuff[2 * i + 1] = (channel[i - 1].peak_volume_norm & 0xFF) * 0x01000000;
 800210c:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002110:	1e5a      	subs	r2, r3, #1
 8002112:	4973      	ldr	r1, [pc, #460]	; (80022e0 <Save_Setting+0x33c>)
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	3306      	adds	r3, #6
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	b2db      	uxtb	r3, r3
 8002124:	0619      	lsls	r1, r3, #24
 8002126:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2 * i + 1] += (channel[i - 1].peak_min_length & 0xFF) * 0x00010000;
 8002136:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002142:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002146:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800214a:	1e5a      	subs	r2, r3, #1
 800214c:	4864      	ldr	r0, [pc, #400]	; (80022e0 <Save_Setting+0x33c>)
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4403      	add	r3, r0
 8002158:	330a      	adds	r3, #10
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	041b      	lsls	r3, r3, #16
 8002160:	4618      	mov	r0, r3
 8002162:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	4401      	add	r1, r0
 800216c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		SavingBuff[2 * i + 1] += (channel[i - 1].peak_max_length & 0xFF) * 0x00000100;
 8002174:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002184:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002188:	1e5a      	subs	r2, r3, #1
 800218a:	4855      	ldr	r0, [pc, #340]	; (80022e0 <Save_Setting+0x33c>)
 800218c:	4613      	mov	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4403      	add	r3, r0
 8002196:	3308      	adds	r3, #8
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	4618      	mov	r0, r3
 80021a0:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	4401      	add	r1, r0
 80021aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (i = 1; i < 10; i++) {
 80021b2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80021b6:	3301      	adds	r3, #1
 80021b8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80021bc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80021c0:	2b09      	cmp	r3, #9
 80021c2:	f67f af3e 	bls.w	8002042 <Save_Setting+0x9e>
//		SavingBuff[2*i + 1] += (channel[i-1].peak2peak  & 0xFF);
	}

	HAL_StatusTypeDef err;
	uint8_t st = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
	err = HAL_FLASH_Unlock();
 80021cc:	f003 fc04 	bl	80059d8 <HAL_FLASH_Unlock>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if (err != HAL_OK)
 80021d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d004      	beq.n	80021e8 <Save_Setting+0x244>
		st += 0b10000000;
 80021de:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 80021e2:	3b80      	subs	r3, #128	; 0x80
 80021e4:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
	__HAL_FLASH_CLEAR_FLAG (FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR
 80021e8:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <Save_Setting+0x340>)
 80021ea:	22b3      	movs	r2, #179	; 0xb3
 80021ec:	60da      	str	r2, [r3, #12]
							| FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

	err = HAL_FLASHEx_Erase(&FLASH_EraseInitStruct, &error);
 80021ee:	f107 0220 	add.w	r2, r7, #32
 80021f2:	f107 030c 	add.w	r3, r7, #12
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f003 fd5f 	bl	8005cbc <HAL_FLASHEx_Erase>
 80021fe:	4603      	mov	r3, r0
 8002200:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
	if (err != HAL_OK)
 8002204:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002208:	2b00      	cmp	r3, #0
 800220a:	d004      	beq.n	8002216 <Save_Setting+0x272>
		st += 0b01000000;
 800220c:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8002210:	3340      	adds	r3, #64	; 0x40
 8002212:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136

	for (i = 0; i < 32; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800221c:	e039      	b.n	8002292 <Save_Setting+0x2ee>
		val = (((uint64_t) SavingBuff[i * 2 + 1]) << 32) + SavingBuff[i * 2];
 800221e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800222a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800222e:	4618      	mov	r0, r3
 8002230:	f04f 0100 	mov.w	r1, #0
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	f04f 0300 	mov.w	r3, #0
 800223c:	0003      	movs	r3, r0
 800223e:	2200      	movs	r2, #0
 8002240:	f897 1137 	ldrb.w	r1, [r7, #311]	; 0x137
 8002244:	0048      	lsls	r0, r1, #1
 8002246:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800224a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800224e:	4608      	mov	r0, r1
 8002250:	f04f 0100 	mov.w	r1, #0
 8002254:	1814      	adds	r4, r2, r0
 8002256:	eb43 0501 	adc.w	r5, r3, r1
 800225a:	e9c7 454a 	strd	r4, r5, [r7, #296]	; 0x128
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
				FLASH_USER_START_ADDR + 8 * i, val) != HAL_OK)
 800225e:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002262:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8002266:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800226a:	00db      	lsls	r3, r3, #3
		if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,
 800226c:	4619      	mov	r1, r3
 800226e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002272:	2003      	movs	r0, #3
 8002274:	f003 fb5c 	bl	8005930 <HAL_FLASH_Program>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <Save_Setting+0x2e4>
			st += 1;
 800227e:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 8002282:	3301      	adds	r3, #1
 8002284:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136
	for (i = 0; i < 32; i++) {
 8002288:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800228c:	3301      	adds	r3, #1
 800228e:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8002292:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8002296:	2b1f      	cmp	r3, #31
 8002298:	d9c1      	bls.n	800221e <Save_Setting+0x27a>
	}
	if (HAL_FLASH_Lock() != HAL_OK)
 800229a:	f003 fbbf 	bl	8005a1c <HAL_FLASH_Lock>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d004      	beq.n	80022ae <Save_Setting+0x30a>
		st += 0b00100000;
 80022a4:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
 80022a8:	3320      	adds	r3, #32
 80022aa:	f887 3136 	strb.w	r3, [r7, #310]	; 0x136

	for (i = 0; i < 64; i++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80022b4:	e007      	b.n	80022c6 <Save_Setting+0x322>
		saved_config[0] = 0;
 80022b6:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <Save_Setting+0x344>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
	for (i = 0; i < 64; i++)
 80022bc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80022c0:	3301      	adds	r3, #1
 80022c2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80022c6:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80022ca:	2b3f      	cmp	r3, #63	; 0x3f
 80022cc:	d9f3      	bls.n	80022b6 <Save_Setting+0x312>

	return st;
 80022ce:	f897 3136 	ldrb.w	r3, [r7, #310]	; 0x136
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	f507 779c 	add.w	r7, r7, #312	; 0x138
 80022d8:	46bd      	mov	sp, r7
 80022da:	bdb0      	pop	{r4, r5, r7, pc}
 80022dc:	c4c0ffee 	.word	0xc4c0ffee
 80022e0:	20000a90 	.word	0x20000a90
 80022e4:	40023c00 	.word	0x40023c00
 80022e8:	20000884 	.word	0x20000884

080022ec <Load_Setting>:


uint8_t Load_Setting()
{
 80022ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ee:	b0a3      	sub	sp, #140	; 0x8c
 80022f0:	af12      	add	r7, sp, #72	; 0x48
	uint8_t i;
//	uint32_t LoadingBuff[64];

	for (i=0;i<64;i++){
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80022f8:	e010      	b.n	800231c <Load_Setting+0x30>
		saved_config[i] = *(userConfig+i);
 80022fa:	4b8f      	ldr	r3, [pc, #572]	; (8002538 <Load_Setting+0x24c>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	441a      	add	r2, r3
 8002306:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	498b      	ldr	r1, [pc, #556]	; (800253c <Load_Setting+0x250>)
 800230e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (i=0;i<64;i++){
 8002312:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002316:	3301      	adds	r3, #1
 8002318:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800231c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002320:	2b3f      	cmp	r3, #63	; 0x3f
 8002322:	d9ea      	bls.n	80022fa <Load_Setting+0xe>
	}

	if (saved_config[0] != 0xC4C0FFEE) return 0;
 8002324:	4b85      	ldr	r3, [pc, #532]	; (800253c <Load_Setting+0x250>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a85      	ldr	r2, [pc, #532]	; (8002540 <Load_Setting+0x254>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d001      	beq.n	8002332 <Load_Setting+0x46>
 800232e:	2300      	movs	r3, #0
 8002330:	e0fd      	b.n	800252e <Load_Setting+0x242>

	for (i = 1; i < 10; i++){
 8002332:	2301      	movs	r3, #1
 8002334:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002338:	e094      	b.n	8002464 <Load_Setting+0x178>
		channel[i-1].main_voice = 0xff & (uint8_t)(saved_config[2*i]>>24);
 800233a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	4a7e      	ldr	r2, [pc, #504]	; (800253c <Load_Setting+0x250>)
 8002342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002346:	0e19      	lsrs	r1, r3, #24
 8002348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800234c:	1e5a      	subs	r2, r3, #1
 800234e:	b2c8      	uxtb	r0, r1
 8002350:	497c      	ldr	r1, [pc, #496]	; (8002544 <Load_Setting+0x258>)
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	440b      	add	r3, r1
 800235c:	4602      	mov	r2, r0
 800235e:	701a      	strb	r2, [r3, #0]
		channel[i-1].aux_voice 	= 0xff & (uint8_t)(saved_config[2*i]>>16);
 8002360:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4a75      	ldr	r2, [pc, #468]	; (800253c <Load_Setting+0x250>)
 8002368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236c:	0c19      	lsrs	r1, r3, #16
 800236e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002372:	1e5a      	subs	r2, r3, #1
 8002374:	b2c8      	uxtb	r0, r1
 8002376:	4973      	ldr	r1, [pc, #460]	; (8002544 <Load_Setting+0x258>)
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	440b      	add	r3, r1
 8002382:	3302      	adds	r3, #2
 8002384:	4602      	mov	r2, r0
 8002386:	701a      	strb	r2, [r3, #0]
		channel[i-1].alt_voice 	= 0xff & (uint8_t)(saved_config[2*i]>>8);
 8002388:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	4a6b      	ldr	r2, [pc, #428]	; (800253c <Load_Setting+0x250>)
 8002390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002394:	0a19      	lsrs	r1, r3, #8
 8002396:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800239a:	1e5a      	subs	r2, r3, #1
 800239c:	b2c8      	uxtb	r0, r1
 800239e:	4969      	ldr	r1, [pc, #420]	; (8002544 <Load_Setting+0x258>)
 80023a0:	4613      	mov	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	3301      	adds	r3, #1
 80023ac:	4602      	mov	r2, r0
 80023ae:	701a      	strb	r2, [r3, #0]
		channel[i-1].chnl_type 	= 0xff & (uint8_t)(saved_config[2*i]);
 80023b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4a61      	ldr	r2, [pc, #388]	; (800253c <Load_Setting+0x250>)
 80023b8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80023bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023c0:	1e5a      	subs	r2, r3, #1
 80023c2:	b2c8      	uxtb	r0, r1
 80023c4:	495f      	ldr	r1, [pc, #380]	; (8002544 <Load_Setting+0x258>)
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	440b      	add	r3, r1
 80023d0:	3303      	adds	r3, #3
 80023d2:	4602      	mov	r2, r0
 80023d4:	701a      	strb	r2, [r3, #0]

		//		channel[i-1].peak_threshold 	= 0xff & (uint8_t)(saved_config[2*i+1]>>24);
		channel[i-1].peak_volume_norm 	= 0xff & (uint8_t)(saved_config[2*i+1]>>24);
 80023d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	3301      	adds	r3, #1
 80023de:	4a57      	ldr	r2, [pc, #348]	; (800253c <Load_Setting+0x250>)
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	0e1b      	lsrs	r3, r3, #24
 80023e6:	b2d9      	uxtb	r1, r3
 80023e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023ec:	1e5a      	subs	r2, r3, #1
 80023ee:	b288      	uxth	r0, r1
 80023f0:	4954      	ldr	r1, [pc, #336]	; (8002544 <Load_Setting+0x258>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	440b      	add	r3, r1
 80023fc:	3306      	adds	r3, #6
 80023fe:	4602      	mov	r2, r0
 8002400:	801a      	strh	r2, [r3, #0]
		channel[i-1].peak_min_length 	= 0xff & (uint8_t)(saved_config[2*i+1]>>16);
 8002402:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	3301      	adds	r3, #1
 800240a:	4a4c      	ldr	r2, [pc, #304]	; (800253c <Load_Setting+0x250>)
 800240c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002410:	0c1b      	lsrs	r3, r3, #16
 8002412:	b2d9      	uxtb	r1, r3
 8002414:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002418:	1e5a      	subs	r2, r3, #1
 800241a:	b288      	uxth	r0, r1
 800241c:	4949      	ldr	r1, [pc, #292]	; (8002544 <Load_Setting+0x258>)
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	330a      	adds	r3, #10
 800242a:	4602      	mov	r2, r0
 800242c:	801a      	strh	r2, [r3, #0]
		channel[i-1].peak_max_length 	= 0xff & (uint8_t)(saved_config[2*i+1]>>8);
 800242e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	3301      	adds	r3, #1
 8002436:	4a41      	ldr	r2, [pc, #260]	; (800253c <Load_Setting+0x250>)
 8002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	b2d9      	uxtb	r1, r3
 8002440:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002444:	1e5a      	subs	r2, r3, #1
 8002446:	b288      	uxth	r0, r1
 8002448:	493e      	ldr	r1, [pc, #248]	; (8002544 <Load_Setting+0x258>)
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	00db      	lsls	r3, r3, #3
 8002452:	440b      	add	r3, r1
 8002454:	3308      	adds	r3, #8
 8002456:	4602      	mov	r2, r0
 8002458:	801a      	strh	r2, [r3, #0]
	for (i = 1; i < 10; i++){
 800245a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800245e:	3301      	adds	r3, #1
 8002460:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002464:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002468:	2b09      	cmp	r3, #9
 800246a:	f67f af66 	bls.w	800233a <Load_Setting+0x4e>
//		channel[i-1].time_between_peaks = 0xff & (uint8_t)(saved_config[2*i+1]);
	}

	sprintf(buffer_out, "........ Previous settings: .......\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n%08lX %08lX %08lX %08lX\n",
 800246e:	4b33      	ldr	r3, [pc, #204]	; (800253c <Load_Setting+0x250>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	637b      	str	r3, [r7, #52]	; 0x34
 8002474:	4b31      	ldr	r3, [pc, #196]	; (800253c <Load_Setting+0x250>)
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	6339      	str	r1, [r7, #48]	; 0x30
 800247a:	4b30      	ldr	r3, [pc, #192]	; (800253c <Load_Setting+0x250>)
 800247c:	6898      	ldr	r0, [r3, #8]
 800247e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002480:	4b2e      	ldr	r3, [pc, #184]	; (800253c <Load_Setting+0x250>)
 8002482:	68dc      	ldr	r4, [r3, #12]
 8002484:	62bc      	str	r4, [r7, #40]	; 0x28
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <Load_Setting+0x250>)
 8002488:	691d      	ldr	r5, [r3, #16]
 800248a:	627d      	str	r5, [r7, #36]	; 0x24
 800248c:	4b2b      	ldr	r3, [pc, #172]	; (800253c <Load_Setting+0x250>)
 800248e:	695e      	ldr	r6, [r3, #20]
 8002490:	623e      	str	r6, [r7, #32]
 8002492:	4b2a      	ldr	r3, [pc, #168]	; (800253c <Load_Setting+0x250>)
 8002494:	699a      	ldr	r2, [r3, #24]
 8002496:	61fa      	str	r2, [r7, #28]
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <Load_Setting+0x250>)
 800249a:	69d9      	ldr	r1, [r3, #28]
 800249c:	61b9      	str	r1, [r7, #24]
 800249e:	4b27      	ldr	r3, [pc, #156]	; (800253c <Load_Setting+0x250>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	4b25      	ldr	r3, [pc, #148]	; (800253c <Load_Setting+0x250>)
 80024a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80024a8:	6138      	str	r0, [r7, #16]
 80024aa:	4b24      	ldr	r3, [pc, #144]	; (800253c <Load_Setting+0x250>)
 80024ac:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 80024ae:	60fc      	str	r4, [r7, #12]
 80024b0:	4b22      	ldr	r3, [pc, #136]	; (800253c <Load_Setting+0x250>)
 80024b2:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80024b4:	60bd      	str	r5, [r7, #8]
 80024b6:	4b21      	ldr	r3, [pc, #132]	; (800253c <Load_Setting+0x250>)
 80024b8:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80024ba:	607e      	str	r6, [r7, #4]
 80024bc:	4b1f      	ldr	r3, [pc, #124]	; (800253c <Load_Setting+0x250>)
 80024be:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 80024c0:	4b1e      	ldr	r3, [pc, #120]	; (800253c <Load_Setting+0x250>)
 80024c2:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 80024c4:	4b1d      	ldr	r3, [pc, #116]	; (800253c <Load_Setting+0x250>)
 80024c6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80024c8:	4b1c      	ldr	r3, [pc, #112]	; (800253c <Load_Setting+0x250>)
 80024ca:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80024cc:	4b1b      	ldr	r3, [pc, #108]	; (800253c <Load_Setting+0x250>)
 80024ce:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80024d0:	4b1a      	ldr	r3, [pc, #104]	; (800253c <Load_Setting+0x250>)
 80024d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <Load_Setting+0x250>)
 80024d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d8:	9311      	str	r3, [sp, #68]	; 0x44
 80024da:	9210      	str	r2, [sp, #64]	; 0x40
 80024dc:	910f      	str	r1, [sp, #60]	; 0x3c
 80024de:	900e      	str	r0, [sp, #56]	; 0x38
 80024e0:	940d      	str	r4, [sp, #52]	; 0x34
 80024e2:	950c      	str	r5, [sp, #48]	; 0x30
 80024e4:	960b      	str	r6, [sp, #44]	; 0x2c
 80024e6:	687e      	ldr	r6, [r7, #4]
 80024e8:	960a      	str	r6, [sp, #40]	; 0x28
 80024ea:	68bd      	ldr	r5, [r7, #8]
 80024ec:	9509      	str	r5, [sp, #36]	; 0x24
 80024ee:	68fc      	ldr	r4, [r7, #12]
 80024f0:	9408      	str	r4, [sp, #32]
 80024f2:	6938      	ldr	r0, [r7, #16]
 80024f4:	9007      	str	r0, [sp, #28]
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	9306      	str	r3, [sp, #24]
 80024fa:	69b9      	ldr	r1, [r7, #24]
 80024fc:	9105      	str	r1, [sp, #20]
 80024fe:	69fa      	ldr	r2, [r7, #28]
 8002500:	9204      	str	r2, [sp, #16]
 8002502:	6a3e      	ldr	r6, [r7, #32]
 8002504:	9603      	str	r6, [sp, #12]
 8002506:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8002508:	9502      	str	r5, [sp, #8]
 800250a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800250c:	9401      	str	r4, [sp, #4]
 800250e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002510:	9000      	str	r0, [sp, #0]
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002516:	490c      	ldr	r1, [pc, #48]	; (8002548 <Load_Setting+0x25c>)
 8002518:	480c      	ldr	r0, [pc, #48]	; (800254c <Load_Setting+0x260>)
 800251a:	f00e f9b5 	bl	8010888 <siprintf>
	  saved_config[4] ,saved_config[5] ,saved_config[6] ,saved_config[7] ,
	  saved_config[8] ,saved_config[9] ,saved_config[10],saved_config[11],
	  saved_config[12],saved_config[13],saved_config[14],saved_config[15],
	  saved_config[16],saved_config[17],saved_config[18],saved_config[19]);

		sendUart(buffer_out);
 800251e:	480b      	ldr	r0, [pc, #44]	; (800254c <Load_Setting+0x260>)
 8002520:	f7ff f994 	bl	800184c <sendUart>
	  HAL_Delay(500);
 8002524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002528:	f001 fecc 	bl	80042c4 <HAL_Delay>

	return 1;
 800252c:	2301      	movs	r3, #1
}
 800252e:	4618      	mov	r0, r3
 8002530:	3744      	adds	r7, #68	; 0x44
 8002532:	46bd      	mov	sp, r7
 8002534:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002536:	bf00      	nop
 8002538:	20000000 	.word	0x20000000
 800253c:	20000884 	.word	0x20000884
 8002540:	c4c0ffee 	.word	0xc4c0ffee
 8002544:	20000a90 	.word	0x20000a90
 8002548:	080111ac 	.word	0x080111ac
 800254c:	2000100c 	.word	0x2000100c

08002550 <get_num_from_uart>:
			}
			f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
		}
}

int get_num_from_uart(uint8_t _len){
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	int val = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len+1; i++)
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
 8002562:	e006      	b.n	8002572 <get_num_from_uart+0x22>
		buffer_in[i] = 0;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	4a2c      	ldr	r2, [pc, #176]	; (8002618 <get_num_from_uart+0xc8>)
 8002568:	2100      	movs	r1, #0
 800256a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i<_len+1; i++)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	3301      	adds	r3, #1
 8002570:	73fb      	strb	r3, [r7, #15]
 8002572:	79fa      	ldrb	r2, [r7, #7]
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	429a      	cmp	r2, r3
 8002578:	d2f4      	bcs.n	8002564 <get_num_from_uart+0x14>


	HAL_UART_Receive_IT (&huart2, &buffer_in[0], _len);
 800257a:	79fb      	ldrb	r3, [r7, #7]
 800257c:	b29b      	uxth	r3, r3
 800257e:	461a      	mov	r2, r3
 8002580:	4925      	ldr	r1, [pc, #148]	; (8002618 <get_num_from_uart+0xc8>)
 8002582:	4826      	ldr	r0, [pc, #152]	; (800261c <get_num_from_uart+0xcc>)
 8002584:	f008 ff07 	bl	800b396 <HAL_UART_Receive_IT>
	while (buffer_in[0] == 0) {HAL_Delay(1);};
 8002588:	e002      	b.n	8002590 <get_num_from_uart+0x40>
 800258a:	2001      	movs	r0, #1
 800258c:	f001 fe9a 	bl	80042c4 <HAL_Delay>
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <get_num_from_uart+0xc8>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f8      	beq.n	800258a <get_num_from_uart+0x3a>
	HAL_Delay(2); // wait for the rest of the message
 8002598:	2002      	movs	r0, #2
 800259a:	f001 fe93 	bl	80042c4 <HAL_Delay>

	val = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len; i++){
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
 80025a6:	e02a      	b.n	80025fe <get_num_from_uart+0xae>
		if ((buffer_in[i] == 0) || (buffer_in[i] == 10) || (buffer_in[i] == 13)) break;
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <get_num_from_uart+0xc8>)
 80025ac:	5cd3      	ldrb	r3, [r2, r3]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d029      	beq.n	8002606 <get_num_from_uart+0xb6>
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	4a18      	ldr	r2, [pc, #96]	; (8002618 <get_num_from_uart+0xc8>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	2b0a      	cmp	r3, #10
 80025ba:	d024      	beq.n	8002606 <get_num_from_uart+0xb6>
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	4a16      	ldr	r2, [pc, #88]	; (8002618 <get_num_from_uart+0xc8>)
 80025c0:	5cd3      	ldrb	r3, [r2, r3]
 80025c2:	2b0d      	cmp	r3, #13
 80025c4:	d01f      	beq.n	8002606 <get_num_from_uart+0xb6>
		if ((buffer_in[0]>='0') && (buffer_in[0]<='9'))
 80025c6:	4b14      	ldr	r3, [pc, #80]	; (8002618 <get_num_from_uart+0xc8>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b2f      	cmp	r3, #47	; 0x2f
 80025cc:	d913      	bls.n	80025f6 <get_num_from_uart+0xa6>
 80025ce:	4b12      	ldr	r3, [pc, #72]	; (8002618 <get_num_from_uart+0xc8>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b39      	cmp	r3, #57	; 0x39
 80025d4:	d80f      	bhi.n	80025f6 <get_num_from_uart+0xa6>
			val = val*10 + (buffer_in[i]-'0');
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4619      	mov	r1, r3
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	4a0c      	ldr	r2, [pc, #48]	; (8002618 <get_num_from_uart+0xc8>)
 80025e6:	5cd3      	ldrb	r3, [r2, r3]
 80025e8:	3b30      	subs	r3, #48	; 0x30
 80025ea:	440b      	add	r3, r1
 80025ec:	60bb      	str	r3, [r7, #8]
	for (i = 0; i<_len; i++){
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	3301      	adds	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e003      	b.n	80025fe <get_num_from_uart+0xae>
		else{
			val = -1;
 80025f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025fa:	60bb      	str	r3, [r7, #8]
			break;
 80025fc:	e003      	b.n	8002606 <get_num_from_uart+0xb6>
	for (i = 0; i<_len; i++){
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	429a      	cmp	r2, r3
 8002604:	d3d0      	bcc.n	80025a8 <get_num_from_uart+0x58>
		}
	}
	HAL_UART_AbortReceive(&huart2);
 8002606:	4805      	ldr	r0, [pc, #20]	; (800261c <get_num_from_uart+0xcc>)
 8002608:	f008 fef5 	bl	800b3f6 <HAL_UART_AbortReceive>
	return val;
 800260c:	68bb      	ldr	r3, [r7, #8]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	20000c40 	.word	0x20000c40
 800261c:	20000fc4 	.word	0x20000fc4

08002620 <UartConfigDialog>:

uint8_t UartConfigDialog(){
 8002620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002622:	b08b      	sub	sp, #44	; 0x2c
 8002624:	af06      	add	r7, sp, #24

	int val = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]

	uint8_t rtrn = 0;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]

	sendUart("\nConfig mode.\nType number of the pad [1..9], or hit the drum (x - reset to default):\n");
 800262e:	48aa      	ldr	r0, [pc, #680]	; (80028d8 <UartConfigDialog+0x2b8>)
 8002630:	f7ff f90c 	bl	800184c <sendUart>

	buffer_in[0] = 0;
 8002634:	4ba9      	ldr	r3, [pc, #676]	; (80028dc <UartConfigDialog+0x2bc>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &buffer_in[0], 1);
 800263a:	2201      	movs	r2, #1
 800263c:	49a7      	ldr	r1, [pc, #668]	; (80028dc <UartConfigDialog+0x2bc>)
 800263e:	48a8      	ldr	r0, [pc, #672]	; (80028e0 <UartConfigDialog+0x2c0>)
 8002640:	f008 fea9 	bl	800b396 <HAL_UART_Receive_IT>

	uint8_t chnl = 10;
 8002644:	230a      	movs	r3, #10
 8002646:	73bb      	strb	r3, [r7, #14]
	while (chnl == 10){
 8002648:	e050      	b.n	80026ec <UartConfigDialog+0xcc>
		  for (uint8_t ch = 0; ch < NUMBER_OF_CHANNELS; ch++)
 800264a:	2300      	movs	r3, #0
 800264c:	737b      	strb	r3, [r7, #13]
 800264e:	e031      	b.n	80026b4 <UartConfigDialog+0x94>
			  if ((channel[ch].main_rdy)||(channel[ch].aux_rdy)){
 8002650:	7b7a      	ldrb	r2, [r7, #13]
 8002652:	49a4      	ldr	r1, [pc, #656]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	00db      	lsls	r3, r3, #3
 800265c:	440b      	add	r3, r1
 800265e:	3311      	adds	r3, #17
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d10a      	bne.n	800267c <UartConfigDialog+0x5c>
 8002666:	7b7a      	ldrb	r2, [r7, #13]
 8002668:	499e      	ldr	r1, [pc, #632]	; (80028e4 <UartConfigDialog+0x2c4>)
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	440b      	add	r3, r1
 8002674:	3324      	adds	r3, #36	; 0x24
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d018      	beq.n	80026ae <UartConfigDialog+0x8e>
				  channel[ch].main_rdy = 0;
 800267c:	7b7a      	ldrb	r2, [r7, #13]
 800267e:	4999      	ldr	r1, [pc, #612]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	440b      	add	r3, r1
 800268a:	3311      	adds	r3, #17
 800268c:	2200      	movs	r2, #0
 800268e:	701a      	strb	r2, [r3, #0]
				  channel[ch].aux_rdy = 0;
 8002690:	7b7a      	ldrb	r2, [r7, #13]
 8002692:	4994      	ldr	r1, [pc, #592]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002694:	4613      	mov	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	4413      	add	r3, r2
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	440b      	add	r3, r1
 800269e:	3324      	adds	r3, #36	; 0x24
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
				  chnl = ch;
 80026a4:	7b7b      	ldrb	r3, [r7, #13]
 80026a6:	73bb      	strb	r3, [r7, #14]
				  HAL_UART_AbortReceive(&huart2);
 80026a8:	488d      	ldr	r0, [pc, #564]	; (80028e0 <UartConfigDialog+0x2c0>)
 80026aa:	f008 fea4 	bl	800b3f6 <HAL_UART_AbortReceive>
		  for (uint8_t ch = 0; ch < NUMBER_OF_CHANNELS; ch++)
 80026ae:	7b7b      	ldrb	r3, [r7, #13]
 80026b0:	3301      	adds	r3, #1
 80026b2:	737b      	strb	r3, [r7, #13]
 80026b4:	7b7b      	ldrb	r3, [r7, #13]
 80026b6:	2b05      	cmp	r3, #5
 80026b8:	d9ca      	bls.n	8002650 <UartConfigDialog+0x30>
			  }
		  if (buffer_in[0]>0){
 80026ba:	4b88      	ldr	r3, [pc, #544]	; (80028dc <UartConfigDialog+0x2bc>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d014      	beq.n	80026ec <UartConfigDialog+0xcc>
			  if ((buffer_in[0]>='1') && (buffer_in[0]<='9'))
 80026c2:	4b86      	ldr	r3, [pc, #536]	; (80028dc <UartConfigDialog+0x2bc>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b30      	cmp	r3, #48	; 0x30
 80026c8:	d908      	bls.n	80026dc <UartConfigDialog+0xbc>
 80026ca:	4b84      	ldr	r3, [pc, #528]	; (80028dc <UartConfigDialog+0x2bc>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b39      	cmp	r3, #57	; 0x39
 80026d0:	d804      	bhi.n	80026dc <UartConfigDialog+0xbc>
				  chnl = buffer_in[0]-'1';
 80026d2:	4b82      	ldr	r3, [pc, #520]	; (80028dc <UartConfigDialog+0x2bc>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	3b31      	subs	r3, #49	; 0x31
 80026d8:	73bb      	strb	r3, [r7, #14]
 80026da:	e001      	b.n	80026e0 <UartConfigDialog+0xc0>
			  else
				  chnl = 255;
 80026dc:	23ff      	movs	r3, #255	; 0xff
 80026de:	73bb      	strb	r3, [r7, #14]

			  if (buffer_in[0]=='x')
 80026e0:	4b7e      	ldr	r3, [pc, #504]	; (80028dc <UartConfigDialog+0x2bc>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b78      	cmp	r3, #120	; 0x78
 80026e6:	d101      	bne.n	80026ec <UartConfigDialog+0xcc>
				  // reset to default
				  return 99;
 80026e8:	2363      	movs	r3, #99	; 0x63
 80026ea:	e2ef      	b.n	8002ccc <UartConfigDialog+0x6ac>
	while (chnl == 10){
 80026ec:	7bbb      	ldrb	r3, [r7, #14]
 80026ee:	2b0a      	cmp	r3, #10
 80026f0:	d0ab      	beq.n	800264a <UartConfigDialog+0x2a>
		  }
	}

	if (chnl == 255) {
 80026f2:	7bbb      	ldrb	r3, [r7, #14]
 80026f4:	2bff      	cmp	r3, #255	; 0xff
 80026f6:	d10f      	bne.n	8002718 <UartConfigDialog+0xf8>
		HAL_UART_AbortReceive(&huart2);
 80026f8:	4879      	ldr	r0, [pc, #484]	; (80028e0 <UartConfigDialog+0x2c0>)
 80026fa:	f008 fe7c 	bl	800b3f6 <HAL_UART_AbortReceive>
		sendUart("Ciao\n");
 80026fe:	487a      	ldr	r0, [pc, #488]	; (80028e8 <UartConfigDialog+0x2c8>)
 8002700:	f7ff f8a4 	bl	800184c <sendUart>
		config_Mode[0] = 0;
 8002704:	4b79      	ldr	r3, [pc, #484]	; (80028ec <UartConfigDialog+0x2cc>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT (&huart2, &config_Mode[0], 1);
 800270a:	2201      	movs	r2, #1
 800270c:	4977      	ldr	r1, [pc, #476]	; (80028ec <UartConfigDialog+0x2cc>)
 800270e:	4874      	ldr	r0, [pc, #464]	; (80028e0 <UartConfigDialog+0x2c0>)
 8002710:	f008 fe41 	bl	800b396 <HAL_UART_Receive_IT>
		return 0;
 8002714:	2300      	movs	r3, #0
 8002716:	e2d9      	b.n	8002ccc <UartConfigDialog+0x6ac>
	}

	// got the correct channel.
	// print current values
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002718:	7bbb      	ldrb	r3, [r7, #14]
 800271a:	1c59      	adds	r1, r3, #1
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 800271c:	7bba      	ldrb	r2, [r7, #14]
 800271e:	4871      	ldr	r0, [pc, #452]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002720:	4613      	mov	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	4413      	add	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4403      	add	r3, r0
 800272a:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 800272c:	469c      	mov	ip, r3
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 800272e:	7bba      	ldrb	r2, [r7, #14]
 8002730:	486c      	ldr	r0, [pc, #432]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002732:	4613      	mov	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	4413      	add	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4403      	add	r3, r0
 800273c:	3302      	adds	r3, #2
 800273e:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002740:	461c      	mov	r4, r3
			chnl+1, channel[chnl].main_voice, channel[chnl].aux_voice, channel[chnl].alt_voice,
 8002742:	7bba      	ldrb	r2, [r7, #14]
 8002744:	4867      	ldr	r0, [pc, #412]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002746:	4613      	mov	r3, r2
 8002748:	00db      	lsls	r3, r3, #3
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4403      	add	r3, r0
 8002750:	3301      	adds	r3, #1
 8002752:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002754:	461d      	mov	r5, r3
			(int)channel[chnl].peak_min_length, (int)channel[chnl].peak_max_length,
 8002756:	7bba      	ldrb	r2, [r7, #14]
 8002758:	4862      	ldr	r0, [pc, #392]	; (80028e4 <UartConfigDialog+0x2c4>)
 800275a:	4613      	mov	r3, r2
 800275c:	00db      	lsls	r3, r3, #3
 800275e:	4413      	add	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4403      	add	r3, r0
 8002764:	330a      	adds	r3, #10
 8002766:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002768:	461e      	mov	r6, r3
			(int)channel[chnl].peak_min_length, (int)channel[chnl].peak_max_length,
 800276a:	7bba      	ldrb	r2, [r7, #14]
 800276c:	485d      	ldr	r0, [pc, #372]	; (80028e4 <UartConfigDialog+0x2c4>)
 800276e:	4613      	mov	r3, r2
 8002770:	00db      	lsls	r3, r3, #3
 8002772:	4413      	add	r3, r2
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4403      	add	r3, r0
 8002778:	3308      	adds	r3, #8
 800277a:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 800277c:	607b      	str	r3, [r7, #4]
			channel[chnl].aux_type, (int)channel[chnl].peak_volume_norm);
 800277e:	7bba      	ldrb	r2, [r7, #14]
 8002780:	4858      	ldr	r0, [pc, #352]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002782:	4613      	mov	r3, r2
 8002784:	00db      	lsls	r3, r3, #3
 8002786:	4413      	add	r3, r2
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	4403      	add	r3, r0
 800278c:	3304      	adds	r3, #4
 800278e:	781b      	ldrb	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 8002790:	603b      	str	r3, [r7, #0]
			channel[chnl].aux_type, (int)channel[chnl].peak_volume_norm);
 8002792:	7bba      	ldrb	r2, [r7, #14]
 8002794:	4853      	ldr	r0, [pc, #332]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002796:	4613      	mov	r3, r2
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4413      	add	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4403      	add	r3, r0
 80027a0:	3306      	adds	r3, #6
 80027a2:	881b      	ldrh	r3, [r3, #0]
	sprintf(buffer_out, "Current values CH#%d:\n\tVoices: main %d, aux %d, alt %d\n\tTimings: peak min %d max %d\n\tChannel type: %d,volume norm %d\n",
 80027a4:	9305      	str	r3, [sp, #20]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	9204      	str	r2, [sp, #16]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	9303      	str	r3, [sp, #12]
 80027ae:	9602      	str	r6, [sp, #8]
 80027b0:	9501      	str	r5, [sp, #4]
 80027b2:	9400      	str	r4, [sp, #0]
 80027b4:	4663      	mov	r3, ip
 80027b6:	460a      	mov	r2, r1
 80027b8:	494d      	ldr	r1, [pc, #308]	; (80028f0 <UartConfigDialog+0x2d0>)
 80027ba:	484e      	ldr	r0, [pc, #312]	; (80028f4 <UartConfigDialog+0x2d4>)
 80027bc:	f00e f864 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 80027c0:	484c      	ldr	r0, [pc, #304]	; (80028f4 <UartConfigDialog+0x2d4>)
 80027c2:	f7ff f843 	bl	800184c <sendUart>
	HAL_Delay(200);
 80027c6:	20c8      	movs	r0, #200	; 0xc8
 80027c8:	f001 fd7c 	bl	80042c4 <HAL_Delay>

	// Starting to change the values
	// main voicepeak_volume_norm
	sprintf(buffer_out, "\nCH#%d Change main voice from %d:\t",chnl+1, channel[chnl].main_voice);
 80027cc:	7bbb      	ldrb	r3, [r7, #14]
 80027ce:	1c59      	adds	r1, r3, #1
 80027d0:	7bba      	ldrb	r2, [r7, #14]
 80027d2:	4844      	ldr	r0, [pc, #272]	; (80028e4 <UartConfigDialog+0x2c4>)
 80027d4:	4613      	mov	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4413      	add	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	4403      	add	r3, r0
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	460a      	mov	r2, r1
 80027e2:	4945      	ldr	r1, [pc, #276]	; (80028f8 <UartConfigDialog+0x2d8>)
 80027e4:	4843      	ldr	r0, [pc, #268]	; (80028f4 <UartConfigDialog+0x2d4>)
 80027e6:	f00e f84f 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 80027ea:	4842      	ldr	r0, [pc, #264]	; (80028f4 <UartConfigDialog+0x2d4>)
 80027ec:	f7ff f82e 	bl	800184c <sendUart>
	HAL_Delay(200);
 80027f0:	20c8      	movs	r0, #200	; 0xc8
 80027f2:	f001 fd67 	bl	80042c4 <HAL_Delay>

	 val = get_num_from_uart(2);
 80027f6:	2002      	movs	r0, #2
 80027f8:	f7ff feaa 	bl	8002550 <get_num_from_uart>
 80027fc:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2b19      	cmp	r3, #25
 8002802:	dd1b      	ble.n	800283c <UartConfigDialog+0x21c>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b59      	cmp	r3, #89	; 0x59
 8002808:	dc18      	bgt.n	800283c <UartConfigDialog+0x21c>
		channel[chnl].main_voice = val & 0xFF;
 800280a:	7bba      	ldrb	r2, [r7, #14]
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	b2d8      	uxtb	r0, r3
 8002810:	4934      	ldr	r1, [pc, #208]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	4602      	mov	r2, r0
 800281e:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New main voice: %d\n", channel[chnl].main_voice);
 8002820:	7bba      	ldrb	r2, [r7, #14]
 8002822:	4930      	ldr	r1, [pc, #192]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002824:	4613      	mov	r3, r2
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	4413      	add	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	440b      	add	r3, r1
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4932      	ldr	r1, [pc, #200]	; (80028fc <UartConfigDialog+0x2dc>)
 8002834:	482f      	ldr	r0, [pc, #188]	; (80028f4 <UartConfigDialog+0x2d4>)
 8002836:	f00e f827 	bl	8010888 <siprintf>
 800283a:	e00c      	b.n	8002856 <UartConfigDialog+0x236>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].main_voice);
 800283c:	7bba      	ldrb	r2, [r7, #14]
 800283e:	4929      	ldr	r1, [pc, #164]	; (80028e4 <UartConfigDialog+0x2c4>)
 8002840:	4613      	mov	r3, r2
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	4413      	add	r3, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	440b      	add	r3, r1
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	461a      	mov	r2, r3
 800284e:	492c      	ldr	r1, [pc, #176]	; (8002900 <UartConfigDialog+0x2e0>)
 8002850:	4828      	ldr	r0, [pc, #160]	; (80028f4 <UartConfigDialog+0x2d4>)
 8002852:	f00e f819 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 8002856:	4827      	ldr	r0, [pc, #156]	; (80028f4 <UartConfigDialog+0x2d4>)
 8002858:	f7fe fff8 	bl	800184c <sendUart>
	HAL_Delay(200);
 800285c:	20c8      	movs	r0, #200	; 0xc8
 800285e:	f001 fd31 	bl	80042c4 <HAL_Delay>

	// aux voice
	sprintf(buffer_out, "\nCH#%d Change aux input voice from %d:\t",chnl+1, channel[chnl].aux_voice);
 8002862:	7bbb      	ldrb	r3, [r7, #14]
 8002864:	1c59      	adds	r1, r3, #1
 8002866:	7bba      	ldrb	r2, [r7, #14]
 8002868:	481e      	ldr	r0, [pc, #120]	; (80028e4 <UartConfigDialog+0x2c4>)
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4413      	add	r3, r2
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	4403      	add	r3, r0
 8002874:	3302      	adds	r3, #2
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	460a      	mov	r2, r1
 800287a:	4922      	ldr	r1, [pc, #136]	; (8002904 <UartConfigDialog+0x2e4>)
 800287c:	481d      	ldr	r0, [pc, #116]	; (80028f4 <UartConfigDialog+0x2d4>)
 800287e:	f00e f803 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 8002882:	481c      	ldr	r0, [pc, #112]	; (80028f4 <UartConfigDialog+0x2d4>)
 8002884:	f7fe ffe2 	bl	800184c <sendUart>
	HAL_Delay(200);
 8002888:	20c8      	movs	r0, #200	; 0xc8
 800288a:	f001 fd1b 	bl	80042c4 <HAL_Delay>

	 val = get_num_from_uart(2);
 800288e:	2002      	movs	r0, #2
 8002890:	f7ff fe5e 	bl	8002550 <get_num_from_uart>
 8002894:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b19      	cmp	r3, #25
 800289a:	dd37      	ble.n	800290c <UartConfigDialog+0x2ec>
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b59      	cmp	r3, #89	; 0x59
 80028a0:	dc34      	bgt.n	800290c <UartConfigDialog+0x2ec>
		channel[chnl].aux_voice = val & 0xFF;
 80028a2:	7bba      	ldrb	r2, [r7, #14]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	b2d8      	uxtb	r0, r3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <UartConfigDialog+0x2c4>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	440b      	add	r3, r1
 80028b4:	3302      	adds	r3, #2
 80028b6:	4602      	mov	r2, r0
 80028b8:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New aux voice: %d\n", channel[chnl].aux_voice);
 80028ba:	7bba      	ldrb	r2, [r7, #14]
 80028bc:	4909      	ldr	r1, [pc, #36]	; (80028e4 <UartConfigDialog+0x2c4>)
 80028be:	4613      	mov	r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3302      	adds	r3, #2
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	490e      	ldr	r1, [pc, #56]	; (8002908 <UartConfigDialog+0x2e8>)
 80028d0:	4808      	ldr	r0, [pc, #32]	; (80028f4 <UartConfigDialog+0x2d4>)
 80028d2:	f00d ffd9 	bl	8010888 <siprintf>
 80028d6:	e027      	b.n	8002928 <UartConfigDialog+0x308>
 80028d8:	080112b8 	.word	0x080112b8
 80028dc:	20000c40 	.word	0x20000c40
 80028e0:	20000fc4 	.word	0x20000fc4
 80028e4:	20000a90 	.word	0x20000a90
 80028e8:	08011310 	.word	0x08011310
 80028ec:	20000418 	.word	0x20000418
 80028f0:	08011318 	.word	0x08011318
 80028f4:	2000100c 	.word	0x2000100c
 80028f8:	08011390 	.word	0x08011390
 80028fc:	080113b4 	.word	0x080113b4
 8002900:	080113c8 	.word	0x080113c8
 8002904:	080113e4 	.word	0x080113e4
 8002908:	0801140c 	.word	0x0801140c
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].aux_voice);
 800290c:	7bba      	ldrb	r2, [r7, #14]
 800290e:	49ae      	ldr	r1, [pc, #696]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002910:	4613      	mov	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	3302      	adds	r3, #2
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	49aa      	ldr	r1, [pc, #680]	; (8002bcc <UartConfigDialog+0x5ac>)
 8002922:	48ab      	ldr	r0, [pc, #684]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002924:	f00d ffb0 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 8002928:	48a9      	ldr	r0, [pc, #676]	; (8002bd0 <UartConfigDialog+0x5b0>)
 800292a:	f7fe ff8f 	bl	800184c <sendUart>
	HAL_Delay(200);
 800292e:	20c8      	movs	r0, #200	; 0xc8
 8002930:	f001 fcc8 	bl	80042c4 <HAL_Delay>

	// main alt voice
	sprintf(buffer_out, "\nCH#%d Change main alt voice (when pedal pressed) from %d:\t",chnl+1, channel[chnl].alt_voice);
 8002934:	7bbb      	ldrb	r3, [r7, #14]
 8002936:	1c59      	adds	r1, r3, #1
 8002938:	7bba      	ldrb	r2, [r7, #14]
 800293a:	48a3      	ldr	r0, [pc, #652]	; (8002bc8 <UartConfigDialog+0x5a8>)
 800293c:	4613      	mov	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4403      	add	r3, r0
 8002946:	3301      	adds	r3, #1
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	460a      	mov	r2, r1
 800294c:	49a1      	ldr	r1, [pc, #644]	; (8002bd4 <UartConfigDialog+0x5b4>)
 800294e:	48a0      	ldr	r0, [pc, #640]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002950:	f00d ff9a 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 8002954:	489e      	ldr	r0, [pc, #632]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002956:	f7fe ff79 	bl	800184c <sendUart>
	HAL_Delay(200);
 800295a:	20c8      	movs	r0, #200	; 0xc8
 800295c:	f001 fcb2 	bl	80042c4 <HAL_Delay>

	 val = get_num_from_uart(2);
 8002960:	2002      	movs	r0, #2
 8002962:	f7ff fdf5 	bl	8002550 <get_num_from_uart>
 8002966:	60b8      	str	r0, [r7, #8]
	if ((val>25)&&(val<90)){
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b19      	cmp	r3, #25
 800296c:	dd1d      	ble.n	80029aa <UartConfigDialog+0x38a>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b59      	cmp	r3, #89	; 0x59
 8002972:	dc1a      	bgt.n	80029aa <UartConfigDialog+0x38a>
		channel[chnl].alt_voice = val & 0xFF;
 8002974:	7bba      	ldrb	r2, [r7, #14]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	b2d8      	uxtb	r0, r3
 800297a:	4993      	ldr	r1, [pc, #588]	; (8002bc8 <UartConfigDialog+0x5a8>)
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	440b      	add	r3, r1
 8002986:	3301      	adds	r3, #1
 8002988:	4602      	mov	r2, r0
 800298a:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New alt voice: %d\n", channel[chnl].alt_voice);
 800298c:	7bba      	ldrb	r2, [r7, #14]
 800298e:	498e      	ldr	r1, [pc, #568]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002990:	4613      	mov	r3, r2
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4413      	add	r3, r2
 8002996:	00db      	lsls	r3, r3, #3
 8002998:	440b      	add	r3, r1
 800299a:	3301      	adds	r3, #1
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	461a      	mov	r2, r3
 80029a0:	498d      	ldr	r1, [pc, #564]	; (8002bd8 <UartConfigDialog+0x5b8>)
 80029a2:	488b      	ldr	r0, [pc, #556]	; (8002bd0 <UartConfigDialog+0x5b0>)
 80029a4:	f00d ff70 	bl	8010888 <siprintf>
 80029a8:	e00d      	b.n	80029c6 <UartConfigDialog+0x3a6>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].alt_voice);
 80029aa:	7bba      	ldrb	r2, [r7, #14]
 80029ac:	4986      	ldr	r1, [pc, #536]	; (8002bc8 <UartConfigDialog+0x5a8>)
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	3301      	adds	r3, #1
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	4983      	ldr	r1, [pc, #524]	; (8002bcc <UartConfigDialog+0x5ac>)
 80029c0:	4883      	ldr	r0, [pc, #524]	; (8002bd0 <UartConfigDialog+0x5b0>)
 80029c2:	f00d ff61 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 80029c6:	4882      	ldr	r0, [pc, #520]	; (8002bd0 <UartConfigDialog+0x5b0>)
 80029c8:	f7fe ff40 	bl	800184c <sendUart>
	HAL_Delay(200);
 80029cc:	20c8      	movs	r0, #200	; 0xc8
 80029ce:	f001 fc79 	bl	80042c4 <HAL_Delay>

	// channel type
	sprintf(buffer_out, "\nCH#%d Change aux type from %d to:\n\tAUX - auto, MAIN - Mesh(0), Mesh with rim(1), or Cymbal(2),\n\t HiHat(3) with pedal, Cymbal with 2 zones(4), Cymabal with mute button(5)\n", chnl+1,  channel[chnl].chnl_type);
 80029d2:	7bbb      	ldrb	r3, [r7, #14]
 80029d4:	1c59      	adds	r1, r3, #1
 80029d6:	7bba      	ldrb	r2, [r7, #14]
 80029d8:	487b      	ldr	r0, [pc, #492]	; (8002bc8 <UartConfigDialog+0x5a8>)
 80029da:	4613      	mov	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4413      	add	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4403      	add	r3, r0
 80029e4:	3303      	adds	r3, #3
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	460a      	mov	r2, r1
 80029ea:	497c      	ldr	r1, [pc, #496]	; (8002bdc <UartConfigDialog+0x5bc>)
 80029ec:	4878      	ldr	r0, [pc, #480]	; (8002bd0 <UartConfigDialog+0x5b0>)
 80029ee:	f00d ff4b 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 80029f2:	4877      	ldr	r0, [pc, #476]	; (8002bd0 <UartConfigDialog+0x5b0>)
 80029f4:	f7fe ff2a 	bl	800184c <sendUart>
	HAL_Delay(200);
 80029f8:	20c8      	movs	r0, #200	; 0xc8
 80029fa:	f001 fc63 	bl	80042c4 <HAL_Delay>

	val = get_num_from_uart(1);
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7ff fda6 	bl	8002550 <get_num_from_uart>
 8002a04:	60b8      	str	r0, [r7, #8]
	if ((val>=0)&&(val<=4)){
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db1d      	blt.n	8002a48 <UartConfigDialog+0x428>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	dc1a      	bgt.n	8002a48 <UartConfigDialog+0x428>
		channel[chnl].chnl_type = val & 0xFF;
 8002a12:	7bba      	ldrb	r2, [r7, #14]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	b2d8      	uxtb	r0, r3
 8002a18:	496b      	ldr	r1, [pc, #428]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	3303      	adds	r3, #3
 8002a26:	4602      	mov	r2, r0
 8002a28:	701a      	strb	r2, [r3, #0]
		sprintf(buffer_out, "New channel type: %d\n", channel[chnl].chnl_type);
 8002a2a:	7bba      	ldrb	r2, [r7, #14]
 8002a2c:	4966      	ldr	r1, [pc, #408]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	3303      	adds	r3, #3
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4968      	ldr	r1, [pc, #416]	; (8002be0 <UartConfigDialog+0x5c0>)
 8002a40:	4863      	ldr	r0, [pc, #396]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002a42:	f00d ff21 	bl	8010888 <siprintf>
 8002a46:	e00d      	b.n	8002a64 <UartConfigDialog+0x444>
	}else
		sprintf(buffer_out, "Keeping the old value: %d\n", channel[chnl].chnl_type);
 8002a48:	7bba      	ldrb	r2, [r7, #14]
 8002a4a:	495f      	ldr	r1, [pc, #380]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	00db      	lsls	r3, r3, #3
 8002a50:	4413      	add	r3, r2
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	440b      	add	r3, r1
 8002a56:	3303      	adds	r3, #3
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	495b      	ldr	r1, [pc, #364]	; (8002bcc <UartConfigDialog+0x5ac>)
 8002a5e:	485c      	ldr	r0, [pc, #368]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002a60:	f00d ff12 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 8002a64:	485a      	ldr	r0, [pc, #360]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002a66:	f7fe fef1 	bl	800184c <sendUart>
	HAL_Delay(200);
 8002a6a:	20c8      	movs	r0, #200	; 0xc8
 8002a6c:	f001 fc2a 	bl	80042c4 <HAL_Delay>

	rtrn = 1;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
	sprintf(buffer_out, "\nAdjust timing? y - yes, n - save settings and exit\n");
 8002a74:	495b      	ldr	r1, [pc, #364]	; (8002be4 <UartConfigDialog+0x5c4>)
 8002a76:	4856      	ldr	r0, [pc, #344]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002a78:	f00d ff06 	bl	8010888 <siprintf>
	sendUart(buffer_out);
 8002a7c:	4854      	ldr	r0, [pc, #336]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002a7e:	f7fe fee5 	bl	800184c <sendUart>
	HAL_Delay(200);
 8002a82:	20c8      	movs	r0, #200	; 0xc8
 8002a84:	f001 fc1e 	bl	80042c4 <HAL_Delay>


	buffer_in[0] = 0;
 8002a88:	4b57      	ldr	r3, [pc, #348]	; (8002be8 <UartConfigDialog+0x5c8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT (&huart2, &buffer_in[0], 1);
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4955      	ldr	r1, [pc, #340]	; (8002be8 <UartConfigDialog+0x5c8>)
 8002a92:	4856      	ldr	r0, [pc, #344]	; (8002bec <UartConfigDialog+0x5cc>)
 8002a94:	f008 fc7f 	bl	800b396 <HAL_UART_Receive_IT>
	while (buffer_in[0] == 0){HAL_Delay(1);}
 8002a98:	e002      	b.n	8002aa0 <UartConfigDialog+0x480>
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f001 fc12 	bl	80042c4 <HAL_Delay>
 8002aa0:	4b51      	ldr	r3, [pc, #324]	; (8002be8 <UartConfigDialog+0x5c8>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f8      	beq.n	8002a9a <UartConfigDialog+0x47a>
	if (buffer_in[0] == 'y'){
 8002aa8:	4b4f      	ldr	r3, [pc, #316]	; (8002be8 <UartConfigDialog+0x5c8>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	2b79      	cmp	r3, #121	; 0x79
 8002aae:	f040 810c 	bne.w	8002cca <UartConfigDialog+0x6aa>

		// Peak threshold
		sprintf(buffer_out, "\nCH#%d Volume norm = %d (default 50, 0..255) (full volume point, 100~4096). New:\t",chnl+1,(int) channel[chnl].peak_volume_norm);
 8002ab2:	7bbb      	ldrb	r3, [r7, #14]
 8002ab4:	1c59      	adds	r1, r3, #1
 8002ab6:	7bba      	ldrb	r2, [r7, #14]
 8002ab8:	4843      	ldr	r0, [pc, #268]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	4403      	add	r3, r0
 8002ac4:	3306      	adds	r3, #6
 8002ac6:	881b      	ldrh	r3, [r3, #0]
 8002ac8:	460a      	mov	r2, r1
 8002aca:	4949      	ldr	r1, [pc, #292]	; (8002bf0 <UartConfigDialog+0x5d0>)
 8002acc:	4840      	ldr	r0, [pc, #256]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002ace:	f00d fedb 	bl	8010888 <siprintf>
		sendUart(buffer_out);
 8002ad2:	483f      	ldr	r0, [pc, #252]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002ad4:	f7fe feba 	bl	800184c <sendUart>
		HAL_Delay(200);
 8002ad8:	20c8      	movs	r0, #200	; 0xc8
 8002ada:	f001 fbf3 	bl	80042c4 <HAL_Delay>

		val = get_num_from_uart(3);
 8002ade:	2003      	movs	r0, #3
 8002ae0:	f7ff fd36 	bl	8002550 <get_num_from_uart>
 8002ae4:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<256)){
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	dd1d      	ble.n	8002b28 <UartConfigDialog+0x508>
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2bff      	cmp	r3, #255	; 0xff
 8002af0:	dc1a      	bgt.n	8002b28 <UartConfigDialog+0x508>
			channel[chnl].peak_volume_norm = val;
 8002af2:	7bba      	ldrb	r2, [r7, #14]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	b298      	uxth	r0, r3
 8002af8:	4933      	ldr	r1, [pc, #204]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	440b      	add	r3, r1
 8002b04:	3306      	adds	r3, #6
 8002b06:	4602      	mov	r2, r0
 8002b08:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New threshold = %d\n", (int)channel[chnl].peak_volume_norm);
 8002b0a:	7bba      	ldrb	r2, [r7, #14]
 8002b0c:	492e      	ldr	r1, [pc, #184]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	440b      	add	r3, r1
 8002b18:	3306      	adds	r3, #6
 8002b1a:	881b      	ldrh	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4935      	ldr	r1, [pc, #212]	; (8002bf4 <UartConfigDialog+0x5d4>)
 8002b20:	482b      	ldr	r0, [pc, #172]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002b22:	f00d feb1 	bl	8010888 <siprintf>
 8002b26:	e00d      	b.n	8002b44 <UartConfigDialog+0x524>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_volume_norm);
 8002b28:	7bba      	ldrb	r2, [r7, #14]
 8002b2a:	4927      	ldr	r1, [pc, #156]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3306      	adds	r3, #6
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4923      	ldr	r1, [pc, #140]	; (8002bcc <UartConfigDialog+0x5ac>)
 8002b3e:	4824      	ldr	r0, [pc, #144]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002b40:	f00d fea2 	bl	8010888 <siprintf>
		sendUart(buffer_out);
 8002b44:	4822      	ldr	r0, [pc, #136]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002b46:	f7fe fe81 	bl	800184c <sendUart>
		HAL_Delay(200);
 8002b4a:	20c8      	movs	r0, #200	; 0xc8
 8002b4c:	f001 fbba 	bl	80042c4 <HAL_Delay>

		// min peak len
		sprintf(buffer_out, "\nCH#%d Peak min length = %d (default mesh 15, cymbal 4, 1..99) [x0.1ms]. New:\t",chnl+1,(int) channel[chnl].peak_min_length);
 8002b50:	7bbb      	ldrb	r3, [r7, #14]
 8002b52:	1c59      	adds	r1, r3, #1
 8002b54:	7bba      	ldrb	r2, [r7, #14]
 8002b56:	481c      	ldr	r0, [pc, #112]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4403      	add	r3, r0
 8002b62:	330a      	adds	r3, #10
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	460a      	mov	r2, r1
 8002b68:	4923      	ldr	r1, [pc, #140]	; (8002bf8 <UartConfigDialog+0x5d8>)
 8002b6a:	4819      	ldr	r0, [pc, #100]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002b6c:	f00d fe8c 	bl	8010888 <siprintf>
		sendUart(buffer_out);
 8002b70:	4817      	ldr	r0, [pc, #92]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002b72:	f7fe fe6b 	bl	800184c <sendUart>
		HAL_Delay(200);
 8002b76:	20c8      	movs	r0, #200	; 0xc8
 8002b78:	f001 fba4 	bl	80042c4 <HAL_Delay>

		val = get_num_from_uart(2);
 8002b7c:	2002      	movs	r0, #2
 8002b7e:	f7ff fce7 	bl	8002550 <get_num_from_uart>
 8002b82:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<100)){
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	dd3a      	ble.n	8002c00 <UartConfigDialog+0x5e0>
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b63      	cmp	r3, #99	; 0x63
 8002b8e:	dc37      	bgt.n	8002c00 <UartConfigDialog+0x5e0>
			channel[chnl].peak_min_length = val;
 8002b90:	7bba      	ldrb	r2, [r7, #14]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	b298      	uxth	r0, r3
 8002b96:	490c      	ldr	r1, [pc, #48]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	00db      	lsls	r3, r3, #3
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	440b      	add	r3, r1
 8002ba2:	330a      	adds	r3, #10
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New min length = %d\n", (int)channel[chnl].peak_min_length);
 8002ba8:	7bba      	ldrb	r2, [r7, #14]
 8002baa:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <UartConfigDialog+0x5a8>)
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	330a      	adds	r3, #10
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	490f      	ldr	r1, [pc, #60]	; (8002bfc <UartConfigDialog+0x5dc>)
 8002bbe:	4804      	ldr	r0, [pc, #16]	; (8002bd0 <UartConfigDialog+0x5b0>)
 8002bc0:	f00d fe62 	bl	8010888 <siprintf>
 8002bc4:	e02a      	b.n	8002c1c <UartConfigDialog+0x5fc>
 8002bc6:	bf00      	nop
 8002bc8:	20000a90 	.word	0x20000a90
 8002bcc:	080113c8 	.word	0x080113c8
 8002bd0:	2000100c 	.word	0x2000100c
 8002bd4:	08011420 	.word	0x08011420
 8002bd8:	0801145c 	.word	0x0801145c
 8002bdc:	08011470 	.word	0x08011470
 8002be0:	0801151c 	.word	0x0801151c
 8002be4:	08011534 	.word	0x08011534
 8002be8:	20000c40 	.word	0x20000c40
 8002bec:	20000fc4 	.word	0x20000fc4
 8002bf0:	0801156c 	.word	0x0801156c
 8002bf4:	080115c0 	.word	0x080115c0
 8002bf8:	080115d4 	.word	0x080115d4
 8002bfc:	08011624 	.word	0x08011624
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_min_length);
 8002c00:	7bba      	ldrb	r2, [r7, #14]
 8002c02:	4934      	ldr	r1, [pc, #208]	; (8002cd4 <UartConfigDialog+0x6b4>)
 8002c04:	4613      	mov	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	330a      	adds	r3, #10
 8002c10:	881b      	ldrh	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4930      	ldr	r1, [pc, #192]	; (8002cd8 <UartConfigDialog+0x6b8>)
 8002c16:	4831      	ldr	r0, [pc, #196]	; (8002cdc <UartConfigDialog+0x6bc>)
 8002c18:	f00d fe36 	bl	8010888 <siprintf>
		sendUart(buffer_out);
 8002c1c:	482f      	ldr	r0, [pc, #188]	; (8002cdc <UartConfigDialog+0x6bc>)
 8002c1e:	f7fe fe15 	bl	800184c <sendUart>
		HAL_Delay(200);
 8002c22:	20c8      	movs	r0, #200	; 0xc8
 8002c24:	f001 fb4e 	bl	80042c4 <HAL_Delay>

		// max peak len
		sprintf(buffer_out, "\nCH#%d Peak max length = %d (default 200, 1..255) [x0.1ms]. New:\t",chnl+1, (int)channel[chnl].peak_max_length);
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	1c59      	adds	r1, r3, #1
 8002c2c:	7bba      	ldrb	r2, [r7, #14]
 8002c2e:	4829      	ldr	r0, [pc, #164]	; (8002cd4 <UartConfigDialog+0x6b4>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4403      	add	r3, r0
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	881b      	ldrh	r3, [r3, #0]
 8002c3e:	460a      	mov	r2, r1
 8002c40:	4927      	ldr	r1, [pc, #156]	; (8002ce0 <UartConfigDialog+0x6c0>)
 8002c42:	4826      	ldr	r0, [pc, #152]	; (8002cdc <UartConfigDialog+0x6bc>)
 8002c44:	f00d fe20 	bl	8010888 <siprintf>
		sendUart(buffer_out);
 8002c48:	4824      	ldr	r0, [pc, #144]	; (8002cdc <UartConfigDialog+0x6bc>)
 8002c4a:	f7fe fdff 	bl	800184c <sendUart>
		HAL_Delay(200);
 8002c4e:	20c8      	movs	r0, #200	; 0xc8
 8002c50:	f001 fb38 	bl	80042c4 <HAL_Delay>

		val = get_num_from_uart(3);
 8002c54:	2003      	movs	r0, #3
 8002c56:	f7ff fc7b 	bl	8002550 <get_num_from_uart>
 8002c5a:	60b8      	str	r0, [r7, #8]
		if ((val>0)&&(val<256)){
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	dd1d      	ble.n	8002c9e <UartConfigDialog+0x67e>
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	2bff      	cmp	r3, #255	; 0xff
 8002c66:	dc1a      	bgt.n	8002c9e <UartConfigDialog+0x67e>
			channel[chnl].peak_max_length = val;
 8002c68:	7bba      	ldrb	r2, [r7, #14]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	b298      	uxth	r0, r3
 8002c6e:	4919      	ldr	r1, [pc, #100]	; (8002cd4 <UartConfigDialog+0x6b4>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	440b      	add	r3, r1
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	801a      	strh	r2, [r3, #0]
			sprintf(buffer_out, "New max length = %d\n", (int)channel[chnl].peak_max_length);
 8002c80:	7bba      	ldrb	r2, [r7, #14]
 8002c82:	4914      	ldr	r1, [pc, #80]	; (8002cd4 <UartConfigDialog+0x6b4>)
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3308      	adds	r3, #8
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	4913      	ldr	r1, [pc, #76]	; (8002ce4 <UartConfigDialog+0x6c4>)
 8002c96:	4811      	ldr	r0, [pc, #68]	; (8002cdc <UartConfigDialog+0x6bc>)
 8002c98:	f00d fdf6 	bl	8010888 <siprintf>
 8002c9c:	e00d      	b.n	8002cba <UartConfigDialog+0x69a>
		}else
			sprintf(buffer_out, "Keeping the old value: %d\n", (int)channel[chnl].peak_max_length);
 8002c9e:	7bba      	ldrb	r2, [r7, #14]
 8002ca0:	490c      	ldr	r1, [pc, #48]	; (8002cd4 <UartConfigDialog+0x6b4>)
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	4413      	add	r3, r2
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	440b      	add	r3, r1
 8002cac:	3308      	adds	r3, #8
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	4909      	ldr	r1, [pc, #36]	; (8002cd8 <UartConfigDialog+0x6b8>)
 8002cb4:	4809      	ldr	r0, [pc, #36]	; (8002cdc <UartConfigDialog+0x6bc>)
 8002cb6:	f00d fde7 	bl	8010888 <siprintf>
		sendUart(buffer_out);
 8002cba:	4808      	ldr	r0, [pc, #32]	; (8002cdc <UartConfigDialog+0x6bc>)
 8002cbc:	f7fe fdc6 	bl	800184c <sendUart>
		HAL_Delay(200);
 8002cc0:	20c8      	movs	r0, #200	; 0xc8
 8002cc2:	f001 faff 	bl	80042c4 <HAL_Delay>
		rtrn = 2;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	73fb      	strb	r3, [r7, #15]
	}
	return rtrn;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3714      	adds	r7, #20
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd4:	20000a90 	.word	0x20000a90
 8002cd8:	080113c8 	.word	0x080113c8
 8002cdc:	2000100c 	.word	0x2000100c
 8002ce0:	0801163c 	.word	0x0801163c
 8002ce4:	08011680 	.word	0x08011680

08002ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cec:	b672      	cpsid	i
}
 8002cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cf0:	e7fe      	b.n	8002cf0 <Error_Handler+0x8>
	...

08002cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a0f      	ldr	r2, [pc, #60]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	603b      	str	r3, [r7, #0]
 8002d1a:	4b09      	ldr	r3, [pc, #36]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4a08      	ldr	r2, [pc, #32]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d24:	6413      	str	r3, [r2, #64]	; 0x40
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_MspInit+0x4c>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40023800 	.word	0x40023800

08002d44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	; 0x30
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d4c:	f107 031c 	add.w	r3, r7, #28
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	609a      	str	r2, [r3, #8]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <HAL_ADC_MspInit+0x154>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	f040 8093 	bne.w	8002e8e <HAL_ADC_MspInit+0x14a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d68:	2300      	movs	r3, #0
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d70:	4a4a      	ldr	r2, [pc, #296]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d76:	6453      	str	r3, [r2, #68]	; 0x44
 8002d78:	4b48      	ldr	r3, [pc, #288]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d80:	61bb      	str	r3, [r7, #24]
 8002d82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a43      	ldr	r2, [pc, #268]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002d8e:	f043 0304 	orr.w	r3, r3, #4
 8002d92:	6313      	str	r3, [r2, #48]	; 0x30
 8002d94:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0304 	and.w	r3, r3, #4
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	4a3c      	ldr	r2, [pc, #240]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002daa:	f043 0301 	orr.w	r3, r3, #1
 8002dae:	6313      	str	r3, [r2, #48]	; 0x30
 8002db0:	4b3a      	ldr	r3, [pc, #232]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	4a35      	ldr	r2, [pc, #212]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002dc6:	f043 0302 	orr.w	r3, r3, #2
 8002dca:	6313      	str	r3, [r2, #48]	; 0x30
 8002dcc:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <HAL_ADC_MspInit+0x158>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002dd8:	233a      	movs	r3, #58	; 0x3a
 8002dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de4:	f107 031c 	add.w	r3, r7, #28
 8002de8:	4619      	mov	r1, r3
 8002dea:	482d      	ldr	r0, [pc, #180]	; (8002ea0 <HAL_ADC_MspInit+0x15c>)
 8002dec:	f003 f888 	bl	8005f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002df0:	2302      	movs	r3, #2
 8002df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002df4:	2303      	movs	r3, #3
 8002df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfc:	f107 031c 	add.w	r3, r7, #28
 8002e00:	4619      	mov	r1, r3
 8002e02:	4828      	ldr	r0, [pc, #160]	; (8002ea4 <HAL_ADC_MspInit+0x160>)
 8002e04:	f003 f87c 	bl	8005f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e14:	f107 031c 	add.w	r3, r7, #28
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4823      	ldr	r0, [pc, #140]	; (8002ea8 <HAL_ADC_MspInit+0x164>)
 8002e1c:	f003 f870 	bl	8005f00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e20:	4b22      	ldr	r3, [pc, #136]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e22:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <HAL_ADC_MspInit+0x16c>)
 8002e24:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e26:	4b21      	ldr	r3, [pc, #132]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e2c:	4b1f      	ldr	r3, [pc, #124]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e32:	4b1e      	ldr	r3, [pc, #120]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e38:	4b1c      	ldr	r3, [pc, #112]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e3e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e40:	4b1a      	ldr	r3, [pc, #104]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e46:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e48:	4b18      	ldr	r3, [pc, #96]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e4e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002e50:	4b16      	ldr	r3, [pc, #88]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e56:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e5c:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e62:	4812      	ldr	r0, [pc, #72]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e64:	f002 f956 	bl	8005114 <HAL_DMA_Init>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_ADC_MspInit+0x12e>
    {
      Error_Handler();
 8002e6e:	f7ff ff3b 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a0d      	ldr	r2, [pc, #52]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e76:	639a      	str	r2, [r3, #56]	; 0x38
 8002e78:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <HAL_ADC_MspInit+0x168>)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002e7e:	2200      	movs	r2, #0
 8002e80:	2100      	movs	r1, #0
 8002e82:	2012      	movs	r0, #18
 8002e84:	f002 f90f 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002e88:	2012      	movs	r0, #18
 8002e8a:	f002 f928 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e8e:	bf00      	nop
 8002e90:	3730      	adds	r7, #48	; 0x30
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40012000 	.word	0x40012000
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020800 	.word	0x40020800
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	20000a30 	.word	0x20000a30
 8002eb0:	40026410 	.word	0x40026410

08002eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08a      	sub	sp, #40	; 0x28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ebc:	f107 0314 	add.w	r3, r7, #20
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a19      	ldr	r2, [pc, #100]	; (8002f38 <HAL_I2C_MspInit+0x84>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d12b      	bne.n	8002f2e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8002ef2:	23c0      	movs	r3, #192	; 0xc0
 8002ef4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ef6:	2312      	movs	r3, #18
 8002ef8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002efa:	2301      	movs	r3, #1
 8002efc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002efe:	2303      	movs	r3, #3
 8002f00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f02:	2304      	movs	r3, #4
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f06:	f107 0314 	add.w	r3, r7, #20
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	480c      	ldr	r0, [pc, #48]	; (8002f40 <HAL_I2C_MspInit+0x8c>)
 8002f0e:	f002 fff7 	bl	8005f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	4b09      	ldr	r3, [pc, #36]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a08      	ldr	r2, [pc, #32]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <HAL_I2C_MspInit+0x88>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2a:	60fb      	str	r3, [r7, #12]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f2e:	bf00      	nop
 8002f30:	3728      	adds	r7, #40	; 0x28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40005400 	.word	0x40005400
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020400 	.word	0x40020400

08002f44 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b09a      	sub	sp, #104	; 0x68
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f5c:	f107 0318 	add.w	r3, r7, #24
 8002f60:	223c      	movs	r2, #60	; 0x3c
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f00d fc87 	bl	8010878 <memset>
  if(hi2s->Instance==SPI3)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a6d      	ldr	r2, [pc, #436]	; (8003124 <HAL_I2S_MspInit+0x1e0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	f040 80d3 	bne.w	800311c <HAL_I2S_MspInit+0x1d8>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S|RCC_PERIPHCLK_I2S_APB1;
 8002f76:	2381      	movs	r3, #129	; 0x81
 8002f78:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8002f7a:	2332      	movs	r3, #50	; 0x32
 8002f7c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLI2S.PLLI2SM = 4;
 8002f7e:	2304      	movs	r3, #4
 8002f80:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002f82:	2302      	movs	r3, #2
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8002f86:	2302      	movs	r3, #2
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f92:	f107 0318 	add.w	r3, r7, #24
 8002f96:	4618      	mov	r0, r3
 8002f98:	f005 fbce 	bl	8008738 <HAL_RCCEx_PeriphCLKConfig>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_I2S_MspInit+0x62>
    {
      Error_Handler();
 8002fa2:	f7ff fea1 	bl	8002ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	4b5f      	ldr	r3, [pc, #380]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	4a5e      	ldr	r2, [pc, #376]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8002fb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb6:	4b5c      	ldr	r3, [pc, #368]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fbe:	617b      	str	r3, [r7, #20]
 8002fc0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	4b58      	ldr	r3, [pc, #352]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8002fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fca:	4a57      	ldr	r2, [pc, #348]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd2:	4b55      	ldr	r3, [pc, #340]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f003 0301 	and.w	r3, r3, #1
 8002fda:	613b      	str	r3, [r7, #16]
 8002fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	4b51      	ldr	r3, [pc, #324]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	4a50      	ldr	r2, [pc, #320]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8002fe8:	f043 0302 	orr.w	r3, r3, #2
 8002fec:	6313      	str	r3, [r2, #48]	; 0x30
 8002fee:	4b4e      	ldr	r3, [pc, #312]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	4b4a      	ldr	r3, [pc, #296]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8003000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003002:	4a49      	ldr	r2, [pc, #292]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	6313      	str	r3, [r2, #48]	; 0x30
 800300a:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_I2S_MspInit+0x1e4>)
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	f003 0304 	and.w	r3, r3, #4
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
    PB12     ------> I2S3_CK
    PC7     ------> I2S3_MCK
    PB4     ------> I2S3_ext_SD
    PB5     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = CODEC_I2S3_WS_Pin;
 8003016:	2310      	movs	r3, #16
 8003018:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003022:	2300      	movs	r3, #0
 8003024:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003026:	2306      	movs	r3, #6
 8003028:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(CODEC_I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800302a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800302e:	4619      	mov	r1, r3
 8003030:	483e      	ldr	r0, [pc, #248]	; (800312c <HAL_I2S_MspInit+0x1e8>)
 8003032:	f002 ff65 	bl	8005f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_I2S3_SCK_Pin|CODEC_I2S3ext_SD_Pin;
 8003036:	f241 0310 	movw	r3, #4112	; 0x1010
 800303a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303c:	2302      	movs	r3, #2
 800303e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003048:	2307      	movs	r3, #7
 800304a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003050:	4619      	mov	r1, r3
 8003052:	4837      	ldr	r0, [pc, #220]	; (8003130 <HAL_I2S_MspInit+0x1ec>)
 8003054:	f002 ff54 	bl	8005f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_I2S3_MCK_Pin;
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305c:	2302      	movs	r3, #2
 800305e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003064:	2300      	movs	r3, #0
 8003066:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003068:	2306      	movs	r3, #6
 800306a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(CODEC_I2S3_MCK_GPIO_Port, &GPIO_InitStruct);
 800306c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003070:	4619      	mov	r1, r3
 8003072:	4830      	ldr	r0, [pc, #192]	; (8003134 <HAL_I2S_MspInit+0x1f0>)
 8003074:	f002 ff44 	bl	8005f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_I2S3_SD_Pin;
 8003078:	2320      	movs	r3, #32
 800307a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003080:	2300      	movs	r3, #0
 8003082:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003084:	2300      	movs	r3, #0
 8003086:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003088:	2306      	movs	r3, #6
 800308a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(CODEC_I2S3_SD_GPIO_Port, &GPIO_InitStruct);
 800308c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003090:	4619      	mov	r1, r3
 8003092:	4827      	ldr	r0, [pc, #156]	; (8003130 <HAL_I2S_MspInit+0x1ec>)
 8003094:	f002 ff34 	bl	8005f00 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 800309a:	4a28      	ldr	r2, [pc, #160]	; (800313c <HAL_I2S_MspInit+0x1f8>)
 800309c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800309e:	4b26      	ldr	r3, [pc, #152]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030a6:	2240      	movs	r2, #64	; 0x40
 80030a8:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030aa:	4b23      	ldr	r3, [pc, #140]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030b0:	4b21      	ldr	r3, [pc, #132]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b6:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80030b8:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030be:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80030c0:	4b1d      	ldr	r3, [pc, #116]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030c6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ce:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80030d0:	4b19      	ldr	r3, [pc, #100]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80030d6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030da:	2204      	movs	r2, #4
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030e0:	2203      	movs	r2, #3
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80030f0:	4811      	ldr	r0, [pc, #68]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 80030f2:	f002 f80f 	bl	8005114 <HAL_DMA_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2S_MspInit+0x1bc>
    {
      Error_Handler();
 80030fc:	f7ff fdf4 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a0d      	ldr	r2, [pc, #52]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 8003104:	639a      	str	r2, [r3, #56]	; 0x38
 8003106:	4a0c      	ldr	r2, [pc, #48]	; (8003138 <HAL_I2S_MspInit+0x1f4>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800310c:	2200      	movs	r2, #0
 800310e:	2100      	movs	r1, #0
 8003110:	2033      	movs	r0, #51	; 0x33
 8003112:	f001 ffc8 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8003116:	2033      	movs	r0, #51	; 0x33
 8003118:	f001 ffe1 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800311c:	bf00      	nop
 800311e:	3768      	adds	r7, #104	; 0x68
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40003c00 	.word	0x40003c00
 8003128:	40023800 	.word	0x40023800
 800312c:	40020000 	.word	0x40020000
 8003130:	40020400 	.word	0x40020400
 8003134:	40020800 	.word	0x40020800
 8003138:	20000984 	.word	0x20000984
 800313c:	40026088 	.word	0x40026088

08003140 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b09a      	sub	sp, #104	; 0x68
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	223c      	movs	r2, #60	; 0x3c
 800315e:	2100      	movs	r1, #0
 8003160:	4618      	mov	r0, r3
 8003162:	f00d fb89 	bl	8010878 <memset>
  if(hsd->Instance==SDIO)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a70      	ldr	r2, [pc, #448]	; (800332c <HAL_SD_MspInit+0x1ec>)
 800316c:	4293      	cmp	r3, r2
 800316e:	f040 80d9 	bne.w	8003324 <HAL_SD_MspInit+0x1e4>
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8003172:	2360      	movs	r3, #96	; 0x60
 8003174:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003176:	2300      	movs	r3, #0
 8003178:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800317a:	2300      	movs	r3, #0
 800317c:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800317e:	f107 0318 	add.w	r3, r7, #24
 8003182:	4618      	mov	r0, r3
 8003184:	f005 fad8 	bl	8008738 <HAL_RCCEx_PeriphCLKConfig>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 800318e:	f7ff fdab 	bl	8002ce8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
 8003196:	4b66      	ldr	r3, [pc, #408]	; (8003330 <HAL_SD_MspInit+0x1f0>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	4a65      	ldr	r2, [pc, #404]	; (8003330 <HAL_SD_MspInit+0x1f0>)
 800319c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80031a0:	6453      	str	r3, [r2, #68]	; 0x44
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_SD_MspInit+0x1f0>)
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031ae:	2300      	movs	r3, #0
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <HAL_SD_MspInit+0x1f0>)
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	4a5e      	ldr	r2, [pc, #376]	; (8003330 <HAL_SD_MspInit+0x1f0>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	6313      	str	r3, [r2, #48]	; 0x30
 80031be:	4b5c      	ldr	r3, [pc, #368]	; (8003330 <HAL_SD_MspInit+0x1f0>)
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	f003 0304 	and.w	r3, r3, #4
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	4b58      	ldr	r3, [pc, #352]	; (8003330 <HAL_SD_MspInit+0x1f0>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d2:	4a57      	ldr	r2, [pc, #348]	; (8003330 <HAL_SD_MspInit+0x1f0>)
 80031d4:	f043 0308 	orr.w	r3, r3, #8
 80031d8:	6313      	str	r3, [r2, #48]	; 0x30
 80031da:	4b55      	ldr	r3, [pc, #340]	; (8003330 <HAL_SD_MspInit+0x1f0>)
 80031dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	60fb      	str	r3, [r7, #12]
 80031e4:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = uSD_D0_Pin|uSD_D1_Pin|uSD_D2_Pin|uSD_D3_Pin
 80031e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80031ea:	657b      	str	r3, [r7, #84]	; 0x54
                          |uSD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ec:	2302      	movs	r3, #2
 80031ee:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f0:	2300      	movs	r3, #0
 80031f2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f4:	2303      	movs	r3, #3
 80031f6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80031f8:	230c      	movs	r3, #12
 80031fa:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003200:	4619      	mov	r1, r3
 8003202:	484c      	ldr	r0, [pc, #304]	; (8003334 <HAL_SD_MspInit+0x1f4>)
 8003204:	f002 fe7c 	bl	8005f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8003208:	2304      	movs	r3, #4
 800320a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	2303      	movs	r3, #3
 8003216:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003218:	230c      	movs	r3, #12
 800321a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 800321c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003220:	4619      	mov	r1, r3
 8003222:	4845      	ldr	r0, [pc, #276]	; (8003338 <HAL_SD_MspInit+0x1f8>)
 8003224:	f002 fe6c 	bl	8005f00 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003228:	4b44      	ldr	r3, [pc, #272]	; (800333c <HAL_SD_MspInit+0x1fc>)
 800322a:	4a45      	ldr	r2, [pc, #276]	; (8003340 <HAL_SD_MspInit+0x200>)
 800322c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800322e:	4b43      	ldr	r3, [pc, #268]	; (800333c <HAL_SD_MspInit+0x1fc>)
 8003230:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003234:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003236:	4b41      	ldr	r3, [pc, #260]	; (800333c <HAL_SD_MspInit+0x1fc>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800323c:	4b3f      	ldr	r3, [pc, #252]	; (800333c <HAL_SD_MspInit+0x1fc>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003242:	4b3e      	ldr	r3, [pc, #248]	; (800333c <HAL_SD_MspInit+0x1fc>)
 8003244:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003248:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800324a:	4b3c      	ldr	r3, [pc, #240]	; (800333c <HAL_SD_MspInit+0x1fc>)
 800324c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003250:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003252:	4b3a      	ldr	r3, [pc, #232]	; (800333c <HAL_SD_MspInit+0x1fc>)
 8003254:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003258:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800325a:	4b38      	ldr	r3, [pc, #224]	; (800333c <HAL_SD_MspInit+0x1fc>)
 800325c:	2220      	movs	r2, #32
 800325e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_SD_MspInit+0x1fc>)
 8003262:	2200      	movs	r2, #0
 8003264:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003266:	4b35      	ldr	r3, [pc, #212]	; (800333c <HAL_SD_MspInit+0x1fc>)
 8003268:	2204      	movs	r2, #4
 800326a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800326c:	4b33      	ldr	r3, [pc, #204]	; (800333c <HAL_SD_MspInit+0x1fc>)
 800326e:	2203      	movs	r2, #3
 8003270:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003272:	4b32      	ldr	r3, [pc, #200]	; (800333c <HAL_SD_MspInit+0x1fc>)
 8003274:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003278:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800327a:	4b30      	ldr	r3, [pc, #192]	; (800333c <HAL_SD_MspInit+0x1fc>)
 800327c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003280:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003282:	482e      	ldr	r0, [pc, #184]	; (800333c <HAL_SD_MspInit+0x1fc>)
 8003284:	f001 ff46 	bl	8005114 <HAL_DMA_Init>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_SD_MspInit+0x152>
    {
      Error_Handler();
 800328e:	f7ff fd2b 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a29      	ldr	r2, [pc, #164]	; (800333c <HAL_SD_MspInit+0x1fc>)
 8003296:	641a      	str	r2, [r3, #64]	; 0x40
 8003298:	4a28      	ldr	r2, [pc, #160]	; (800333c <HAL_SD_MspInit+0x1fc>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800329e:	4b29      	ldr	r3, [pc, #164]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032a0:	4a29      	ldr	r2, [pc, #164]	; (8003348 <HAL_SD_MspInit+0x208>)
 80032a2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80032a4:	4b27      	ldr	r3, [pc, #156]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032aa:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032ae:	2240      	movs	r2, #64	; 0x40
 80032b0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032b2:	4b24      	ldr	r3, [pc, #144]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032b8:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032be:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032c0:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032c6:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032c8:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032ce:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80032d0:	4b1c      	ldr	r3, [pc, #112]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032d2:	2220      	movs	r2, #32
 80032d4:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032d6:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032d8:	2200      	movs	r2, #0
 80032da:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032de:	2204      	movs	r2, #4
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032e2:	4b18      	ldr	r3, [pc, #96]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032e4:	2203      	movs	r2, #3
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80032f0:	4b14      	ldr	r3, [pc, #80]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032f2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80032f8:	4812      	ldr	r0, [pc, #72]	; (8003344 <HAL_SD_MspInit+0x204>)
 80032fa:	f001 ff0b 	bl	8005114 <HAL_DMA_Init>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <HAL_SD_MspInit+0x1c8>
    {
      Error_Handler();
 8003304:	f7ff fcf0 	bl	8002ce8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a0e      	ldr	r2, [pc, #56]	; (8003344 <HAL_SD_MspInit+0x204>)
 800330c:	63da      	str	r2, [r3, #60]	; 0x3c
 800330e:	4a0d      	ldr	r2, [pc, #52]	; (8003344 <HAL_SD_MspInit+0x204>)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8003314:	2200      	movs	r2, #0
 8003316:	2100      	movs	r1, #0
 8003318:	2031      	movs	r0, #49	; 0x31
 800331a:	f001 fec4 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800331e:	2031      	movs	r0, #49	; 0x31
 8003320:	f001 fedd 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8003324:	bf00      	nop
 8003326:	3768      	adds	r7, #104	; 0x68
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40012c00 	.word	0x40012c00
 8003330:	40023800 	.word	0x40023800
 8003334:	40020800 	.word	0x40020800
 8003338:	40020c00 	.word	0x40020c00
 800333c:	20000670 	.word	0x20000670
 8003340:	40026458 	.word	0x40026458
 8003344:	20000c80 	.word	0x20000c80
 8003348:	400264a0 	.word	0x400264a0

0800334c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800335c:	d116      	bne.n	800338c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
 8003362:	4b1a      	ldr	r3, [pc, #104]	; (80033cc <HAL_TIM_Base_MspInit+0x80>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	4a19      	ldr	r2, [pc, #100]	; (80033cc <HAL_TIM_Base_MspInit+0x80>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6413      	str	r3, [r2, #64]	; 0x40
 800336e:	4b17      	ldr	r3, [pc, #92]	; (80033cc <HAL_TIM_Base_MspInit+0x80>)
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800337a:	2200      	movs	r2, #0
 800337c:	2100      	movs	r1, #0
 800337e:	201c      	movs	r0, #28
 8003380:	f001 fe91 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003384:	201c      	movs	r0, #28
 8003386:	f001 feaa 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800338a:	e01a      	b.n	80033c2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a0f      	ldr	r2, [pc, #60]	; (80033d0 <HAL_TIM_Base_MspInit+0x84>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d115      	bne.n	80033c2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <HAL_TIM_Base_MspInit+0x80>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	4a0b      	ldr	r2, [pc, #44]	; (80033cc <HAL_TIM_Base_MspInit+0x80>)
 80033a0:	f043 0304 	orr.w	r3, r3, #4
 80033a4:	6413      	str	r3, [r2, #64]	; 0x40
 80033a6:	4b09      	ldr	r3, [pc, #36]	; (80033cc <HAL_TIM_Base_MspInit+0x80>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	201e      	movs	r0, #30
 80033b8:	f001 fe75 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80033bc:	201e      	movs	r0, #30
 80033be:	f001 fe8e 	bl	80050de <HAL_NVIC_EnableIRQ>
}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40023800 	.word	0x40023800
 80033d0:	40000800 	.word	0x40000800

080033d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	2200      	movs	r2, #0
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	609a      	str	r2, [r3, #8]
 80033e8:	60da      	str	r2, [r3, #12]
 80033ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_UART_MspInit+0x94>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d133      	bne.n	800345e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	4b1c      	ldr	r3, [pc, #112]	; (800346c <HAL_UART_MspInit+0x98>)
 80033fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fe:	4a1b      	ldr	r2, [pc, #108]	; (800346c <HAL_UART_MspInit+0x98>)
 8003400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003404:	6413      	str	r3, [r2, #64]	; 0x40
 8003406:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_UART_MspInit+0x98>)
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b15      	ldr	r3, [pc, #84]	; (800346c <HAL_UART_MspInit+0x98>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a14      	ldr	r2, [pc, #80]	; (800346c <HAL_UART_MspInit+0x98>)
 800341c:	f043 0301 	orr.w	r3, r3, #1
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b12      	ldr	r3, [pc, #72]	; (800346c <HAL_UART_MspInit+0x98>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800342e:	230c      	movs	r3, #12
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003432:	2302      	movs	r3, #2
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003436:	2300      	movs	r3, #0
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800343a:	2303      	movs	r3, #3
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800343e:	2307      	movs	r3, #7
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003442:	f107 0314 	add.w	r3, r7, #20
 8003446:	4619      	mov	r1, r3
 8003448:	4809      	ldr	r0, [pc, #36]	; (8003470 <HAL_UART_MspInit+0x9c>)
 800344a:	f002 fd59 	bl	8005f00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800344e:	2200      	movs	r2, #0
 8003450:	2100      	movs	r1, #0
 8003452:	2026      	movs	r0, #38	; 0x26
 8003454:	f001 fe27 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003458:	2026      	movs	r0, #38	; 0x26
 800345a:	f001 fe40 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800345e:	bf00      	nop
 8003460:	3728      	adds	r7, #40	; 0x28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40004400 	.word	0x40004400
 800346c:	40023800 	.word	0x40023800
 8003470:	40020000 	.word	0x40020000

08003474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003478:	e7fe      	b.n	8003478 <NMI_Handler+0x4>

0800347a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800347e:	e7fe      	b.n	800347e <HardFault_Handler+0x4>

08003480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003484:	e7fe      	b.n	8003484 <MemManage_Handler+0x4>

08003486 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800348a:	e7fe      	b.n	800348a <BusFault_Handler+0x4>

0800348c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800348c:	b480      	push	{r7}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003490:	e7fe      	b.n	8003490 <UsageFault_Handler+0x4>

08003492 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003492:	b480      	push	{r7}
 8003494:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034a4:	bf00      	nop
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034c0:	f000 fee0 	bl	8004284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80034cc:	4802      	ldr	r0, [pc, #8]	; (80034d8 <DMA1_Stream5_IRQHandler+0x10>)
 80034ce:	f001 ffb9 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80034d2:	bf00      	nop
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000984 	.word	0x20000984

080034dc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80034e0:	4802      	ldr	r0, [pc, #8]	; (80034ec <ADC_IRQHandler+0x10>)
 80034e2:	f001 f80b 	bl	80044fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80034e6:	bf00      	nop
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	200009e4 	.word	0x200009e4

080034f0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034f4:	4802      	ldr	r0, [pc, #8]	; (8003500 <TIM2_IRQHandler+0x10>)
 80034f6:	f007 faad 	bl	800aa54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034fa:	bf00      	nop
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	20000f7c 	.word	0x20000f7c

08003504 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003508:	4802      	ldr	r0, [pc, #8]	; (8003514 <TIM4_IRQHandler+0x10>)
 800350a:	f007 faa3 	bl	800aa54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	200006d8 	.word	0x200006d8

08003518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800351c:	4802      	ldr	r0, [pc, #8]	; (8003528 <USART2_IRQHandler+0x10>)
 800351e:	f008 f80d 	bl	800b53c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000fc4 	.word	0x20000fc4

0800352c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8003530:	4802      	ldr	r0, [pc, #8]	; (800353c <SDIO_IRQHandler+0x10>)
 8003532:	f006 f927 	bl	8009784 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000ee0 	.word	0x20000ee0

08003540 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_I2S_IRQHandler(&hi2s3);
 8003544:	4802      	ldr	r0, [pc, #8]	; (8003550 <SPI3_IRQHandler+0x10>)
 8003546:	f003 f961 	bl	800680c <HAL_I2S_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200013f4 	.word	0x200013f4

08003554 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003558:	4802      	ldr	r0, [pc, #8]	; (8003564 <DMA2_Stream0_IRQHandler+0x10>)
 800355a:	f001 ff73 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800355e:	bf00      	nop
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	20000a30 	.word	0x20000a30

08003568 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800356c:	4802      	ldr	r0, [pc, #8]	; (8003578 <DMA2_Stream3_IRQHandler+0x10>)
 800356e:	f001 ff69 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000670 	.word	0x20000670

0800357c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003580:	4802      	ldr	r0, [pc, #8]	; (800358c <OTG_FS_IRQHandler+0x10>)
 8003582:	f003 fdfc 	bl	800717e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20002568 	.word	0x20002568

08003590 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003594:	4802      	ldr	r0, [pc, #8]	; (80035a0 <DMA2_Stream6_IRQHandler+0x10>)
 8003596:	f001 ff55 	bl	8005444 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000c80 	.word	0x20000c80

080035a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <_sbrk+0x5c>)
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <_sbrk+0x60>)
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b8:	4b13      	ldr	r3, [pc, #76]	; (8003608 <_sbrk+0x64>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <_sbrk+0x64>)
 80035c2:	4a12      	ldr	r2, [pc, #72]	; (800360c <_sbrk+0x68>)
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <_sbrk+0x64>)
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4413      	add	r3, r2
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d207      	bcs.n	80035e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035d4:	f00d f926 	bl	8010824 <__errno>
 80035d8:	4603      	mov	r3, r0
 80035da:	220c      	movs	r2, #12
 80035dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035e2:	e009      	b.n	80035f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035e4:	4b08      	ldr	r3, [pc, #32]	; (8003608 <_sbrk+0x64>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035ea:	4b07      	ldr	r3, [pc, #28]	; (8003608 <_sbrk+0x64>)
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	4a05      	ldr	r2, [pc, #20]	; (8003608 <_sbrk+0x64>)
 80035f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035f6:	68fb      	ldr	r3, [r7, #12]
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3718      	adds	r7, #24
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20040000 	.word	0x20040000
 8003604:	00000800 	.word	0x00000800
 8003608:	2000041c 	.word	0x2000041c
 800360c:	20002980 	.word	0x20002980

08003610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003610:	b480      	push	{r7}
 8003612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <SystemInit+0x20>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	4a05      	ldr	r2, [pc, #20]	; (8003630 <SystemInit+0x20>)
 800361c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed00 	.word	0xe000ed00

08003634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8003634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800366c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003638:	480d      	ldr	r0, [pc, #52]	; (8003670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800363a:	490e      	ldr	r1, [pc, #56]	; (8003674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800363c:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800363e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003640:	e002      	b.n	8003648 <LoopCopyDataInit>

08003642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003646:	3304      	adds	r3, #4

08003648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800364a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800364c:	d3f9      	bcc.n	8003642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003650:	4c0b      	ldr	r4, [pc, #44]	; (8003680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003654:	e001      	b.n	800365a <LoopFillZerobss>

08003656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003658:	3204      	adds	r2, #4

0800365a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800365a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800365c:	d3fb      	bcc.n	8003656 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800365e:	f7ff ffd7 	bl	8003610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003662:	f00d f8e5 	bl	8010830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003666:	f7fd fc47 	bl	8000ef8 <main>
  bx  lr    
 800366a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800366c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003674:	200003f8 	.word	0x200003f8
  ldr r2, =_sidata
 8003678:	0801176c 	.word	0x0801176c
  ldr r2, =_sbss
 800367c:	200003f8 	.word	0x200003f8
  ldr r4, =_ebss
 8003680:	20002980 	.word	0x20002980

08003684 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003684:	e7fe      	b.n	8003684 <CAN1_RX0_IRQHandler>
	...

08003688 <setStepTime>:
"                             |__/ \n";
*/

static uint32_t STEP_TIME;

void setStepTime(uint32_t _tickValue){
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	STEP_TIME = _tickValue;
 8003690:	4a04      	ldr	r2, [pc, #16]	; (80036a4 <setStepTime+0x1c>)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6013      	str	r3, [r2, #0]
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	20000420 	.word	0x20000420

080036a8 <initDrum>:

void initDrum(DRUM* _chnl, DRM_voice _main_voice, DRM_voice _aux_voice, DRM_type _chnl_type, GPIO_PinState _aux_state)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	4608      	mov	r0, r1
 80036b2:	4611      	mov	r1, r2
 80036b4:	461a      	mov	r2, r3
 80036b6:	4603      	mov	r3, r0
 80036b8:	70fb      	strb	r3, [r7, #3]
 80036ba:	460b      	mov	r3, r1
 80036bc:	70bb      	strb	r3, [r7, #2]
 80036be:	4613      	mov	r3, r2
 80036c0:	707b      	strb	r3, [r7, #1]
	// main configuration
	_chnl->main_voice 			= _main_voice;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	701a      	strb	r2, [r3, #0]
	_chnl->aux_voice  			= _aux_voice;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	78ba      	ldrb	r2, [r7, #2]
 80036cc:	709a      	strb	r2, [r3, #2]
	_chnl->chnl_type   			= _chnl_type;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	787a      	ldrb	r2, [r7, #1]
 80036d2:	70da      	strb	r2, [r3, #3]

	// parameters default values for cymbal
	_chnl->peak_volume_norm		= 50;		// full volume at 4096*50%=2048
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2232      	movs	r2, #50	; 0x32
 80036d8:	80da      	strh	r2, [r3, #6]
	_chnl->peak_max_length		= 201;		// 201 	x0.1=20.1ms
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	22c9      	movs	r2, #201	; 0xc9
 80036de:	811a      	strh	r2, [r3, #8]
	_chnl->peak_min_length		= 3; 		// 15 	x0.1=1.5ms
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2203      	movs	r2, #3
 80036e4:	815a      	strh	r2, [r3, #10]
	_chnl->peak2peak 			= 1500;//2048; 	//512 mute and 2048 ramp-down
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80036ec:	819a      	strh	r2, [r3, #12]
	// if the main pad is mesh, peaks are much longer
	if ((_chnl_type == MESH_PAD_AUTOAUX) || (_chnl_type == MESH_RIM_AUTOAUX))
 80036ee:	787b      	ldrb	r3, [r7, #1]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <initDrum+0x52>
 80036f4:	787b      	ldrb	r3, [r7, #1]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d102      	bne.n	8003700 <initDrum+0x58>
		_chnl->peak_min_length	= 8; 		// 8 	x0.1=0.8ms
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2208      	movs	r2, #8
 80036fe:	815a      	strh	r2, [r3, #10]

	// likely to overwrite
	_chnl->alt_voice  			= _main_voice;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	78fa      	ldrb	r2, [r7, #3]
 8003704:	705a      	strb	r2, [r3, #1]

	// update all variables
	_chnl->cooldown		 		= 0;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	81da      	strh	r2, [r3, #14]
	_chnl->main_peaking			= 0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	741a      	strb	r2, [r3, #16]
	_chnl->main_rdy	 			= 0;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	745a      	strb	r2, [r3, #17]
	_chnl->main_rdy_usealt		= 0;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	749a      	strb	r2, [r3, #18]

	_chnl->main_active_max 	 	= 0;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	829a      	strh	r2, [r3, #20]
	_chnl->main_active_length	= 0;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	82da      	strh	r2, [r3, #22]


	_chnl->main_rdy_height 	 	= 0;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	835a      	strh	r2, [r3, #26]
	_chnl->main_rdy_time	 	= 0;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	61da      	str	r2, [r3, #28]
	_chnl->main_rdy_volume	 	= 0;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2020 	strb.w	r2, [r3, #32]
	_chnl->main_rdy_length	 	= 0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	845a      	strh	r2, [r3, #34]	; 0x22


	_chnl->aux_rdy				= 0;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_chnl->aux_rdy_time			= 0;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	629a      	str	r2, [r3, #40]	; 0x28
	_chnl->aux_active_time		= 0;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	631a      	str	r2, [r3, #48]	; 0x30

	_chnl->aux_status 			= CHANNEL_STATUS_IDLE;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	761a      	strb	r2, [r3, #24]

	if ((_aux_state == GPIO_PIN_RESET)||(_chnl_type == CYMBAL_2_ZONE)){
 800375e:	7c3b      	ldrb	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d002      	beq.n	800376a <initDrum+0xc2>
 8003764:	787b      	ldrb	r3, [r7, #1]
 8003766:	2b04      	cmp	r3, #4
 8003768:	d10a      	bne.n	8003780 <initDrum+0xd8>
		// LOW state, pad input
		_chnl->aux_type = AUX_TYPE_PAD;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	711a      	strb	r2, [r3, #4]
		_chnl->aux_active_state	= CHANNEL_PAD_IDLE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		_chnl->aux_rdy_state	= CHANNEL_PAD_IDLE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}
	if ((_aux_state == GPIO_PIN_SET)||(_chnl_type == CYMBAL_HIHAT)||(_chnl_type == CYMBAL_MUTE)){
 8003780:	7c3b      	ldrb	r3, [r7, #16]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d005      	beq.n	8003792 <initDrum+0xea>
 8003786:	787b      	ldrb	r3, [r7, #1]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d002      	beq.n	8003792 <initDrum+0xea>
 800378c:	787b      	ldrb	r3, [r7, #1]
 800378e:	2b05      	cmp	r3, #5
 8003790:	d10a      	bne.n	80037a8 <initDrum+0x100>
		// HIGH state, pedal input
		_chnl->aux_type = AUX_TYPE_PEDAL;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	711a      	strb	r2, [r3, #4]
		_chnl->aux_active_state	= CHANNEL_PEDAL_IDLE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		_chnl->aux_rdy_state	= CHANNEL_PEDAL_IDLE;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2202      	movs	r2, #2
 80037a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	_chnl->aux_last_state	= _aux_state;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7c3a      	ldrb	r2, [r7, #16]
 80037ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	_chnl->main_last_on_voice 	= 0;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	_chnl->main_last_on_time 	= 0;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	639a      	str	r2, [r3, #56]	; 0x38
	_chnl->aux_last_on_voice 	= 0;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	_chnl->aux_last_on_time 	= 0;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	641a      	str	r2, [r3, #64]	; 0x40

}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <Update_channel>:

// V 4.0
uint8_t Update_channel(DRUM* _chnl, uint32_t _adc_reading, GPIO_PinState _aux_state){
 80037d8:	b480      	push	{r7}
 80037da:	b087      	sub	sp, #28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	71fb      	strb	r3, [r7, #7]

	// ### MAIN INPUT ###
	uint16_t thresh = PEAK_THRESHOLD;
 80037e6:	2332      	movs	r3, #50	; 0x32
 80037e8:	82fb      	strh	r3, [r7, #22]
	if (_chnl->cooldown) {
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	89db      	ldrh	r3, [r3, #14]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d024      	beq.n	800383c <Update_channel+0x64>
		_chnl->cooldown--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	89db      	ldrh	r3, [r3, #14]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	81da      	strh	r2, [r3, #14]

		// if the peak is happening - no threshold
		if ( _chnl->main_peaking )
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	7c1b      	ldrb	r3, [r3, #16]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <Update_channel+0x34>
			thresh = 1;
 8003806:	2301      	movs	r3, #1
 8003808:	82fb      	strh	r3, [r7, #22]
 800380a:	e017      	b.n	800383c <Update_channel+0x64>
		// until 50ms threshold = (2x max height)
		else if ( _chnl->cooldown > (_chnl->peak2peak - 512) )
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	899b      	ldrh	r3, [r3, #12]
 8003810:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	89d2      	ldrh	r2, [r2, #14]
 8003818:	4293      	cmp	r3, r2
 800381a:	dc04      	bgt.n	8003826 <Update_channel+0x4e>
			thresh = (_chnl->main_rdy_height<<1);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8b5b      	ldrh	r3, [r3, #26]
 8003820:	005b      	lsls	r3, r3, #1
 8003822:	82fb      	strh	r3, [r7, #22]
 8003824:	e00a      	b.n	800383c <Update_channel+0x64>
		// after 50ms, gradually lower the threshold from 75% until 0 after 150ms
		else
			thresh = (uint16_t)(_chnl->main_rdy_height>>5)*(uint16_t)(_chnl->cooldown>>6);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8b5b      	ldrh	r3, [r3, #26]
 800382a:	095b      	lsrs	r3, r3, #5
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	89db      	ldrh	r3, [r3, #14]
 8003832:	099b      	lsrs	r3, r3, #6
 8003834:	b29b      	uxth	r3, r3
 8003836:	fb12 f303 	smulbb	r3, r2, r3
 800383a:	82fb      	strh	r3, [r7, #22]
	}


	if (_adc_reading > thresh){
 800383c:	8afb      	ldrh	r3, [r7, #22]
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	429a      	cmp	r2, r3
 8003842:	f240 8091 	bls.w	8003968 <Update_channel+0x190>
		// new peak, restart cooldown timer
		if (_chnl->cooldown < (_chnl->peak2peak - 512)){
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	89db      	ldrh	r3, [r3, #14]
 800384a:	461a      	mov	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	899b      	ldrh	r3, [r3, #12]
 8003850:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8003854:	429a      	cmp	r2, r3
 8003856:	da0c      	bge.n	8003872 <Update_channel+0x9a>
			_chnl->main_peaking  = 1;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2201      	movs	r2, #1
 800385c:	741a      	strb	r2, [r3, #16]

			_chnl->cooldown = _chnl->peak2peak;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	899a      	ldrh	r2, [r3, #12]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	81da      	strh	r2, [r3, #14]
			_chnl->main_active_length 	= 0;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	82da      	strh	r2, [r3, #22]
			_chnl->main_active_max 		= 0;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	829a      	strh	r2, [r3, #20]
		}

		// increment peak length until max length is reached
		_chnl->main_active_length +=1;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8adb      	ldrh	r3, [r3, #22]
 8003876:	3301      	adds	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	82da      	strh	r2, [r3, #22]

		// if the value is bigger then max, update max
		if (_adc_reading > _chnl->main_active_max)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8a9b      	ldrh	r3, [r3, #20]
 8003882:	461a      	mov	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4293      	cmp	r3, r2
 8003888:	d903      	bls.n	8003892 <Update_channel+0xba>
			_chnl->main_active_max  = _adc_reading;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	829a      	strh	r2, [r3, #20]

		// CHECKING END CONDITION
		// End of peak, if the point is lower then half of the max
		if (_adc_reading < (_chnl->main_active_max>>1)) {
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8a9b      	ldrh	r3, [r3, #20]
 8003896:	085b      	lsrs	r3, r3, #1
 8003898:	b29b      	uxth	r3, r3
 800389a:	461a      	mov	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4293      	cmp	r3, r2
 80038a0:	d262      	bcs.n	8003968 <Update_channel+0x190>
			_chnl->main_peaking = 0;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	741a      	strb	r2, [r3, #16]

			// option 1. short peaks higher than 40% of max volume (50*8=400 ADC)
			if ((_chnl->main_active_length < _chnl->peak_min_length) && (_chnl->main_active_max > (_chnl->peak_volume_norm<<3)) ) {
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8ada      	ldrh	r2, [r3, #22]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	895b      	ldrh	r3, [r3, #10]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d221      	bcs.n	80038f8 <Update_channel+0x120>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8a9b      	ldrh	r3, [r3, #20]
 80038b8:	461a      	mov	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	88db      	ldrh	r3, [r3, #6]
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	429a      	cmp	r2, r3
 80038c2:	dd19      	ble.n	80038f8 <Update_channel+0x120>
				if ((_chnl->chnl_type == MESH_RIM_AUTOAUX)){
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	78db      	ldrb	r3, [r3, #3]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d147      	bne.n	800395c <Update_channel+0x184>
					_chnl->main_rdy 		= 1;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	745a      	strb	r2, [r3, #17]
					_chnl->main_rdy_usealt 	= 0;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2200      	movs	r2, #0
 80038d6:	749a      	strb	r2, [r3, #18]
					_chnl->main_rdy_time	= STEP_TIME;
 80038d8:	4b78      	ldr	r3, [pc, #480]	; (8003abc <Update_channel+0x2e4>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	61da      	str	r2, [r3, #28]
					_chnl->main_rdy_height 	= _chnl->main_active_max;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8a9a      	ldrh	r2, [r3, #20]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	835a      	strh	r2, [r3, #26]
					_chnl->main_rdy_length	= _chnl->main_active_length;	//debug only
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8ada      	ldrh	r2, [r3, #22]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	845a      	strh	r2, [r3, #34]	; 0x22
					_chnl->main_rdy_usealt = 1;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	749a      	strb	r2, [r3, #18]
				if ((_chnl->chnl_type == MESH_RIM_AUTOAUX)){
 80038f6:	e031      	b.n	800395c <Update_channel+0x184>
				}
			// option 2. normal length peaks
			} else if ( ((_chnl->main_active_length >= _chnl->peak_min_length)  ) //|| (_chnl->main_active_max < (_chnl->peak_volume_norm<<2))
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8ada      	ldrh	r2, [r3, #22]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	895b      	ldrh	r3, [r3, #10]
 8003900:	429a      	cmp	r2, r3
 8003902:	d323      	bcc.n	800394c <Update_channel+0x174>
					  && (_chnl->main_active_length <  _chnl->peak_max_length)) {
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8ada      	ldrh	r2, [r3, #22]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	891b      	ldrh	r3, [r3, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	d21d      	bcs.n	800394c <Update_channel+0x174>
				_chnl->main_rdy 		= 1;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	745a      	strb	r2, [r3, #17]
				_chnl->main_rdy_usealt 	= 0;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	749a      	strb	r2, [r3, #18]
				_chnl->main_rdy_time	= STEP_TIME;
 800391c:	4b67      	ldr	r3, [pc, #412]	; (8003abc <Update_channel+0x2e4>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	61da      	str	r2, [r3, #28]
				_chnl->main_rdy_height 	= _chnl->main_active_max;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8a9a      	ldrh	r2, [r3, #20]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	835a      	strh	r2, [r3, #26]
				_chnl->main_rdy_length	= _chnl->main_active_length;	//debug only
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8ada      	ldrh	r2, [r3, #22]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	845a      	strh	r2, [r3, #34]	; 0x22

				// handle hihat case
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	78db      	ldrb	r3, [r3, #3]
 8003938:	2b03      	cmp	r3, #3
 800393a:	d10e      	bne.n	800395a <Update_channel+0x182>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	7e1b      	ldrb	r3, [r3, #24]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d10a      	bne.n	800395a <Update_channel+0x182>
					_chnl->main_rdy_usealt = 1;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	749a      	strb	r2, [r3, #18]
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800394a:	e006      	b.n	800395a <Update_channel+0x182>
			// option 3 - inconsistent peak:
			}else{
//				if (_chnl->cooldown < (_chnl->peak2peak - 512)){
					_chnl->cooldown = 0;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	81da      	strh	r2, [r3, #14]
					_chnl->main_rdy_height 	= 0;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	835a      	strh	r2, [r3, #26]
 8003958:	e000      	b.n	800395c <Update_channel+0x184>
				if ((_chnl->chnl_type == CYMBAL_HIHAT) && (_chnl->aux_status == CHANNEL_STATUS_PRESSED))
 800395a:	bf00      	nop

//				}
			}

			// reset process
			_chnl->main_active_length 	= 0;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	82da      	strh	r2, [r3, #22]
			_chnl->main_active_max 		= 0;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	829a      	strh	r2, [r3, #20]
		}//end adc<max/2
	}

	// ### AUX INPUT ###

	if (_chnl->aux_type == AUX_TYPE_PAD){
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	791b      	ldrb	r3, [r3, #4]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d141      	bne.n	80039f4 <Update_channel+0x21c>

		if (_aux_state == GPIO_PIN_RESET)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d104      	bne.n	8003980 <Update_channel+0x1a8>
			_chnl->aux_active_state = CHANNEL_PAD_IDLE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800397e:	e003      	b.n	8003988 <Update_channel+0x1b0>
		else
			_chnl->aux_active_state = CHANNEL_PAD_TRIGGERED;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

		// new peak started
		if ((_chnl->aux_active_state == CHANNEL_PAD_TRIGGERED) && (_chnl->aux_last_state == CHANNEL_PAD_IDLE)){
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <Update_channel+0x1ca>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003998:	2b00      	cmp	r3, #0
 800399a:	d102      	bne.n	80039a2 <Update_channel+0x1ca>
			_chnl->aux_status		 = CHANNEL_STATUS_PEAK;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	761a      	strb	r2, [r3, #24]
		}

		// peak ended
		if ((_chnl->aux_active_state == CHANNEL_PAD_IDLE) && (_chnl->aux_last_state == CHANNEL_PAD_TRIGGERED)){
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d11c      	bne.n	80039e6 <Update_channel+0x20e>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d117      	bne.n	80039e6 <Update_channel+0x20e>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 80039b6:	4b41      	ldr	r3, [pc, #260]	; (8003abc <Update_channel+0x2e4>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b32      	cmp	r3, #50	; 0x32
 80039c2:	d90d      	bls.n	80039e0 <Update_channel+0x208>
				_chnl->aux_rdy			 = 1;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 80039cc:	4b3b      	ldr	r3, [pc, #236]	; (8003abc <Update_channel+0x2e4>)
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	629a      	str	r2, [r3, #40]	; 0x28
				_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	761a      	strb	r2, [r3, #24]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039f2:	e055      	b.n	8003aa0 <Update_channel+0x2c8>

	} else { //AUX_TYPE_PEDAL

		if (_aux_state == GPIO_PIN_SET)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d104      	bne.n	8003a04 <Update_channel+0x22c>
			_chnl->aux_active_state = CHANNEL_PEDAL_IDLE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2202      	movs	r2, #2
 80039fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8003a02:	e003      	b.n	8003a0c <Update_channel+0x234>
		else
			_chnl->aux_active_state = CHANNEL_PEDAL_PRESSED;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2203      	movs	r2, #3
 8003a08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34


		// pedal pressed
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_PRESSED) && (_chnl->aux_last_state == CHANNEL_PEDAL_IDLE)){
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a12:	2b03      	cmp	r3, #3
 8003a14:	d11c      	bne.n	8003a50 <Update_channel+0x278>
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d117      	bne.n	8003a50 <Update_channel+0x278>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 8003a20:	4b26      	ldr	r3, [pc, #152]	; (8003abc <Update_channel+0x2e4>)
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b32      	cmp	r3, #50	; 0x32
 8003a2c:	d907      	bls.n	8003a3e <Update_channel+0x266>
				_chnl->aux_rdy			 = 1;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 8003a36:	4b21      	ldr	r3, [pc, #132]	; (8003abc <Update_channel+0x2e4>)
 8003a38:	681a      	ldr	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	629a      	str	r2, [r3, #40]	; 0x28
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_chnl->aux_status		 = CHANNEL_STATUS_PRESSED;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	761a      	strb	r2, [r3, #24]

		}

		// pedal released
		if ((_chnl->aux_active_state == CHANNEL_PEDAL_IDLE) && (_chnl->aux_last_state == CHANNEL_PEDAL_PRESSED)){
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d11c      	bne.n	8003a94 <Update_channel+0x2bc>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d117      	bne.n	8003a94 <Update_channel+0x2bc>
			if (STEP_TIME - _chnl->aux_rdy_time > AUX_PEAK2PEAK) {
 8003a64:	4b15      	ldr	r3, [pc, #84]	; (8003abc <Update_channel+0x2e4>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b32      	cmp	r3, #50	; 0x32
 8003a70:	d907      	bls.n	8003a82 <Update_channel+0x2aa>
				_chnl->aux_rdy			 = 1;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				_chnl->aux_rdy_time		 = STEP_TIME;
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <Update_channel+0x2e4>)
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
			}
			_chnl->aux_rdy_state	 = _chnl->aux_active_state ;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			_chnl->aux_status		 = CHANNEL_STATUS_IDLE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	761a      	strb	r2, [r3, #24]
		}
		_chnl->aux_last_state = _chnl->aux_active_state;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	// for fun return 1 if there is data to report
	return (_chnl->main_rdy | _chnl->aux_rdy);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	7c5a      	ldrb	r2, [r3, #17]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	b2db      	uxtb	r3, r3
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	20000420 	.word	0x20000420

08003ac0 <sendMidiActiveSense>:

static void sendOneNote(){

}

void sendMidiActiveSense(uint8_t* _upd_active_sens){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
	if (*_upd_active_sens) {
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <sendMidiActiveSense+0x28>
		*_upd_active_sens = 0;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	701a      	strb	r2, [r3, #0]
		uint8_t bff[4] = { 0x0F, 0xFE, 0x00, 0x00 };
 8003ad6:	f64f 630f 	movw	r3, #65039	; 0xfe0f
 8003ada:	60fb      	str	r3, [r7, #12]
		tx_midi((uint8_t*) bff, 4);
 8003adc:	f107 030c 	add.w	r3, r7, #12
 8003ae0:	2104      	movs	r1, #4
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fe f94c 	bl	8001d80 <tx_midi>
	}
}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <sendMidi>:
  bff[6] = 0x7f & note;
  tx_midi((uint8_t *)bff,8);
}

// MIDI generic ON message
void sendMidi(uint8_t note, uint8_t vel){
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	460a      	mov	r2, r1
 8003afa:	71fb      	strb	r3, [r7, #7]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71bb      	strb	r3, [r7, #6]
  uint8_t bff[4] = {TAB,  0x99, 0x00, 0x00};
 8003b00:	f649 1309 	movw	r3, #39177	; 0x9909
 8003b04:	60fb      	str	r3, [r7, #12]
  bff[2] = 0x7f & note;
 8003b06:	79fb      	ldrb	r3, [r7, #7]
 8003b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	73bb      	strb	r3, [r7, #14]
  bff[3] = 0x7f & vel;
 8003b10:	79bb      	ldrb	r3, [r7, #6]
 8003b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	73fb      	strb	r3, [r7, #15]
  tx_midi((uint8_t *)bff,4);
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	2104      	movs	r1, #4
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe f92d 	bl	8001d80 <tx_midi>
}
 8003b26:	bf00      	nop
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
	...

08003b30 <sendMidi2>:
  tx_midi((uint8_t *)bff,4);
}


// MIDI generic ON message
void sendMidi2(uint8_t note1, uint8_t vel1,uint8_t note2, uint8_t vel2){
 8003b30:	b590      	push	{r4, r7, lr}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4604      	mov	r4, r0
 8003b38:	4608      	mov	r0, r1
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	71fb      	strb	r3, [r7, #7]
 8003b42:	4603      	mov	r3, r0
 8003b44:	71bb      	strb	r3, [r7, #6]
 8003b46:	460b      	mov	r3, r1
 8003b48:	717b      	strb	r3, [r7, #5]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	713b      	strb	r3, [r7, #4]
  uint8_t bff[8] = {TAB,  0x99, 0x00, 0x00, TAB,  0x99, 0x00, 0x00};
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <sendMidi2+0x68>)
 8003b50:	f107 0308 	add.w	r3, r7, #8
 8003b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003b58:	e883 0003 	stmia.w	r3, {r0, r1}
  bff[2] = 0x7f & note1;
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	72bb      	strb	r3, [r7, #10]
  bff[3] = 0x7f & vel1;
 8003b66:	79bb      	ldrb	r3, [r7, #6]
 8003b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	72fb      	strb	r3, [r7, #11]
  bff[2+4] = 0x7f & note2;
 8003b70:	797b      	ldrb	r3, [r7, #5]
 8003b72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	73bb      	strb	r3, [r7, #14]
  bff[3+4] = 0x7f & vel2;
 8003b7a:	793b      	ldrb	r3, [r7, #4]
 8003b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	73fb      	strb	r3, [r7, #15]
  tx_midi((uint8_t *)bff,8);
 8003b84:	f107 0308 	add.w	r3, r7, #8
 8003b88:	2108      	movs	r1, #8
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f7fe f8f8 	bl	8001d80 <tx_midi>
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd90      	pop	{r4, r7, pc}
 8003b98:	08011698 	.word	0x08011698

08003b9c <sendMidiHHPedalOn>:

// MIDI HiHat pedal press message
void sendMidiHHPedalOn(){
 8003b9c:	b5b0      	push	{r4, r5, r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
  uint8_t bff[20] = { TAB,  0xA9, HHOPEN , 0x7F, TAB,  0xA9, HHCLOSE, 0x7F, TAB, 0xA9, 0x15, 0x7F,
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <sendMidiHHPedalOn+0x28>)
 8003ba4:	1d3c      	adds	r4, r7, #4
 8003ba6:	461d      	mov	r5, r3
 8003ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	6023      	str	r3, [r4, #0]
		  	  	  	  TAB,  0x99, HHPEDAL, 0x64, TAB,  0x99, HHPEDAL, 0x00};
  tx_midi((uint8_t *)bff, 20);
 8003bb0:	1d3b      	adds	r3, r7, #4
 8003bb2:	2114      	movs	r1, #20
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe f8e3 	bl	8001d80 <tx_midi>
}
 8003bba:	bf00      	nop
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	080116a0 	.word	0x080116a0

08003bc8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003bd4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003bd8:	f00c fde0 	bl	801079c <USBD_static_malloc>
 8003bdc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8003bec:	2302      	movs	r3, #2
 8003bee:	e066      	b.n	8003cbe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7c1b      	ldrb	r3, [r3, #16]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d119      	bne.n	8003c34 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c04:	2202      	movs	r2, #2
 8003c06:	2181      	movs	r1, #129	; 0x81
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f00c fc56 	bl	80104ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c18:	2202      	movs	r2, #2
 8003c1a:	2101      	movs	r1, #1
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f00c fc4c 	bl	80104ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2210      	movs	r2, #16
 8003c2e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8003c32:	e016      	b.n	8003c62 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c34:	2340      	movs	r3, #64	; 0x40
 8003c36:	2202      	movs	r2, #2
 8003c38:	2181      	movs	r1, #129	; 0x81
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f00c fc3d 	bl	80104ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c46:	2340      	movs	r3, #64	; 0x40
 8003c48:	2202      	movs	r2, #2
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f00c fc34 	bl	80104ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003c62:	2308      	movs	r3, #8
 8003c64:	2203      	movs	r2, #3
 8003c66:	2182      	movs	r1, #130	; 0x82
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f00c fc26 	bl	80104ba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7c1b      	ldrb	r3, [r3, #16]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f00c fcf7 	bl	8010698 <USBD_LL_PrepareReceive>
 8003caa:	e007      	b.n	8003cbc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003cb2:	2340      	movs	r3, #64	; 0x40
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f00c fcee 	bl	8010698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003cd2:	2181      	movs	r1, #129	; 0x81
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f00c fc16 	bl	8010506 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f00c fc0f 	bl	8010506 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003cf0:	2182      	movs	r1, #130	; 0x82
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f00c fc07 	bl	8010506 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00e      	beq.n	8003d30 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d22:	4618      	mov	r0, r3
 8003d24:	f00c fd48 	bl	80107b8 <USBD_static_free>
    pdev->pClassData = NULL;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d4c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d03a      	beq.n	8003ddc <USBD_CDC_Setup+0xa0>
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	f040 809a 	bne.w	8003ea0 <USBD_CDC_Setup+0x164>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	88db      	ldrh	r3, [r3, #6]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d029      	beq.n	8003dc8 <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b25b      	sxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	da11      	bge.n	8003da2 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8003d8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	88d2      	ldrh	r2, [r2, #6]
 8003d90:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8003d92:	6939      	ldr	r1, [r7, #16]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	88db      	ldrh	r3, [r3, #6]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f00b fedb 	bl	800fb56 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8003da0:	e085      	b.n	8003eae <USBD_CDC_Setup+0x172>
          hcdc->CmdOpCode = req->bRequest;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	785a      	ldrb	r2, [r3, #1]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	88db      	ldrh	r3, [r3, #6]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8003db8:	6939      	ldr	r1, [r7, #16]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	88db      	ldrh	r3, [r3, #6]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f00b fef4 	bl	800fbae <USBD_CtlPrepareRx>
      break;
 8003dc6:	e072      	b.n	8003eae <USBD_CDC_Setup+0x172>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	7850      	ldrb	r0, [r2, #1]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	4798      	blx	r3
      break;
 8003dda:	e068      	b.n	8003eae <USBD_CDC_Setup+0x172>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	2b0b      	cmp	r3, #11
 8003de2:	d852      	bhi.n	8003e8a <USBD_CDC_Setup+0x14e>
 8003de4:	a201      	add	r2, pc, #4	; (adr r2, 8003dec <USBD_CDC_Setup+0xb0>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003e1d 	.word	0x08003e1d
 8003df0:	08003e99 	.word	0x08003e99
 8003df4:	08003e8b 	.word	0x08003e8b
 8003df8:	08003e8b 	.word	0x08003e8b
 8003dfc:	08003e8b 	.word	0x08003e8b
 8003e00:	08003e8b 	.word	0x08003e8b
 8003e04:	08003e8b 	.word	0x08003e8b
 8003e08:	08003e8b 	.word	0x08003e8b
 8003e0c:	08003e8b 	.word	0x08003e8b
 8003e10:	08003e8b 	.word	0x08003e8b
 8003e14:	08003e47 	.word	0x08003e47
 8003e18:	08003e71 	.word	0x08003e71
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d107      	bne.n	8003e38 <USBD_CDC_Setup+0xfc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003e28:	f107 030c 	add.w	r3, r7, #12
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f00b fe90 	bl	800fb56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003e36:	e032      	b.n	8003e9e <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f00b fe1a 	bl	800fa74 <USBD_CtlError>
            ret = USBD_FAIL;
 8003e40:	2303      	movs	r3, #3
 8003e42:	75fb      	strb	r3, [r7, #23]
          break;
 8003e44:	e02b      	b.n	8003e9e <USBD_CDC_Setup+0x162>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d107      	bne.n	8003e62 <USBD_CDC_Setup+0x126>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8003e52:	f107 030f 	add.w	r3, r7, #15
 8003e56:	2201      	movs	r2, #1
 8003e58:	4619      	mov	r1, r3
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f00b fe7b 	bl	800fb56 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003e60:	e01d      	b.n	8003e9e <USBD_CDC_Setup+0x162>
            USBD_CtlError(pdev, req);
 8003e62:	6839      	ldr	r1, [r7, #0]
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f00b fe05 	bl	800fa74 <USBD_CtlError>
            ret = USBD_FAIL;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	75fb      	strb	r3, [r7, #23]
          break;
 8003e6e:	e016      	b.n	8003e9e <USBD_CDC_Setup+0x162>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d00f      	beq.n	8003e9c <USBD_CDC_Setup+0x160>
          {
            USBD_CtlError(pdev, req);
 8003e7c:	6839      	ldr	r1, [r7, #0]
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f00b fdf8 	bl	800fa74 <USBD_CtlError>
            ret = USBD_FAIL;
 8003e84:	2303      	movs	r3, #3
 8003e86:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003e88:	e008      	b.n	8003e9c <USBD_CDC_Setup+0x160>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f00b fdf1 	bl	800fa74 <USBD_CtlError>
          ret = USBD_FAIL;
 8003e92:	2303      	movs	r3, #3
 8003e94:	75fb      	strb	r3, [r7, #23]
          break;
 8003e96:	e002      	b.n	8003e9e <USBD_CDC_Setup+0x162>
          break;
 8003e98:	bf00      	nop
 8003e9a:	e008      	b.n	8003eae <USBD_CDC_Setup+0x172>
          break;
 8003e9c:	bf00      	nop
      }
      break;
 8003e9e:	e006      	b.n	8003eae <USBD_CDC_Setup+0x172>

    default:
      USBD_CtlError(pdev, req);
 8003ea0:	6839      	ldr	r1, [r7, #0]
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f00b fde6 	bl	800fa74 <USBD_CtlError>
      ret = USBD_FAIL;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8003eac:	bf00      	nop
  }

  return (uint8_t)ret;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8003eca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e04f      	b.n	8003f7a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ee0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	3318      	adds	r3, #24
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d029      	beq.n	8003f4c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	440b      	add	r3, r1
 8003f06:	3318      	adds	r3, #24
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	78f9      	ldrb	r1, [r7, #3]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	460b      	mov	r3, r1
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	1a5b      	subs	r3, r3, r1
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4403      	add	r3, r0
 8003f18:	3344      	adds	r3, #68	; 0x44
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8003f20:	fb03 f301 	mul.w	r3, r3, r1
 8003f24:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d110      	bne.n	8003f4c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	3318      	adds	r3, #24
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003f3e:	78f9      	ldrb	r1, [r7, #3]
 8003f40:	2300      	movs	r3, #0
 8003f42:	2200      	movs	r2, #0
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f00c fb86 	bl	8010656 <USBD_LL_Transmit>
 8003f4a:	e015      	b.n	8003f78 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00b      	beq.n	8003f78 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8003f74:	78fa      	ldrb	r2, [r7, #3]
 8003f76:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3710      	adds	r7, #16
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b084      	sub	sp, #16
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e015      	b.n	8003fd0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f00c fb96 	bl	80106da <USBD_LL_GetRxDataSize>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003fca:	4611      	mov	r1, r2
 8003fcc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003fe6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d015      	beq.n	800401e <USBD_CDC_EP0_RxReady+0x46>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003ff8:	2bff      	cmp	r3, #255	; 0xff
 8003ffa:	d010      	beq.n	800401e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800400a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004012:	b292      	uxth	r2, r2
 8004014:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	22ff      	movs	r2, #255	; 0xff
 800401a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800401e:	2300      	movs	r3, #0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2265      	movs	r2, #101	; 0x65
 8004034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004036:	4b03      	ldr	r3, [pc, #12]	; (8004044 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004038:	4618      	mov	r0, r3
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	20000248 	.word	0x20000248

08004048 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2265      	movs	r2, #101	; 0x65
 8004054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8004056:	4b03      	ldr	r3, [pc, #12]	; (8004064 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004058:	4618      	mov	r0, r3
 800405a:	370c      	adds	r7, #12
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	200001e0 	.word	0x200001e0

08004068 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2265      	movs	r2, #101	; 0x65
 8004074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8004076:	4b03      	ldr	r3, [pc, #12]	; (8004084 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004078:	4618      	mov	r0, r3
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr
 8004084:	200002b0 	.word	0x200002b0

08004088 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	220a      	movs	r2, #10
 8004094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004096:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	2000019c 	.word	0x2000019c

080040a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e004      	b.n	80040c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	370c      	adds	r7, #12
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b087      	sub	sp, #28
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	60f8      	str	r0, [r7, #12]
 80040da:	60b9      	str	r1, [r7, #8]
 80040dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004114:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800413a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800414a:	2303      	movs	r3, #3
 800414c:	e01a      	b.n	8004184 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004154:	2b00      	cmp	r3, #0
 8004156:	d114      	bne.n	8004182 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2201      	movs	r2, #1
 800415c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004176:	2181      	movs	r1, #129	; 0x81
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f00c fa6c 	bl	8010656 <USBD_LL_Transmit>

    ret = USBD_OK;
 800417e:	2300      	movs	r3, #0
 8004180:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004182:	7bfb      	ldrb	r3, [r7, #15]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800419a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d101      	bne.n	80041aa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e016      	b.n	80041d8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	7c1b      	ldrb	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041bc:	2101      	movs	r1, #1
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f00c fa6a 	bl	8010698 <USBD_LL_PrepareReceive>
 80041c4:	e007      	b.n	80041d6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80041cc:	2340      	movs	r3, #64	; 0x40
 80041ce:	2101      	movs	r1, #1
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f00c fa61 	bl	8010698 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3710      	adds	r7, #16
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80041e4:	4b0e      	ldr	r3, [pc, #56]	; (8004220 <HAL_Init+0x40>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a0d      	ldr	r2, [pc, #52]	; (8004220 <HAL_Init+0x40>)
 80041ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041f0:	4b0b      	ldr	r3, [pc, #44]	; (8004220 <HAL_Init+0x40>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a0a      	ldr	r2, [pc, #40]	; (8004220 <HAL_Init+0x40>)
 80041f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041fc:	4b08      	ldr	r3, [pc, #32]	; (8004220 <HAL_Init+0x40>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a07      	ldr	r2, [pc, #28]	; (8004220 <HAL_Init+0x40>)
 8004202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004206:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004208:	2003      	movs	r0, #3
 800420a:	f000 ff41 	bl	8005090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800420e:	2000      	movs	r0, #0
 8004210:	f000 f808 	bl	8004224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004214:	f7fe fd6e 	bl	8002cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	bd80      	pop	{r7, pc}
 800421e:	bf00      	nop
 8004220:	40023c00 	.word	0x40023c00

08004224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <HAL_InitTick+0x54>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_InitTick+0x58>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	4619      	mov	r1, r3
 8004236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800423a:	fbb3 f3f1 	udiv	r3, r3, r1
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	4618      	mov	r0, r3
 8004244:	f000 ff59 	bl	80050fa <HAL_SYSTICK_Config>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e00e      	b.n	8004270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b0f      	cmp	r3, #15
 8004256:	d80a      	bhi.n	800426e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004258:	2200      	movs	r2, #0
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004260:	f000 ff21 	bl	80050a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004264:	4a06      	ldr	r2, [pc, #24]	; (8004280 <HAL_InitTick+0x5c>)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
}
 8004270:	4618      	mov	r0, r3
 8004272:	3708      	adds	r7, #8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	20000198 	.word	0x20000198
 800427c:	2000031c 	.word	0x2000031c
 8004280:	20000318 	.word	0x20000318

08004284 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004288:	4b06      	ldr	r3, [pc, #24]	; (80042a4 <HAL_IncTick+0x20>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_IncTick+0x24>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4413      	add	r3, r2
 8004294:	4a04      	ldr	r2, [pc, #16]	; (80042a8 <HAL_IncTick+0x24>)
 8004296:	6013      	str	r3, [r2, #0]
}
 8004298:	bf00      	nop
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	2000031c 	.word	0x2000031c
 80042a8:	2000143c 	.word	0x2000143c

080042ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042ac:	b480      	push	{r7}
 80042ae:	af00      	add	r7, sp, #0
  return uwTick;
 80042b0:	4b03      	ldr	r3, [pc, #12]	; (80042c0 <HAL_GetTick+0x14>)
 80042b2:	681b      	ldr	r3, [r3, #0]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	2000143c 	.word	0x2000143c

080042c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042cc:	f7ff ffee 	bl	80042ac <HAL_GetTick>
 80042d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042dc:	d005      	beq.n	80042ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042de:	4b0a      	ldr	r3, [pc, #40]	; (8004308 <HAL_Delay+0x44>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	461a      	mov	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042ea:	bf00      	nop
 80042ec:	f7ff ffde 	bl	80042ac <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d8f7      	bhi.n	80042ec <HAL_Delay+0x28>
  {
  }
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	2000031c 	.word	0x2000031c

0800430c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004314:	2300      	movs	r3, #0
 8004316:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e033      	b.n	800438a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f7fe fd0a 	bl	8002d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	f003 0310 	and.w	r3, r3, #16
 8004346:	2b00      	cmp	r3, #0
 8004348:	d118      	bne.n	800437c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004352:	f023 0302 	bic.w	r3, r3, #2
 8004356:	f043 0202 	orr.w	r2, r3, #2
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 fc3e 	bl	8004be0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436e:	f023 0303 	bic.w	r3, r3, #3
 8004372:	f043 0201 	orr.w	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	641a      	str	r2, [r3, #64]	; 0x40
 800437a:	e001      	b.n	8004380 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004388:	7bfb      	ldrb	r3, [r7, #15]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_ADC_Start+0x1a>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e097      	b.n	80044de <HAL_ADC_Start+0x14a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d018      	beq.n	80043f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f042 0201 	orr.w	r2, r2, #1
 80043d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80043d4:	4b45      	ldr	r3, [pc, #276]	; (80044ec <HAL_ADC_Start+0x158>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a45      	ldr	r2, [pc, #276]	; (80044f0 <HAL_ADC_Start+0x15c>)
 80043da:	fba2 2303 	umull	r2, r3, r2, r3
 80043de:	0c9a      	lsrs	r2, r3, #18
 80043e0:	4613      	mov	r3, r2
 80043e2:	005b      	lsls	r3, r3, #1
 80043e4:	4413      	add	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80043e8:	e002      	b.n	80043f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	3b01      	subs	r3, #1
 80043ee:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f9      	bne.n	80043ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b01      	cmp	r3, #1
 8004402:	d15f      	bne.n	80044c4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800440c:	f023 0301 	bic.w	r3, r3, #1
 8004410:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800442e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800443e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004442:	d106      	bne.n	8004452 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004448:	f023 0206 	bic.w	r2, r3, #6
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	645a      	str	r2, [r3, #68]	; 0x44
 8004450:	e002      	b.n	8004458 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004460:	4b24      	ldr	r3, [pc, #144]	; (80044f4 <HAL_ADC_Start+0x160>)
 8004462:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800446c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10f      	bne.n	800449a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d129      	bne.n	80044dc <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	689a      	ldr	r2, [r3, #8]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004496:	609a      	str	r2, [r3, #8]
 8004498:	e020      	b.n	80044dc <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <HAL_ADC_Start+0x164>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d11b      	bne.n	80044dc <HAL_ADC_Start+0x148>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d114      	bne.n	80044dc <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80044c0:	609a      	str	r2, [r3, #8]
 80044c2:	e00b      	b.n	80044dc <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0210 	orr.w	r2, r3, #16
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	20000198 	.word	0x20000198
 80044f0:	431bde83 	.word	0x431bde83
 80044f4:	40012300 	.word	0x40012300
 80044f8:	40012000 	.word	0x40012000

080044fc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]
 8004508:	2300      	movs	r3, #0
 800450a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0320 	and.w	r3, r3, #32
 800452c:	2b20      	cmp	r3, #32
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d049      	beq.n	80045d2 <HAL_ADC_IRQHandler+0xd6>
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d046      	beq.n	80045d2 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004548:	f003 0310 	and.w	r3, r3, #16
 800454c:	2b00      	cmp	r3, #0
 800454e:	d105      	bne.n	800455c <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d12b      	bne.n	80045c2 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800456e:	2b00      	cmp	r3, #0
 8004570:	d127      	bne.n	80045c2 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800457c:	2b00      	cmp	r3, #0
 800457e:	d006      	beq.n	800458e <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800458a:	2b00      	cmp	r3, #0
 800458c:	d119      	bne.n	80045c2 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685a      	ldr	r2, [r3, #4]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0220 	bic.w	r2, r2, #32
 800459c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d105      	bne.n	80045c2 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f043 0201 	orr.w	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fc fc34 	bl	8000e30 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0212 	mvn.w	r2, #18
 80045d0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b04      	cmp	r3, #4
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f2:	2b80      	cmp	r3, #128	; 0x80
 80045f4:	bf0c      	ite	eq
 80045f6:	2301      	moveq	r3, #1
 80045f8:	2300      	movne	r3, #0
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d057      	beq.n	80046b4 <HAL_ADC_IRQHandler+0x1b8>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d054      	beq.n	80046b4 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	2b00      	cmp	r3, #0
 8004614:	d105      	bne.n	8004622 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d139      	bne.n	80046a4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004636:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800463a:	2b00      	cmp	r3, #0
 800463c:	d006      	beq.n	800464c <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004648:	2b00      	cmp	r3, #0
 800464a:	d12b      	bne.n	80046a4 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004656:	2b00      	cmp	r3, #0
 8004658:	d124      	bne.n	80046a4 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11d      	bne.n	80046a4 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800466c:	2b00      	cmp	r3, #0
 800466e:	d119      	bne.n	80046a4 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800467e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004684:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d105      	bne.n	80046a4 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469c:	f043 0201 	orr.w	r2, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 fc19 	bl	8004edc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 020c 	mvn.w	r2, #12
 80046b2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b01      	cmp	r3, #1
 80046c0:	bf0c      	ite	eq
 80046c2:	2301      	moveq	r3, #1
 80046c4:	2300      	movne	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d4:	2b40      	cmp	r3, #64	; 0x40
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d017      	beq.n	8004716 <HAL_ADC_IRQHandler+0x21a>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d014      	beq.n	8004716 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d10d      	bne.n	8004716 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f934 	bl	8004974 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0201 	mvn.w	r2, #1
 8004714:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b20      	cmp	r3, #32
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004736:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800473a:	bf0c      	ite	eq
 800473c:	2301      	moveq	r3, #1
 800473e:	2300      	movne	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d015      	beq.n	8004776 <HAL_ADC_IRQHandler+0x27a>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d012      	beq.n	8004776 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004754:	f043 0202 	orr.w	r2, r3, #2
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0220 	mvn.w	r2, #32
 8004764:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f90e 	bl	8004988 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f06f 0220 	mvn.w	r2, #32
 8004774:	601a      	str	r2, [r3, #0]
  }
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_ADC_Start_DMA+0x1e>
 800479a:	2302      	movs	r3, #2
 800479c:	e0ce      	b.n	800493c <HAL_ADC_Start_DMA+0x1bc>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d018      	beq.n	80047e6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689a      	ldr	r2, [r3, #8]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80047c4:	4b5f      	ldr	r3, [pc, #380]	; (8004944 <HAL_ADC_Start_DMA+0x1c4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a5f      	ldr	r2, [pc, #380]	; (8004948 <HAL_ADC_Start_DMA+0x1c8>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	0c9a      	lsrs	r2, r3, #18
 80047d0:	4613      	mov	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047d8:	e002      	b.n	80047e0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	3b01      	subs	r3, #1
 80047de:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f9      	bne.n	80047da <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f4:	d107      	bne.n	8004806 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004804:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b01      	cmp	r3, #1
 8004812:	f040 8086 	bne.w	8004922 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004840:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004850:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004854:	d106      	bne.n	8004864 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800485a:	f023 0206 	bic.w	r2, r3, #6
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	645a      	str	r2, [r3, #68]	; 0x44
 8004862:	e002      	b.n	800486a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2200      	movs	r2, #0
 8004868:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004872:	4b36      	ldr	r3, [pc, #216]	; (800494c <HAL_ADC_Start_DMA+0x1cc>)
 8004874:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487a:	4a35      	ldr	r2, [pc, #212]	; (8004950 <HAL_ADC_Start_DMA+0x1d0>)
 800487c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	4a34      	ldr	r2, [pc, #208]	; (8004954 <HAL_ADC_Start_DMA+0x1d4>)
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488a:	4a33      	ldr	r2, [pc, #204]	; (8004958 <HAL_ADC_Start_DMA+0x1d8>)
 800488c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004896:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80048a6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048b6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	334c      	adds	r3, #76	; 0x4c
 80048c2:	4619      	mov	r1, r3
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f000 fcd2 	bl	8005270 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10f      	bne.n	80048f8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d129      	bne.n	800493a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	e020      	b.n	800493a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a17      	ldr	r2, [pc, #92]	; (800495c <HAL_ADC_Start_DMA+0x1dc>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d11b      	bne.n	800493a <HAL_ADC_Start_DMA+0x1ba>
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d114      	bne.n	800493a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	e00b      	b.n	800493a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f043 0210 	orr.w	r2, r3, #16
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004932:	f043 0201 	orr.w	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000198 	.word	0x20000198
 8004948:	431bde83 	.word	0x431bde83
 800494c:	40012300 	.word	0x40012300
 8004950:	08004dd9 	.word	0x08004dd9
 8004954:	08004e93 	.word	0x08004e93
 8004958:	08004eaf 	.word	0x08004eaf
 800495c:	40012000 	.word	0x40012000

08004960 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x1c>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e105      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x228>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b09      	cmp	r3, #9
 80049c6:	d925      	bls.n	8004a14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68d9      	ldr	r1, [r3, #12]
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	4613      	mov	r3, r2
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	4413      	add	r3, r2
 80049dc:	3b1e      	subs	r3, #30
 80049de:	2207      	movs	r2, #7
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	43da      	mvns	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	400a      	ands	r2, r1
 80049ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	68d9      	ldr	r1, [r3, #12]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	689a      	ldr	r2, [r3, #8]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	4618      	mov	r0, r3
 8004a00:	4603      	mov	r3, r0
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	4403      	add	r3, r0
 8004a06:	3b1e      	subs	r3, #30
 8004a08:	409a      	lsls	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	430a      	orrs	r2, r1
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	e022      	b.n	8004a5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6919      	ldr	r1, [r3, #16]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	4613      	mov	r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	4413      	add	r3, r2
 8004a28:	2207      	movs	r2, #7
 8004a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a2e:	43da      	mvns	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	400a      	ands	r2, r1
 8004a36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6919      	ldr	r1, [r3, #16]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4618      	mov	r0, r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	005b      	lsls	r3, r3, #1
 8004a4e:	4403      	add	r3, r0
 8004a50:	409a      	lsls	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	2b06      	cmp	r3, #6
 8004a60:	d824      	bhi.n	8004aac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	685a      	ldr	r2, [r3, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	3b05      	subs	r3, #5
 8004a74:	221f      	movs	r2, #31
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	43da      	mvns	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	400a      	ands	r2, r1
 8004a82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	4618      	mov	r0, r3
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3b05      	subs	r3, #5
 8004a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8004aaa:	e04c      	b.n	8004b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	d824      	bhi.n	8004afe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3b23      	subs	r3, #35	; 0x23
 8004ac6:	221f      	movs	r2, #31
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	43da      	mvns	r2, r3
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	400a      	ands	r2, r1
 8004ad4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	3b23      	subs	r3, #35	; 0x23
 8004af0:	fa00 f203 	lsl.w	r2, r0, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	430a      	orrs	r2, r1
 8004afa:	631a      	str	r2, [r3, #48]	; 0x30
 8004afc:	e023      	b.n	8004b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	4413      	add	r3, r2
 8004b0e:	3b41      	subs	r3, #65	; 0x41
 8004b10:	221f      	movs	r2, #31
 8004b12:	fa02 f303 	lsl.w	r3, r2, r3
 8004b16:	43da      	mvns	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	400a      	ands	r2, r1
 8004b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	3b41      	subs	r3, #65	; 0x41
 8004b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	430a      	orrs	r2, r1
 8004b44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_ADC_ConfigChannel+0x234>)
 8004b48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a21      	ldr	r2, [pc, #132]	; (8004bd4 <HAL_ADC_ConfigChannel+0x238>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d109      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x1cc>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b12      	cmp	r3, #18
 8004b5a:	d105      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <HAL_ADC_ConfigChannel+0x238>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d123      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x21e>
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b10      	cmp	r3, #16
 8004b78:	d003      	beq.n	8004b82 <HAL_ADC_ConfigChannel+0x1e6>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2b11      	cmp	r3, #17
 8004b80:	d11b      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d111      	bne.n	8004bba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004b96:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <HAL_ADC_ConfigChannel+0x23c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a10      	ldr	r2, [pc, #64]	; (8004bdc <HAL_ADC_ConfigChannel+0x240>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	0c9a      	lsrs	r2, r3, #18
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	005b      	lsls	r3, r3, #1
 8004baa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bac:	e002      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f9      	bne.n	8004bae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr
 8004bd0:	40012300 	.word	0x40012300
 8004bd4:	40012000 	.word	0x40012000
 8004bd8:	20000198 	.word	0x20000198
 8004bdc:	431bde83 	.word	0x431bde83

08004be0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004be8:	4b79      	ldr	r3, [pc, #484]	; (8004dd0 <ADC_Init+0x1f0>)
 8004bea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	021a      	lsls	r2, r3, #8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	430a      	orrs	r2, r1
 8004c28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6899      	ldr	r1, [r3, #8]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	4a58      	ldr	r2, [pc, #352]	; (8004dd4 <ADC_Init+0x1f4>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	689a      	ldr	r2, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004c86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6899      	ldr	r1, [r3, #8]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689a      	ldr	r2, [r3, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6899      	ldr	r1, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	609a      	str	r2, [r3, #8]
 8004cbc:	e00f      	b.n	8004cde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004cdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f022 0202 	bic.w	r2, r2, #2
 8004cec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6899      	ldr	r1, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	7e1b      	ldrb	r3, [r3, #24]
 8004cf8:	005a      	lsls	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01b      	beq.n	8004d44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685a      	ldr	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004d2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d36:	3b01      	subs	r3, #1
 8004d38:	035a      	lsls	r2, r3, #13
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
 8004d42:	e007      	b.n	8004d54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	051a      	lsls	r2, r3, #20
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	6899      	ldr	r1, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004d96:	025a      	lsls	r2, r3, #9
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	689a      	ldr	r2, [r3, #8]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6899      	ldr	r1, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	029a      	lsls	r2, r3, #10
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	609a      	str	r2, [r3, #8]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	40012300 	.word	0x40012300
 8004dd4:	0f000001 	.word	0x0f000001

08004dd8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d13c      	bne.n	8004e6c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d12b      	bne.n	8004e64 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d127      	bne.n	8004e64 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d006      	beq.n	8004e30 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d119      	bne.n	8004e64 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0220 	bic.w	r2, r2, #32
 8004e3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d105      	bne.n	8004e64 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5c:	f043 0201 	orr.w	r2, r3, #1
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e64:	68f8      	ldr	r0, [r7, #12]
 8004e66:	f7fb ffe3 	bl	8000e30 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e6a:	e00e      	b.n	8004e8a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	f003 0310 	and.w	r3, r3, #16
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004e78:	68f8      	ldr	r0, [r7, #12]
 8004e7a:	f7ff fd85 	bl	8004988 <HAL_ADC_ErrorCallback>
}
 8004e7e:	e004      	b.n	8004e8a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4798      	blx	r3
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004e92:	b580      	push	{r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004ea0:	68f8      	ldr	r0, [r7, #12]
 8004ea2:	f7ff fd5d 	bl	8004960 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eba:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2240      	movs	r2, #64	; 0x40
 8004ec0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f043 0204 	orr.w	r2, r3, #4
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff fd5a 	bl	8004988 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f00:	4b0c      	ldr	r3, [pc, #48]	; (8004f34 <__NVIC_SetPriorityGrouping+0x44>)
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f22:	4a04      	ldr	r2, [pc, #16]	; (8004f34 <__NVIC_SetPriorityGrouping+0x44>)
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	60d3      	str	r3, [r2, #12]
}
 8004f28:	bf00      	nop
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	e000ed00 	.word	0xe000ed00

08004f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f3c:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <__NVIC_GetPriorityGrouping+0x18>)
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	0a1b      	lsrs	r3, r3, #8
 8004f42:	f003 0307 	and.w	r3, r3, #7
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	e000ed00 	.word	0xe000ed00

08004f54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b083      	sub	sp, #12
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	db0b      	blt.n	8004f7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f66:	79fb      	ldrb	r3, [r7, #7]
 8004f68:	f003 021f 	and.w	r2, r3, #31
 8004f6c:	4907      	ldr	r1, [pc, #28]	; (8004f8c <__NVIC_EnableIRQ+0x38>)
 8004f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	2001      	movs	r0, #1
 8004f76:	fa00 f202 	lsl.w	r2, r0, r2
 8004f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	e000e100 	.word	0xe000e100

08004f90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	4603      	mov	r3, r0
 8004f98:	6039      	str	r1, [r7, #0]
 8004f9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	db0a      	blt.n	8004fba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	b2da      	uxtb	r2, r3
 8004fa8:	490c      	ldr	r1, [pc, #48]	; (8004fdc <__NVIC_SetPriority+0x4c>)
 8004faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fae:	0112      	lsls	r2, r2, #4
 8004fb0:	b2d2      	uxtb	r2, r2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fb8:	e00a      	b.n	8004fd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	4908      	ldr	r1, [pc, #32]	; (8004fe0 <__NVIC_SetPriority+0x50>)
 8004fc0:	79fb      	ldrb	r3, [r7, #7]
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	3b04      	subs	r3, #4
 8004fc8:	0112      	lsls	r2, r2, #4
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	440b      	add	r3, r1
 8004fce:	761a      	strb	r2, [r3, #24]
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr
 8004fdc:	e000e100 	.word	0xe000e100
 8004fe0:	e000ed00 	.word	0xe000ed00

08004fe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b089      	sub	sp, #36	; 0x24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 0307 	and.w	r3, r3, #7
 8004ff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ff8:	69fb      	ldr	r3, [r7, #28]
 8004ffa:	f1c3 0307 	rsb	r3, r3, #7
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	bf28      	it	cs
 8005002:	2304      	movcs	r3, #4
 8005004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3304      	adds	r3, #4
 800500a:	2b06      	cmp	r3, #6
 800500c:	d902      	bls.n	8005014 <NVIC_EncodePriority+0x30>
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	3b03      	subs	r3, #3
 8005012:	e000      	b.n	8005016 <NVIC_EncodePriority+0x32>
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43da      	mvns	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	401a      	ands	r2, r3
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800502c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	43d9      	mvns	r1, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800503c:	4313      	orrs	r3, r2
         );
}
 800503e:	4618      	mov	r0, r3
 8005040:	3724      	adds	r7, #36	; 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
	...

0800504c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	3b01      	subs	r3, #1
 8005058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800505c:	d301      	bcc.n	8005062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800505e:	2301      	movs	r3, #1
 8005060:	e00f      	b.n	8005082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005062:	4a0a      	ldr	r2, [pc, #40]	; (800508c <SysTick_Config+0x40>)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3b01      	subs	r3, #1
 8005068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800506a:	210f      	movs	r1, #15
 800506c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005070:	f7ff ff8e 	bl	8004f90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005074:	4b05      	ldr	r3, [pc, #20]	; (800508c <SysTick_Config+0x40>)
 8005076:	2200      	movs	r2, #0
 8005078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800507a:	4b04      	ldr	r3, [pc, #16]	; (800508c <SysTick_Config+0x40>)
 800507c:	2207      	movs	r2, #7
 800507e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	e000e010 	.word	0xe000e010

08005090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ff29 	bl	8004ef0 <__NVIC_SetPriorityGrouping>
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b086      	sub	sp, #24
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	4603      	mov	r3, r0
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	607a      	str	r2, [r7, #4]
 80050b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050b8:	f7ff ff3e 	bl	8004f38 <__NVIC_GetPriorityGrouping>
 80050bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	6978      	ldr	r0, [r7, #20]
 80050c4:	f7ff ff8e 	bl	8004fe4 <NVIC_EncodePriority>
 80050c8:	4602      	mov	r2, r0
 80050ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050ce:	4611      	mov	r1, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff ff5d 	bl	8004f90 <__NVIC_SetPriority>
}
 80050d6:	bf00      	nop
 80050d8:	3718      	adds	r7, #24
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	4603      	mov	r3, r0
 80050e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7ff ff31 	bl	8004f54 <__NVIC_EnableIRQ>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b082      	sub	sp, #8
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff ffa2 	bl	800504c <SysTick_Config>
 8005108:	4603      	mov	r3, r0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b086      	sub	sp, #24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005120:	f7ff f8c4 	bl	80042ac <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e099      	b.n	8005264 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f022 0201 	bic.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005150:	e00f      	b.n	8005172 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005152:	f7ff f8ab 	bl	80042ac <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b05      	cmp	r3, #5
 800515e:	d908      	bls.n	8005172 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2203      	movs	r2, #3
 800516a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e078      	b.n	8005264 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e8      	bne.n	8005152 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	4b38      	ldr	r3, [pc, #224]	; (800526c <HAL_DMA_Init+0x158>)
 800518c:	4013      	ands	r3, r2
 800518e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800519e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80051aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80051b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80051be:	697a      	ldr	r2, [r7, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d107      	bne.n	80051dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d4:	4313      	orrs	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0307 	bic.w	r3, r3, #7
 80051f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b04      	cmp	r3, #4
 8005204:	d117      	bne.n	8005236 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00e      	beq.n	8005236 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fb0d 	bl	8005838 <DMA_CheckFifoParam>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d008      	beq.n	8005236 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2240      	movs	r2, #64	; 0x40
 8005228:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005232:	2301      	movs	r3, #1
 8005234:	e016      	b.n	8005264 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fac4 	bl	80057cc <DMA_CalcBaseAndBitshift>
 8005244:	4603      	mov	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800524c:	223f      	movs	r2, #63	; 0x3f
 800524e:	409a      	lsls	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2200      	movs	r2, #0
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	f010803f 	.word	0xf010803f

08005270 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	60f8      	str	r0, [r7, #12]
 8005278:	60b9      	str	r1, [r7, #8]
 800527a:	607a      	str	r2, [r7, #4]
 800527c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005286:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_DMA_Start_IT+0x26>
 8005292:	2302      	movs	r3, #2
 8005294:	e040      	b.n	8005318 <HAL_DMA_Start_IT+0xa8>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d12f      	bne.n	800530a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2202      	movs	r2, #2
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2200      	movs	r2, #0
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 fa56 	bl	8005770 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c8:	223f      	movs	r2, #63	; 0x3f
 80052ca:	409a      	lsls	r2, r3
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f042 0216 	orr.w	r2, r2, #22
 80052de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0208 	orr.w	r2, r2, #8
 80052f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e005      	b.n	8005316 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005312:	2302      	movs	r3, #2
 8005314:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005316:	7dfb      	ldrb	r3, [r7, #23]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b084      	sub	sp, #16
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800532e:	f7fe ffbd 	bl	80042ac <HAL_GetTick>
 8005332:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d008      	beq.n	8005352 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2280      	movs	r2, #128	; 0x80
 8005344:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e052      	b.n	80053f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0216 	bic.w	r2, r2, #22
 8005360:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005370:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <HAL_DMA_Abort+0x62>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800537e:	2b00      	cmp	r3, #0
 8005380:	d007      	beq.n	8005392 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f022 0208 	bic.w	r2, r2, #8
 8005390:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053a2:	e013      	b.n	80053cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053a4:	f7fe ff82 	bl	80042ac <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d90c      	bls.n	80053cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2203      	movs	r2, #3
 80053bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e015      	b.n	80053f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e4      	bne.n	80053a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053de:	223f      	movs	r2, #63	; 0x3f
 80053e0:	409a      	lsls	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b02      	cmp	r3, #2
 8005412:	d004      	beq.n	800541e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2280      	movs	r2, #128	; 0x80
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e00c      	b.n	8005438 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2205      	movs	r2, #5
 8005422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005450:	4b92      	ldr	r3, [pc, #584]	; (800569c <HAL_DMA_IRQHandler+0x258>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a92      	ldr	r2, [pc, #584]	; (80056a0 <HAL_DMA_IRQHandler+0x25c>)
 8005456:	fba2 2303 	umull	r2, r3, r2, r3
 800545a:	0a9b      	lsrs	r3, r3, #10
 800545c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005462:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	2208      	movs	r2, #8
 8005470:	409a      	lsls	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4013      	ands	r3, r2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d01a      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f003 0304 	and.w	r3, r3, #4
 8005484:	2b00      	cmp	r3, #0
 8005486:	d013      	beq.n	80054b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800549c:	2208      	movs	r2, #8
 800549e:	409a      	lsls	r2, r3
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a8:	f043 0201 	orr.w	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054b4:	2201      	movs	r2, #1
 80054b6:	409a      	lsls	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4013      	ands	r3, r2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d012      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d2:	2201      	movs	r2, #1
 80054d4:	409a      	lsls	r2, r3
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	f043 0202 	orr.w	r2, r3, #2
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ea:	2204      	movs	r2, #4
 80054ec:	409a      	lsls	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d012      	beq.n	800551c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00b      	beq.n	800551c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005508:	2204      	movs	r2, #4
 800550a:	409a      	lsls	r2, r3
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005514:	f043 0204 	orr.w	r2, r3, #4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005520:	2210      	movs	r2, #16
 8005522:	409a      	lsls	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4013      	ands	r3, r2
 8005528:	2b00      	cmp	r3, #0
 800552a:	d043      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d03c      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800553e:	2210      	movs	r2, #16
 8005540:	409a      	lsls	r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d018      	beq.n	8005586 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d108      	bne.n	8005574 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d024      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
 8005572:	e01f      	b.n	80055b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005578:	2b00      	cmp	r3, #0
 800557a:	d01b      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	4798      	blx	r3
 8005584:	e016      	b.n	80055b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005590:	2b00      	cmp	r3, #0
 8005592:	d107      	bne.n	80055a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f022 0208 	bic.w	r2, r2, #8
 80055a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b8:	2220      	movs	r2, #32
 80055ba:	409a      	lsls	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4013      	ands	r3, r2
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 808e 	beq.w	80056e2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f000 8086 	beq.w	80056e2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055da:	2220      	movs	r2, #32
 80055dc:	409a      	lsls	r2, r3
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d136      	bne.n	800565c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0216 	bic.w	r2, r2, #22
 80055fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800560c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	2b00      	cmp	r3, #0
 8005614:	d103      	bne.n	800561e <HAL_DMA_IRQHandler+0x1da>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800561a:	2b00      	cmp	r3, #0
 800561c:	d007      	beq.n	800562e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0208 	bic.w	r2, r2, #8
 800562c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005632:	223f      	movs	r2, #63	; 0x3f
 8005634:	409a      	lsls	r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800564e:	2b00      	cmp	r3, #0
 8005650:	d07d      	beq.n	800574e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	4798      	blx	r3
        }
        return;
 800565a:	e078      	b.n	800574e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d01c      	beq.n	80056a4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d108      	bne.n	800568a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567c:	2b00      	cmp	r3, #0
 800567e:	d030      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	4798      	blx	r3
 8005688:	e02b      	b.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800568e:	2b00      	cmp	r3, #0
 8005690:	d027      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
 800569a:	e022      	b.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
 800569c:	20000198 	.word	0x20000198
 80056a0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10f      	bne.n	80056d2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f022 0210 	bic.w	r2, r2, #16
 80056c0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d003      	beq.n	80056e2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d032      	beq.n	8005750 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d022      	beq.n	800573c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2205      	movs	r2, #5
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0201 	bic.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	3301      	adds	r3, #1
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	429a      	cmp	r2, r3
 8005718:	d307      	bcc.n	800572a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0301 	and.w	r3, r3, #1
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1f2      	bne.n	800570e <HAL_DMA_IRQHandler+0x2ca>
 8005728:	e000      	b.n	800572c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800572a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	4798      	blx	r3
 800574c:	e000      	b.n	8005750 <HAL_DMA_IRQHandler+0x30c>
        return;
 800574e:	bf00      	nop
    }
  }
}
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop

08005758 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8005764:	4618      	mov	r0, r3
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005770:	b480      	push	{r7}
 8005772:	b085      	sub	sp, #20
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
 800577c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800578c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b40      	cmp	r3, #64	; 0x40
 800579c:	d108      	bne.n	80057b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80057ae:	e007      	b.n	80057c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	60da      	str	r2, [r3, #12]
}
 80057c0:	bf00      	nop
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	3b10      	subs	r3, #16
 80057dc:	4a14      	ldr	r2, [pc, #80]	; (8005830 <DMA_CalcBaseAndBitshift+0x64>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	091b      	lsrs	r3, r3, #4
 80057e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <DMA_CalcBaseAndBitshift+0x68>)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d909      	bls.n	800580e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005802:	f023 0303 	bic.w	r3, r3, #3
 8005806:	1d1a      	adds	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	659a      	str	r2, [r3, #88]	; 0x58
 800580c:	e007      	b.n	800581e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005816:	f023 0303 	bic.w	r3, r3, #3
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005822:	4618      	mov	r0, r3
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	aaaaaaab 	.word	0xaaaaaaab
 8005834:	0801170c 	.word	0x0801170c

08005838 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11f      	bne.n	8005892 <DMA_CheckFifoParam+0x5a>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b03      	cmp	r3, #3
 8005856:	d856      	bhi.n	8005906 <DMA_CheckFifoParam+0xce>
 8005858:	a201      	add	r2, pc, #4	; (adr r2, 8005860 <DMA_CheckFifoParam+0x28>)
 800585a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800585e:	bf00      	nop
 8005860:	08005871 	.word	0x08005871
 8005864:	08005883 	.word	0x08005883
 8005868:	08005871 	.word	0x08005871
 800586c:	08005907 	.word	0x08005907
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005874:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d046      	beq.n	800590a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005880:	e043      	b.n	800590a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800588a:	d140      	bne.n	800590e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005890:	e03d      	b.n	800590e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	699b      	ldr	r3, [r3, #24]
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589a:	d121      	bne.n	80058e0 <DMA_CheckFifoParam+0xa8>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b03      	cmp	r3, #3
 80058a0:	d837      	bhi.n	8005912 <DMA_CheckFifoParam+0xda>
 80058a2:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <DMA_CheckFifoParam+0x70>)
 80058a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a8:	080058b9 	.word	0x080058b9
 80058ac:	080058bf 	.word	0x080058bf
 80058b0:	080058b9 	.word	0x080058b9
 80058b4:	080058d1 	.word	0x080058d1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      break;
 80058bc:	e030      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d025      	beq.n	8005916 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ce:	e022      	b.n	8005916 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058d8:	d11f      	bne.n	800591a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058de:	e01c      	b.n	800591a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	2b02      	cmp	r3, #2
 80058e4:	d903      	bls.n	80058ee <DMA_CheckFifoParam+0xb6>
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d003      	beq.n	80058f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058ec:	e018      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      break;
 80058f2:	e015      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00e      	beq.n	800591e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      break;
 8005904:	e00b      	b.n	800591e <DMA_CheckFifoParam+0xe6>
      break;
 8005906:	bf00      	nop
 8005908:	e00a      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 800590a:	bf00      	nop
 800590c:	e008      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 800590e:	bf00      	nop
 8005910:	e006      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 8005912:	bf00      	nop
 8005914:	e004      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 8005916:	bf00      	nop
 8005918:	e002      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;   
 800591a:	bf00      	nop
 800591c:	e000      	b.n	8005920 <DMA_CheckFifoParam+0xe8>
      break;
 800591e:	bf00      	nop
    }
  } 
  
  return status; 
 8005920:	7bfb      	ldrb	r3, [r7, #15]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop

08005930 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005942:	4b23      	ldr	r3, [pc, #140]	; (80059d0 <HAL_FLASH_Program+0xa0>)
 8005944:	7e1b      	ldrb	r3, [r3, #24]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_FLASH_Program+0x1e>
 800594a:	2302      	movs	r3, #2
 800594c:	e03b      	b.n	80059c6 <HAL_FLASH_Program+0x96>
 800594e:	4b20      	ldr	r3, [pc, #128]	; (80059d0 <HAL_FLASH_Program+0xa0>)
 8005950:	2201      	movs	r2, #1
 8005952:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005954:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005958:	f000 f870 	bl	8005a3c <FLASH_WaitForLastOperation>
 800595c:	4603      	mov	r3, r0
 800595e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d12b      	bne.n	80059be <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800596c:	783b      	ldrb	r3, [r7, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	68b8      	ldr	r0, [r7, #8]
 8005972:	f000 f91b 	bl	8005bac <FLASH_Program_Byte>
 8005976:	e016      	b.n	80059a6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800597e:	883b      	ldrh	r3, [r7, #0]
 8005980:	4619      	mov	r1, r3
 8005982:	68b8      	ldr	r0, [r7, #8]
 8005984:	f000 f8ee 	bl	8005b64 <FLASH_Program_HalfWord>
 8005988:	e00d      	b.n	80059a6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d105      	bne.n	800599c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	4619      	mov	r1, r3
 8005994:	68b8      	ldr	r0, [r7, #8]
 8005996:	f000 f8c3 	bl	8005b20 <FLASH_Program_Word>
 800599a:	e004      	b.n	80059a6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800599c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059a0:	68b8      	ldr	r0, [r7, #8]
 80059a2:	f000 f88b 	bl	8005abc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80059a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80059aa:	f000 f847 	bl	8005a3c <FLASH_WaitForLastOperation>
 80059ae:	4603      	mov	r3, r0
 80059b0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80059b2:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <HAL_FLASH_Program+0xa4>)
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	4a07      	ldr	r2, [pc, #28]	; (80059d4 <HAL_FLASH_Program+0xa4>)
 80059b8:	f023 0301 	bic.w	r3, r3, #1
 80059bc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80059be:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <HAL_FLASH_Program+0xa0>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80059c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3718      	adds	r7, #24
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20001440 	.word	0x20001440
 80059d4:	40023c00 	.word	0x40023c00

080059d8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80059e2:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_FLASH_Unlock+0x38>)
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	da0b      	bge.n	8005a02 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80059ea:	4b09      	ldr	r3, [pc, #36]	; (8005a10 <HAL_FLASH_Unlock+0x38>)
 80059ec:	4a09      	ldr	r2, [pc, #36]	; (8005a14 <HAL_FLASH_Unlock+0x3c>)
 80059ee:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <HAL_FLASH_Unlock+0x38>)
 80059f2:	4a09      	ldr	r2, [pc, #36]	; (8005a18 <HAL_FLASH_Unlock+0x40>)
 80059f4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <HAL_FLASH_Unlock+0x38>)
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	da01      	bge.n	8005a02 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005a02:	79fb      	ldrb	r3, [r7, #7]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	40023c00 	.word	0x40023c00
 8005a14:	45670123 	.word	0x45670123
 8005a18:	cdef89ab 	.word	0xcdef89ab

08005a1c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005a20:	4b05      	ldr	r3, [pc, #20]	; (8005a38 <HAL_FLASH_Lock+0x1c>)
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	4a04      	ldr	r2, [pc, #16]	; (8005a38 <HAL_FLASH_Lock+0x1c>)
 8005a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a2a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	40023c00 	.word	0x40023c00

08005a3c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005a48:	4b1a      	ldr	r3, [pc, #104]	; (8005ab4 <FLASH_WaitForLastOperation+0x78>)
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005a4e:	f7fe fc2d 	bl	80042ac <HAL_GetTick>
 8005a52:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005a54:	e010      	b.n	8005a78 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5c:	d00c      	beq.n	8005a78 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d007      	beq.n	8005a74 <FLASH_WaitForLastOperation+0x38>
 8005a64:	f7fe fc22 	bl	80042ac <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d201      	bcs.n	8005a78 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005a74:	2303      	movs	r3, #3
 8005a76:	e019      	b.n	8005aac <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005a78:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <FLASH_WaitForLastOperation+0x7c>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1e8      	bne.n	8005a56 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005a84:	4b0c      	ldr	r3, [pc, #48]	; (8005ab8 <FLASH_WaitForLastOperation+0x7c>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005a90:	4b09      	ldr	r3, [pc, #36]	; (8005ab8 <FLASH_WaitForLastOperation+0x7c>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8005a96:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <FLASH_WaitForLastOperation+0x7c>)
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005aa2:	f000 f8a5 	bl	8005bf0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e000      	b.n	8005aac <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
  
}  
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20001440 	.word	0x20001440
 8005ab8:	40023c00 	.word	0x40023c00

08005abc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b085      	sub	sp, #20
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005ac8:	4b14      	ldr	r3, [pc, #80]	; (8005b1c <FLASH_Program_DoubleWord+0x60>)
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <FLASH_Program_DoubleWord+0x60>)
 8005ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ad2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005ad4:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <FLASH_Program_DoubleWord+0x60>)
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	4a10      	ldr	r2, [pc, #64]	; (8005b1c <FLASH_Program_DoubleWord+0x60>)
 8005ada:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005ade:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005ae0:	4b0e      	ldr	r3, [pc, #56]	; (8005b1c <FLASH_Program_DoubleWord+0x60>)
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	4a0d      	ldr	r2, [pc, #52]	; (8005b1c <FLASH_Program_DoubleWord+0x60>)
 8005ae6:	f043 0301 	orr.w	r3, r3, #1
 8005aea:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	683a      	ldr	r2, [r7, #0]
 8005af0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005af2:	f3bf 8f6f 	isb	sy
}
 8005af6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005af8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	000a      	movs	r2, r1
 8005b06:	2300      	movs	r3, #0
 8005b08:	68f9      	ldr	r1, [r7, #12]
 8005b0a:	3104      	adds	r1, #4
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	600b      	str	r3, [r1, #0]
}
 8005b10:	bf00      	nop
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr
 8005b1c:	40023c00 	.word	0x40023c00

08005b20 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b2a:	4b0d      	ldr	r3, [pc, #52]	; (8005b60 <FLASH_Program_Word+0x40>)
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	4a0c      	ldr	r2, [pc, #48]	; (8005b60 <FLASH_Program_Word+0x40>)
 8005b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005b36:	4b0a      	ldr	r3, [pc, #40]	; (8005b60 <FLASH_Program_Word+0x40>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <FLASH_Program_Word+0x40>)
 8005b3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b42:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <FLASH_Program_Word+0x40>)
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <FLASH_Program_Word+0x40>)
 8005b48:	f043 0301 	orr.w	r3, r3, #1
 8005b4c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	601a      	str	r2, [r3, #0]
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	40023c00 	.word	0x40023c00

08005b64 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005b70:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <FLASH_Program_HalfWord+0x44>)
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	4a0c      	ldr	r2, [pc, #48]	; (8005ba8 <FLASH_Program_HalfWord+0x44>)
 8005b76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <FLASH_Program_HalfWord+0x44>)
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	4a09      	ldr	r2, [pc, #36]	; (8005ba8 <FLASH_Program_HalfWord+0x44>)
 8005b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005b88:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <FLASH_Program_HalfWord+0x44>)
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	4a06      	ldr	r2, [pc, #24]	; (8005ba8 <FLASH_Program_HalfWord+0x44>)
 8005b8e:	f043 0301 	orr.w	r3, r3, #1
 8005b92:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	887a      	ldrh	r2, [r7, #2]
 8005b98:	801a      	strh	r2, [r3, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop
 8005ba8:	40023c00 	.word	0x40023c00

08005bac <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <FLASH_Program_Byte+0x40>)
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	4a0b      	ldr	r2, [pc, #44]	; (8005bec <FLASH_Program_Byte+0x40>)
 8005bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bc2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <FLASH_Program_Byte+0x40>)
 8005bc6:	4a09      	ldr	r2, [pc, #36]	; (8005bec <FLASH_Program_Byte+0x40>)
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005bcc:	4b07      	ldr	r3, [pc, #28]	; (8005bec <FLASH_Program_Byte+0x40>)
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	4a06      	ldr	r2, [pc, #24]	; (8005bec <FLASH_Program_Byte+0x40>)
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	78fa      	ldrb	r2, [r7, #3]
 8005bdc:	701a      	strb	r2, [r3, #0]
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
 8005bea:	bf00      	nop
 8005bec:	40023c00 	.word	0x40023c00

08005bf0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005bf4:	4b2f      	ldr	r3, [pc, #188]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d008      	beq.n	8005c12 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005c00:	4b2d      	ldr	r3, [pc, #180]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f043 0310 	orr.w	r3, r3, #16
 8005c08:	4a2b      	ldr	r2, [pc, #172]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c0a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005c0c:	4b29      	ldr	r3, [pc, #164]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c0e:	2210      	movs	r2, #16
 8005c10:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005c12:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d008      	beq.n	8005c30 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005c1e:	4b26      	ldr	r3, [pc, #152]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	f043 0308 	orr.w	r3, r3, #8
 8005c26:	4a24      	ldr	r2, [pc, #144]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c28:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005c2a:	4b22      	ldr	r3, [pc, #136]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005c30:	4b20      	ldr	r3, [pc, #128]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d008      	beq.n	8005c4e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005c3c:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c3e:	69db      	ldr	r3, [r3, #28]
 8005c40:	f043 0304 	orr.w	r3, r3, #4
 8005c44:	4a1c      	ldr	r2, [pc, #112]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c46:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8005c48:	4b1a      	ldr	r3, [pc, #104]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c4a:	2240      	movs	r2, #64	; 0x40
 8005c4c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8005c4e:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d008      	beq.n	8005c6c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8005c5a:	4b17      	ldr	r3, [pc, #92]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	f043 0302 	orr.w	r3, r3, #2
 8005c62:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c64:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8005c66:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c68:	2280      	movs	r2, #128	; 0x80
 8005c6a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8005c6c:	4b11      	ldr	r3, [pc, #68]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d009      	beq.n	8005c8c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	f043 0301 	orr.w	r3, r3, #1
 8005c80:	4a0d      	ldr	r2, [pc, #52]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c82:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8005c84:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c8a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005c8c:	4b09      	ldr	r3, [pc, #36]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d008      	beq.n	8005caa <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005c98:	4b07      	ldr	r3, [pc, #28]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f043 0320 	orr.w	r3, r3, #32
 8005ca0:	4a05      	ldr	r2, [pc, #20]	; (8005cb8 <FLASH_SetErrorCode+0xc8>)
 8005ca2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8005ca4:	4b03      	ldr	r3, [pc, #12]	; (8005cb4 <FLASH_SetErrorCode+0xc4>)
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	60da      	str	r2, [r3, #12]
  }
}
 8005caa:	bf00      	nop
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	40023c00 	.word	0x40023c00
 8005cb8:	20001440 	.word	0x20001440

08005cbc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005cce:	4b31      	ldr	r3, [pc, #196]	; (8005d94 <HAL_FLASHEx_Erase+0xd8>)
 8005cd0:	7e1b      	ldrb	r3, [r3, #24]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <HAL_FLASHEx_Erase+0x1e>
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	e058      	b.n	8005d8c <HAL_FLASHEx_Erase+0xd0>
 8005cda:	4b2e      	ldr	r3, [pc, #184]	; (8005d94 <HAL_FLASHEx_Erase+0xd8>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005ce0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005ce4:	f7ff feaa 	bl	8005a3c <FLASH_WaitForLastOperation>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d148      	bne.n	8005d84 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cf8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d115      	bne.n	8005d2e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f000 f844 	bl	8005d9c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d14:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d18:	f7ff fe90 	bl	8005a3c <FLASH_WaitForLastOperation>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005d20:	4b1d      	ldr	r3, [pc, #116]	; (8005d98 <HAL_FLASHEx_Erase+0xdc>)
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	4a1c      	ldr	r2, [pc, #112]	; (8005d98 <HAL_FLASHEx_Erase+0xdc>)
 8005d26:	f023 0304 	bic.w	r3, r3, #4
 8005d2a:	6113      	str	r3, [r2, #16]
 8005d2c:	e028      	b.n	8005d80 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	60bb      	str	r3, [r7, #8]
 8005d34:	e01c      	b.n	8005d70 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	68b8      	ldr	r0, [r7, #8]
 8005d40:	f000 f850 	bl	8005de4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005d44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005d48:	f7ff fe78 	bl	8005a3c <FLASH_WaitForLastOperation>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8005d50:	4b11      	ldr	r3, [pc, #68]	; (8005d98 <HAL_FLASHEx_Erase+0xdc>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	4a10      	ldr	r2, [pc, #64]	; (8005d98 <HAL_FLASHEx_Erase+0xdc>)
 8005d56:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8005d5a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	601a      	str	r2, [r3, #0]
          break;
 8005d68:	e00a      	b.n	8005d80 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	60bb      	str	r3, [r7, #8]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	4413      	add	r3, r2
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d3da      	bcc.n	8005d36 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8005d80:	f000 f878 	bl	8005e74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005d84:	4b03      	ldr	r3, [pc, #12]	; (8005d94 <HAL_FLASHEx_Erase+0xd8>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	761a      	strb	r2, [r3, #24]

  return status;
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20001440 	.word	0x20001440
 8005d98:	40023c00 	.word	0x40023c00

08005d9c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	4603      	mov	r3, r0
 8005da4:	6039      	str	r1, [r7, #0]
 8005da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005da8:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <FLASH_MassErase+0x44>)
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	4a0c      	ldr	r2, [pc, #48]	; (8005de0 <FLASH_MassErase+0x44>)
 8005dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005db2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8005db4:	4b0a      	ldr	r3, [pc, #40]	; (8005de0 <FLASH_MassErase+0x44>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	4a09      	ldr	r2, [pc, #36]	; (8005de0 <FLASH_MassErase+0x44>)
 8005dba:	f043 0304 	orr.w	r3, r3, #4
 8005dbe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <FLASH_MassErase+0x44>)
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	4a05      	ldr	r2, [pc, #20]	; (8005de0 <FLASH_MassErase+0x44>)
 8005dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd0:	6113      	str	r3, [r2, #16]
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	40023c00 	.word	0x40023c00

08005de4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	60fb      	str	r3, [r7, #12]
 8005dfe:	e010      	b.n	8005e22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d103      	bne.n	8005e0e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005e06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e009      	b.n	8005e22 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8005e0e:	78fb      	ldrb	r3, [r7, #3]
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d103      	bne.n	8005e1c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005e14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e18:	60fb      	str	r3, [r7, #12]
 8005e1a:	e002      	b.n	8005e22 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8005e1c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e20:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005e22:	4b13      	ldr	r3, [pc, #76]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8005e2e:	4b10      	ldr	r3, [pc, #64]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e30:	691a      	ldr	r2, [r3, #16]
 8005e32:	490f      	ldr	r1, [pc, #60]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	4a0c      	ldr	r2, [pc, #48]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e40:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005e44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005e46:	4b0a      	ldr	r3, [pc, #40]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e48:	691a      	ldr	r2, [r3, #16]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	4a07      	ldr	r2, [pc, #28]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e52:	f043 0302 	orr.w	r3, r3, #2
 8005e56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005e58:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	4a04      	ldr	r2, [pc, #16]	; (8005e70 <FLASH_Erase_Sector+0x8c>)
 8005e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e62:	6113      	str	r3, [r2, #16]
}
 8005e64:	bf00      	nop
 8005e66:	3714      	adds	r7, #20
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr
 8005e70:	40023c00 	.word	0x40023c00

08005e74 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8005e74:	b480      	push	{r7}
 8005e76:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8005e78:	4b20      	ldr	r3, [pc, #128]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d017      	beq.n	8005eb4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8005e84:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005e8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e8e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8005e90:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a19      	ldr	r2, [pc, #100]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005e96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	4b17      	ldr	r3, [pc, #92]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a16      	ldr	r2, [pc, #88]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005ea2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ea6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ea8:	4b14      	ldr	r3, [pc, #80]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a13      	ldr	r2, [pc, #76]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eb2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8005eb4:	4b11      	ldr	r3, [pc, #68]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d017      	beq.n	8005ef0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a0d      	ldr	r2, [pc, #52]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005ec6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005eca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005ed2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	4b08      	ldr	r3, [pc, #32]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a07      	ldr	r2, [pc, #28]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ee2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a04      	ldr	r2, [pc, #16]	; (8005efc <FLASH_FlushCaches+0x88>)
 8005eea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005eee:	6013      	str	r3, [r2, #0]
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40023c00 	.word	0x40023c00

08005f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b089      	sub	sp, #36	; 0x24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
 8005f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f12:	2300      	movs	r3, #0
 8005f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f16:	2300      	movs	r3, #0
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e165      	b.n	80061e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	f040 8154 	bne.w	80061e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f003 0303 	and.w	r3, r3, #3
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d005      	beq.n	8005f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d130      	bne.n	8005fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	2203      	movs	r2, #3
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	4013      	ands	r3, r2
 8005f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	005b      	lsls	r3, r3, #1
 8005f72:	fa02 f303 	lsl.w	r3, r2, r3
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f88:	2201      	movs	r2, #1
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f90:	43db      	mvns	r3, r3
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	4013      	ands	r3, r2
 8005f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	f003 0201 	and.w	r2, r3, #1
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa8:	69ba      	ldr	r2, [r7, #24]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	f003 0303 	and.w	r3, r3, #3
 8005fbc:	2b03      	cmp	r3, #3
 8005fbe:	d017      	beq.n	8005ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	2203      	movs	r2, #3
 8005fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	69ba      	ldr	r2, [r7, #24]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	69ba      	ldr	r2, [r7, #24]
 8005fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d123      	bne.n	8006044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	08da      	lsrs	r2, r3, #3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	3208      	adds	r2, #8
 8006004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	f003 0307 	and.w	r3, r3, #7
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	220f      	movs	r2, #15
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	691a      	ldr	r2, [r3, #16]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	fa02 f303 	lsl.w	r3, r2, r3
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	08da      	lsrs	r2, r3, #3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3208      	adds	r2, #8
 800603e:	69b9      	ldr	r1, [r7, #24]
 8006040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	2203      	movs	r2, #3
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	43db      	mvns	r3, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4013      	ands	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f003 0203 	and.w	r2, r3, #3
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4313      	orrs	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 80ae 	beq.w	80061e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	4b5d      	ldr	r3, [pc, #372]	; (8006200 <HAL_GPIO_Init+0x300>)
 800608c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608e:	4a5c      	ldr	r2, [pc, #368]	; (8006200 <HAL_GPIO_Init+0x300>)
 8006090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006094:	6453      	str	r3, [r2, #68]	; 0x44
 8006096:	4b5a      	ldr	r3, [pc, #360]	; (8006200 <HAL_GPIO_Init+0x300>)
 8006098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800609a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800609e:	60fb      	str	r3, [r7, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060a2:	4a58      	ldr	r2, [pc, #352]	; (8006204 <HAL_GPIO_Init+0x304>)
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	089b      	lsrs	r3, r3, #2
 80060a8:	3302      	adds	r3, #2
 80060aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f003 0303 	and.w	r3, r3, #3
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	220f      	movs	r2, #15
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43db      	mvns	r3, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4013      	ands	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a4f      	ldr	r2, [pc, #316]	; (8006208 <HAL_GPIO_Init+0x308>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d025      	beq.n	800611a <HAL_GPIO_Init+0x21a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a4e      	ldr	r2, [pc, #312]	; (800620c <HAL_GPIO_Init+0x30c>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d01f      	beq.n	8006116 <HAL_GPIO_Init+0x216>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a4d      	ldr	r2, [pc, #308]	; (8006210 <HAL_GPIO_Init+0x310>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d019      	beq.n	8006112 <HAL_GPIO_Init+0x212>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a4c      	ldr	r2, [pc, #304]	; (8006214 <HAL_GPIO_Init+0x314>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d013      	beq.n	800610e <HAL_GPIO_Init+0x20e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a4b      	ldr	r2, [pc, #300]	; (8006218 <HAL_GPIO_Init+0x318>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00d      	beq.n	800610a <HAL_GPIO_Init+0x20a>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a4a      	ldr	r2, [pc, #296]	; (800621c <HAL_GPIO_Init+0x31c>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d007      	beq.n	8006106 <HAL_GPIO_Init+0x206>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	4a49      	ldr	r2, [pc, #292]	; (8006220 <HAL_GPIO_Init+0x320>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d101      	bne.n	8006102 <HAL_GPIO_Init+0x202>
 80060fe:	2306      	movs	r3, #6
 8006100:	e00c      	b.n	800611c <HAL_GPIO_Init+0x21c>
 8006102:	2307      	movs	r3, #7
 8006104:	e00a      	b.n	800611c <HAL_GPIO_Init+0x21c>
 8006106:	2305      	movs	r3, #5
 8006108:	e008      	b.n	800611c <HAL_GPIO_Init+0x21c>
 800610a:	2304      	movs	r3, #4
 800610c:	e006      	b.n	800611c <HAL_GPIO_Init+0x21c>
 800610e:	2303      	movs	r3, #3
 8006110:	e004      	b.n	800611c <HAL_GPIO_Init+0x21c>
 8006112:	2302      	movs	r3, #2
 8006114:	e002      	b.n	800611c <HAL_GPIO_Init+0x21c>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <HAL_GPIO_Init+0x21c>
 800611a:	2300      	movs	r3, #0
 800611c:	69fa      	ldr	r2, [r7, #28]
 800611e:	f002 0203 	and.w	r2, r2, #3
 8006122:	0092      	lsls	r2, r2, #2
 8006124:	4093      	lsls	r3, r2
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800612c:	4935      	ldr	r1, [pc, #212]	; (8006204 <HAL_GPIO_Init+0x304>)
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	089b      	lsrs	r3, r3, #2
 8006132:	3302      	adds	r3, #2
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800613a:	4b3a      	ldr	r3, [pc, #232]	; (8006224 <HAL_GPIO_Init+0x324>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	43db      	mvns	r3, r3
 8006144:	69ba      	ldr	r2, [r7, #24]
 8006146:	4013      	ands	r3, r2
 8006148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d003      	beq.n	800615e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800615e:	4a31      	ldr	r2, [pc, #196]	; (8006224 <HAL_GPIO_Init+0x324>)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006164:	4b2f      	ldr	r3, [pc, #188]	; (8006224 <HAL_GPIO_Init+0x324>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	43db      	mvns	r3, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d003      	beq.n	8006188 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006188:	4a26      	ldr	r2, [pc, #152]	; (8006224 <HAL_GPIO_Init+0x324>)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800618e:	4b25      	ldr	r3, [pc, #148]	; (8006224 <HAL_GPIO_Init+0x324>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	43db      	mvns	r3, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061b2:	4a1c      	ldr	r2, [pc, #112]	; (8006224 <HAL_GPIO_Init+0x324>)
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061b8:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <HAL_GPIO_Init+0x324>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061dc:	4a11      	ldr	r2, [pc, #68]	; (8006224 <HAL_GPIO_Init+0x324>)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	3301      	adds	r3, #1
 80061e6:	61fb      	str	r3, [r7, #28]
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	2b0f      	cmp	r3, #15
 80061ec:	f67f ae96 	bls.w	8005f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	3724      	adds	r7, #36	; 0x24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40023800 	.word	0x40023800
 8006204:	40013800 	.word	0x40013800
 8006208:	40020000 	.word	0x40020000
 800620c:	40020400 	.word	0x40020400
 8006210:	40020800 	.word	0x40020800
 8006214:	40020c00 	.word	0x40020c00
 8006218:	40021000 	.word	0x40021000
 800621c:	40021400 	.word	0x40021400
 8006220:	40021800 	.word	0x40021800
 8006224:	40013c00 	.word	0x40013c00

08006228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	887b      	ldrh	r3, [r7, #2]
 800623a:	4013      	ands	r3, r2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006240:	2301      	movs	r3, #1
 8006242:	73fb      	strb	r3, [r7, #15]
 8006244:	e001      	b.n	800624a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006246:	2300      	movs	r3, #0
 8006248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800624a:	7bfb      	ldrb	r3, [r7, #15]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
 8006264:	4613      	mov	r3, r2
 8006266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006268:	787b      	ldrb	r3, [r7, #1]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800626e:	887a      	ldrh	r2, [r7, #2]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006274:	e003      	b.n	800627e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006276:	887b      	ldrh	r3, [r7, #2]
 8006278:	041a      	lsls	r2, r3, #16
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	619a      	str	r2, [r3, #24]
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr

0800628a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
 8006292:	460b      	mov	r3, r1
 8006294:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800629c:	887a      	ldrh	r2, [r7, #2]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	4013      	ands	r3, r2
 80062a2:	041a      	lsls	r2, r3, #16
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	43d9      	mvns	r1, r3
 80062a8:	887b      	ldrh	r3, [r7, #2]
 80062aa:	400b      	ands	r3, r1
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	619a      	str	r2, [r3, #24]
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
	...

080062c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e12b      	b.n	800652a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d106      	bne.n	80062ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7fc fde4 	bl	8002eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2224      	movs	r2, #36	; 0x24
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f022 0201 	bic.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006312:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006322:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006324:	f002 f9e0 	bl	80086e8 <HAL_RCC_GetPCLK1Freq>
 8006328:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4a81      	ldr	r2, [pc, #516]	; (8006534 <HAL_I2C_Init+0x274>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d807      	bhi.n	8006344 <HAL_I2C_Init+0x84>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4a80      	ldr	r2, [pc, #512]	; (8006538 <HAL_I2C_Init+0x278>)
 8006338:	4293      	cmp	r3, r2
 800633a:	bf94      	ite	ls
 800633c:	2301      	movls	r3, #1
 800633e:	2300      	movhi	r3, #0
 8006340:	b2db      	uxtb	r3, r3
 8006342:	e006      	b.n	8006352 <HAL_I2C_Init+0x92>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4a7d      	ldr	r2, [pc, #500]	; (800653c <HAL_I2C_Init+0x27c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	bf94      	ite	ls
 800634c:	2301      	movls	r3, #1
 800634e:	2300      	movhi	r3, #0
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d001      	beq.n	800635a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e0e7      	b.n	800652a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4a78      	ldr	r2, [pc, #480]	; (8006540 <HAL_I2C_Init+0x280>)
 800635e:	fba2 2303 	umull	r2, r3, r2, r3
 8006362:	0c9b      	lsrs	r3, r3, #18
 8006364:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	430a      	orrs	r2, r1
 8006378:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	4a6a      	ldr	r2, [pc, #424]	; (8006534 <HAL_I2C_Init+0x274>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d802      	bhi.n	8006394 <HAL_I2C_Init+0xd4>
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	3301      	adds	r3, #1
 8006392:	e009      	b.n	80063a8 <HAL_I2C_Init+0xe8>
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800639a:	fb02 f303 	mul.w	r3, r2, r3
 800639e:	4a69      	ldr	r2, [pc, #420]	; (8006544 <HAL_I2C_Init+0x284>)
 80063a0:	fba2 2303 	umull	r2, r3, r2, r3
 80063a4:	099b      	lsrs	r3, r3, #6
 80063a6:	3301      	adds	r3, #1
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6812      	ldr	r2, [r2, #0]
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80063ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	495c      	ldr	r1, [pc, #368]	; (8006534 <HAL_I2C_Init+0x274>)
 80063c4:	428b      	cmp	r3, r1
 80063c6:	d819      	bhi.n	80063fc <HAL_I2C_Init+0x13c>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	1e59      	subs	r1, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	005b      	lsls	r3, r3, #1
 80063d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80063d6:	1c59      	adds	r1, r3, #1
 80063d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063dc:	400b      	ands	r3, r1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00a      	beq.n	80063f8 <HAL_I2C_Init+0x138>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1e59      	subs	r1, r3, #1
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80063f0:	3301      	adds	r3, #1
 80063f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80063f6:	e051      	b.n	800649c <HAL_I2C_Init+0x1dc>
 80063f8:	2304      	movs	r3, #4
 80063fa:	e04f      	b.n	800649c <HAL_I2C_Init+0x1dc>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d111      	bne.n	8006428 <HAL_I2C_Init+0x168>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	1e58      	subs	r0, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6859      	ldr	r1, [r3, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	440b      	add	r3, r1
 8006412:	fbb0 f3f3 	udiv	r3, r0, r3
 8006416:	3301      	adds	r3, #1
 8006418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800641c:	2b00      	cmp	r3, #0
 800641e:	bf0c      	ite	eq
 8006420:	2301      	moveq	r3, #1
 8006422:	2300      	movne	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e012      	b.n	800644e <HAL_I2C_Init+0x18e>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	1e58      	subs	r0, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6859      	ldr	r1, [r3, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	440b      	add	r3, r1
 8006436:	0099      	lsls	r1, r3, #2
 8006438:	440b      	add	r3, r1
 800643a:	fbb0 f3f3 	udiv	r3, r0, r3
 800643e:	3301      	adds	r3, #1
 8006440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006444:	2b00      	cmp	r3, #0
 8006446:	bf0c      	ite	eq
 8006448:	2301      	moveq	r3, #1
 800644a:	2300      	movne	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <HAL_I2C_Init+0x196>
 8006452:	2301      	movs	r3, #1
 8006454:	e022      	b.n	800649c <HAL_I2C_Init+0x1dc>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10e      	bne.n	800647c <HAL_I2C_Init+0x1bc>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	1e58      	subs	r0, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	460b      	mov	r3, r1
 8006468:	005b      	lsls	r3, r3, #1
 800646a:	440b      	add	r3, r1
 800646c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006470:	3301      	adds	r3, #1
 8006472:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006476:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647a:	e00f      	b.n	800649c <HAL_I2C_Init+0x1dc>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1e58      	subs	r0, r3, #1
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6859      	ldr	r1, [r3, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	440b      	add	r3, r1
 800648a:	0099      	lsls	r1, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006492:	3301      	adds	r3, #1
 8006494:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006498:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800649c:	6879      	ldr	r1, [r7, #4]
 800649e:	6809      	ldr	r1, [r1, #0]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	69da      	ldr	r2, [r3, #28]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	430a      	orrs	r2, r1
 80064be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80064ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6911      	ldr	r1, [r2, #16]
 80064d2:	687a      	ldr	r2, [r7, #4]
 80064d4:	68d2      	ldr	r2, [r2, #12]
 80064d6:	4311      	orrs	r1, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	430b      	orrs	r3, r1
 80064de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	695a      	ldr	r2, [r3, #20]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	431a      	orrs	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	430a      	orrs	r2, r1
 80064fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f042 0201 	orr.w	r2, r2, #1
 800650a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2220      	movs	r2, #32
 8006516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	000186a0 	.word	0x000186a0
 8006538:	001e847f 	.word	0x001e847f
 800653c:	003d08ff 	.word	0x003d08ff
 8006540:	431bde83 	.word	0x431bde83
 8006544:	10624dd3 	.word	0x10624dd3

08006548 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e154      	b.n	8006804 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d109      	bne.n	800657a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a98      	ldr	r2, [pc, #608]	; (80067d4 <HAL_I2S_Init+0x28c>)
 8006572:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fc fce5 	bl	8002f44 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69db      	ldr	r3, [r3, #28]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006590:	f023 030f 	bic.w	r3, r3, #15
 8006594:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2202      	movs	r2, #2
 800659c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d06f      	beq.n	8006686 <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80065ae:	2310      	movs	r3, #16
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e001      	b.n	80065b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80065b4:	2320      	movs	r3, #32
 80065b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d802      	bhi.n	80065c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a83      	ldr	r2, [pc, #524]	; (80067d8 <HAL_I2S_Init+0x290>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <HAL_I2S_Init+0x92>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a81      	ldr	r2, [pc, #516]	; (80067dc <HAL_I2S_Init+0x294>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d104      	bne.n	80065e4 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 80065da:	2001      	movs	r0, #1
 80065dc:	f002 fa7a 	bl	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	e003      	b.n	80065ec <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 80065e4:	2002      	movs	r0, #2
 80065e6:	f002 fa75 	bl	8008ad4 <HAL_RCCEx_GetPeriphCLKFreq>
 80065ea:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065f4:	d125      	bne.n	8006642 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d010      	beq.n	8006620 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	fbb2 f2f3 	udiv	r2, r2, r3
 8006608:	4613      	mov	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	fbb2 f3f3 	udiv	r3, r2, r3
 800661a:	3305      	adds	r3, #5
 800661c:	613b      	str	r3, [r7, #16]
 800661e:	e01f      	b.n	8006660 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	fbb2 f2f3 	udiv	r2, r2, r3
 800662a:	4613      	mov	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	4413      	add	r3, r2
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	461a      	mov	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	3305      	adds	r3, #5
 800663e:	613b      	str	r3, [r7, #16]
 8006640:	e00e      	b.n	8006660 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	fbb2 f2f3 	udiv	r2, r2, r3
 800664a:	4613      	mov	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4413      	add	r3, r2
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	461a      	mov	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	fbb2 f3f3 	udiv	r3, r2, r3
 800665c:	3305      	adds	r3, #5
 800665e:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4a5f      	ldr	r2, [pc, #380]	; (80067e0 <HAL_I2S_Init+0x298>)
 8006664:	fba2 2303 	umull	r2, r3, r2, r3
 8006668:	08db      	lsrs	r3, r3, #3
 800666a:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	085b      	lsrs	r3, r3, #1
 800667c:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	021b      	lsls	r3, r3, #8
 8006682:	61bb      	str	r3, [r7, #24]
 8006684:	e003      	b.n	800668e <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006686:	2302      	movs	r3, #2
 8006688:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	2b01      	cmp	r3, #1
 8006692:	d902      	bls.n	800669a <HAL_I2S_Init+0x152>
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	2bff      	cmp	r3, #255	; 0xff
 8006698:	d907      	bls.n	80066aa <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669e:	f043 0210 	orr.w	r2, r3, #16
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e0ac      	b.n	8006804 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691a      	ldr	r2, [r3, #16]
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	ea42 0103 	orr.w	r1, r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	69fa      	ldr	r2, [r7, #28]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	69db      	ldr	r3, [r3, #28]
 80066c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80066c8:	f023 030f 	bic.w	r3, r3, #15
 80066cc:	687a      	ldr	r2, [r7, #4]
 80066ce:	6851      	ldr	r1, [r2, #4]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	6892      	ldr	r2, [r2, #8]
 80066d4:	4311      	orrs	r1, r2
 80066d6:	687a      	ldr	r2, [r7, #4]
 80066d8:	68d2      	ldr	r2, [r2, #12]
 80066da:	4311      	orrs	r1, r2
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	6992      	ldr	r2, [r2, #24]
 80066e0:	430a      	orrs	r2, r1
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066ec:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	2b30      	cmp	r3, #48	; 0x30
 80066f4:	d003      	beq.n	80066fe <HAL_I2S_Init+0x1b6>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2bb0      	cmp	r3, #176	; 0xb0
 80066fc:	d107      	bne.n	800670e <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	69da      	ldr	r2, [r3, #28]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800670c:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6a1b      	ldr	r3, [r3, #32]
 8006712:	2b01      	cmp	r3, #1
 8006714:	d16e      	bne.n	80067f4 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a32      	ldr	r2, [pc, #200]	; (80067e4 <HAL_I2S_Init+0x29c>)
 800671a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a2d      	ldr	r2, [pc, #180]	; (80067d8 <HAL_I2S_Init+0x290>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d101      	bne.n	800672a <HAL_I2S_Init+0x1e2>
 8006726:	4b30      	ldr	r3, [pc, #192]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 8006728:	e001      	b.n	800672e <HAL_I2S_Init+0x1e6>
 800672a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800672e:	69db      	ldr	r3, [r3, #28]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	4928      	ldr	r1, [pc, #160]	; (80067d8 <HAL_I2S_Init+0x290>)
 8006736:	428a      	cmp	r2, r1
 8006738:	d101      	bne.n	800673e <HAL_I2S_Init+0x1f6>
 800673a:	4a2b      	ldr	r2, [pc, #172]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 800673c:	e001      	b.n	8006742 <HAL_I2S_Init+0x1fa>
 800673e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006742:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006746:	f023 030f 	bic.w	r3, r3, #15
 800674a:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a21      	ldr	r2, [pc, #132]	; (80067d8 <HAL_I2S_Init+0x290>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d101      	bne.n	800675a <HAL_I2S_Init+0x212>
 8006756:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 8006758:	e001      	b.n	800675e <HAL_I2S_Init+0x216>
 800675a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800675e:	2202      	movs	r2, #2
 8006760:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a1c      	ldr	r2, [pc, #112]	; (80067d8 <HAL_I2S_Init+0x290>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d101      	bne.n	8006770 <HAL_I2S_Init+0x228>
 800676c:	4b1e      	ldr	r3, [pc, #120]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 800676e:	e001      	b.n	8006774 <HAL_I2S_Init+0x22c>
 8006770:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006774:	69db      	ldr	r3, [r3, #28]
 8006776:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006780:	d003      	beq.n	800678a <HAL_I2S_Init+0x242>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d103      	bne.n	8006792 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800678a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800678e:	613b      	str	r3, [r7, #16]
 8006790:	e001      	b.n	8006796 <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80067a0:	4313      	orrs	r3, r2
 80067a2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80067aa:	4313      	orrs	r3, r2
 80067ac:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80067b4:	4313      	orrs	r3, r2
 80067b6:	b29a      	uxth	r2, r3
 80067b8:	897b      	ldrh	r3, [r7, #10]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	b29b      	uxth	r3, r3
 80067be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067c2:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a03      	ldr	r2, [pc, #12]	; (80067d8 <HAL_I2S_Init+0x290>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d10e      	bne.n	80067ec <HAL_I2S_Init+0x2a4>
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <HAL_I2S_Init+0x2a0>)
 80067d0:	e00e      	b.n	80067f0 <HAL_I2S_Init+0x2a8>
 80067d2:	bf00      	nop
 80067d4:	0800691b 	.word	0x0800691b
 80067d8:	40003800 	.word	0x40003800
 80067dc:	40003c00 	.word	0x40003c00
 80067e0:	cccccccd 	.word	0xcccccccd
 80067e4:	08006a31 	.word	0x08006a31
 80067e8:	40003400 	.word	0x40003400
 80067ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067f0:	897a      	ldrh	r2, [r7, #10]
 80067f2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2201      	movs	r2, #1
 80067fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3720      	adds	r7, #32
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <HAL_I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
void HAL_I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  /* Call the IrqHandler ISR set during HAL_I2S_INIT */
  hi2s->IrqHandlerISR(hi2s);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	4798      	blx	r3
}
 800681c:	bf00      	nop
 800681e:	3708      	adds	r7, #8
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686c:	881a      	ldrh	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006878:	1c9a      	adds	r2, r3, #2
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29b      	uxth	r3, r3
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10e      	bne.n	80068b4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685a      	ldr	r2, [r3, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80068a4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f7ff ffb8 	bl	8006824 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80068b4:	bf00      	nop
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b082      	sub	sp, #8
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68da      	ldr	r2, [r3, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ce:	b292      	uxth	r2, r2
 80068d0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d6:	1c9a      	adds	r2, r3, #2
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10e      	bne.n	8006912 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006902:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2201      	movs	r2, #1
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f7ff ff93 	bl	8006838 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800691a:	b580      	push	{r7, lr}
 800691c:	b086      	sub	sp, #24
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006930:	b2db      	uxtb	r3, r3
 8006932:	2b04      	cmp	r3, #4
 8006934:	d13a      	bne.n	80069ac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b01      	cmp	r3, #1
 800693e:	d109      	bne.n	8006954 <I2S_IRQHandler+0x3a>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800694a:	2b40      	cmp	r3, #64	; 0x40
 800694c:	d102      	bne.n	8006954 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff ffb4 	bl	80068bc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695a:	2b40      	cmp	r3, #64	; 0x40
 800695c:	d126      	bne.n	80069ac <I2S_IRQHandler+0x92>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f003 0320 	and.w	r3, r3, #32
 8006968:	2b20      	cmp	r3, #32
 800696a:	d11f      	bne.n	80069ac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	685a      	ldr	r2, [r3, #4]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800697a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800697c:	2300      	movs	r3, #0
 800697e:	613b      	str	r3, [r7, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	613b      	str	r3, [r7, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800699e:	f043 0202 	orr.w	r2, r3, #2
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff ff50 	bl	800684c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d136      	bne.n	8006a26 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b02      	cmp	r3, #2
 80069c0:	d109      	bne.n	80069d6 <I2S_IRQHandler+0xbc>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069cc:	2b80      	cmp	r3, #128	; 0x80
 80069ce:	d102      	bne.n	80069d6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7ff ff45 	bl	8006860 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f003 0308 	and.w	r3, r3, #8
 80069dc:	2b08      	cmp	r3, #8
 80069de:	d122      	bne.n	8006a26 <I2S_IRQHandler+0x10c>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b20      	cmp	r3, #32
 80069ec:	d11b      	bne.n	8006a26 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80069fc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80069fe:	2300      	movs	r3, #0
 8006a00:	60fb      	str	r3, [r7, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a18:	f043 0204 	orr.w	r2, r3, #4
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff ff13 	bl	800684c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a26:	bf00      	nop
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
	...

08006a30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4aa2      	ldr	r2, [pc, #648]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d101      	bne.n	8006a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006a4a:	4ba2      	ldr	r3, [pc, #648]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a4c:	e001      	b.n	8006a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a9b      	ldr	r2, [pc, #620]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d101      	bne.n	8006a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006a68:	4b9a      	ldr	r3, [pc, #616]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006a6a:	e001      	b.n	8006a70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006a6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a7c:	d004      	beq.n	8006a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	f040 8099 	bne.w	8006bba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d107      	bne.n	8006aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f91b 	bl	8006cd8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d107      	bne.n	8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f9be 	bl	8006e38 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d13a      	bne.n	8006b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d035      	beq.n	8006b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a7e      	ldr	r2, [pc, #504]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d101      	bne.n	8006ade <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006ada:	4b7e      	ldr	r3, [pc, #504]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006adc:	e001      	b.n	8006ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006ade:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4979      	ldr	r1, [pc, #484]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006aea:	428b      	cmp	r3, r1
 8006aec:	d101      	bne.n	8006af2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006aee:	4b79      	ldr	r3, [pc, #484]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006af0:	e001      	b.n	8006af6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006af2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006af6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006afa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	60fb      	str	r3, [r7, #12]
 8006b20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2201      	movs	r2, #1
 8006b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2e:	f043 0202 	orr.w	r2, r3, #2
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff fe88 	bl	800684c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f003 0308 	and.w	r3, r3, #8
 8006b42:	2b08      	cmp	r3, #8
 8006b44:	f040 80be 	bne.w	8006cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80b8 	beq.w	8006cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685a      	ldr	r2, [r3, #4]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a59      	ldr	r2, [pc, #356]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d101      	bne.n	8006b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006b6e:	4b59      	ldr	r3, [pc, #356]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b70:	e001      	b.n	8006b76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006b72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4954      	ldr	r1, [pc, #336]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006b7e:	428b      	cmp	r3, r1
 8006b80:	d101      	bne.n	8006b86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006b82:	4b54      	ldr	r3, [pc, #336]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006b84:	e001      	b.n	8006b8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006b86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006b8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006b90:	2300      	movs	r3, #0
 8006b92:	60bb      	str	r3, [r7, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	60bb      	str	r3, [r7, #8]
 8006b9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006baa:	f043 0204 	orr.w	r2, r3, #4
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff fe4a 	bl	800684c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006bb8:	e084      	b.n	8006cc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d107      	bne.n	8006bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8b4 	bl	8006d3c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d107      	bne.n	8006bee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 f8f3 	bl	8006dd4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006bee:	69fb      	ldr	r3, [r7, #28]
 8006bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf4:	2b40      	cmp	r3, #64	; 0x40
 8006bf6:	d12f      	bne.n	8006c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	f003 0320 	and.w	r3, r3, #32
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d02a      	beq.n	8006c58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a2e      	ldr	r2, [pc, #184]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d101      	bne.n	8006c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006c1c:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c1e:	e001      	b.n	8006c24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006c20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4929      	ldr	r1, [pc, #164]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c2c:	428b      	cmp	r3, r1
 8006c2e:	d101      	bne.n	8006c34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006c30:	4b28      	ldr	r3, [pc, #160]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c32:	e001      	b.n	8006c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006c34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4a:	f043 0202 	orr.w	r2, r3, #2
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f7ff fdfa 	bl	800684c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	f003 0308 	and.w	r3, r3, #8
 8006c5e:	2b08      	cmp	r3, #8
 8006c60:	d131      	bne.n	8006cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	f003 0320 	and.w	r3, r3, #32
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d02c      	beq.n	8006cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a17      	ldr	r2, [pc, #92]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d101      	bne.n	8006c7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006c76:	4b17      	ldr	r3, [pc, #92]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c78:	e001      	b.n	8006c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006c7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4912      	ldr	r1, [pc, #72]	; (8006cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8006c86:	428b      	cmp	r3, r1
 8006c88:	d101      	bne.n	8006c8e <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8006c8a:	4b12      	ldr	r3, [pc, #72]	; (8006cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8006c8c:	e001      	b.n	8006c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8006c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006c92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006c96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ca6:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cb4:	f043 0204 	orr.w	r2, r3, #4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f7ff fdc5 	bl	800684c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006cc2:	e000      	b.n	8006cc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006cc4:	bf00      	nop
}
 8006cc6:	bf00      	nop
 8006cc8:	3720      	adds	r7, #32
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	40003800 	.word	0x40003800
 8006cd4:	40003400 	.word	0x40003400

08006cd8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce4:	1c99      	adds	r1, r3, #2
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6251      	str	r1, [r2, #36]	; 0x24
 8006cea:	881a      	ldrh	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	b29a      	uxth	r2, r3
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d113      	bne.n	8006d32 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006d18:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d106      	bne.n	8006d32 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7fa f8cd 	bl	8000ecc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d32:	bf00      	nop
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b082      	sub	sp, #8
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d48:	1c99      	adds	r1, r3, #2
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	6251      	str	r1, [r2, #36]	; 0x24
 8006d4e:	8819      	ldrh	r1, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a1d      	ldr	r2, [pc, #116]	; (8006dcc <I2SEx_TxISR_I2SExt+0x90>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <I2SEx_TxISR_I2SExt+0x22>
 8006d5a:	4b1d      	ldr	r3, [pc, #116]	; (8006dd0 <I2SEx_TxISR_I2SExt+0x94>)
 8006d5c:	e001      	b.n	8006d62 <I2SEx_TxISR_I2SExt+0x26>
 8006d5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d62:	460a      	mov	r2, r1
 8006d64:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d121      	bne.n	8006dc2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a12      	ldr	r2, [pc, #72]	; (8006dcc <I2SEx_TxISR_I2SExt+0x90>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d101      	bne.n	8006d8c <I2SEx_TxISR_I2SExt+0x50>
 8006d88:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <I2SEx_TxISR_I2SExt+0x94>)
 8006d8a:	e001      	b.n	8006d90 <I2SEx_TxISR_I2SExt+0x54>
 8006d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	490d      	ldr	r1, [pc, #52]	; (8006dcc <I2SEx_TxISR_I2SExt+0x90>)
 8006d98:	428b      	cmp	r3, r1
 8006d9a:	d101      	bne.n	8006da0 <I2SEx_TxISR_I2SExt+0x64>
 8006d9c:	4b0c      	ldr	r3, [pc, #48]	; (8006dd0 <I2SEx_TxISR_I2SExt+0x94>)
 8006d9e:	e001      	b.n	8006da4 <I2SEx_TxISR_I2SExt+0x68>
 8006da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006da4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006da8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d106      	bne.n	8006dc2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	f7fa f885 	bl	8000ecc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	40003800 	.word	0x40003800
 8006dd0:	40003400 	.word	0x40003400

08006dd4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68d8      	ldr	r0, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	1c99      	adds	r1, r3, #2
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006dec:	b282      	uxth	r2, r0
 8006dee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b29a      	uxth	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d113      	bne.n	8006e30 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e16:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fa f84e 	bl	8000ecc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006e30:	bf00      	nop
 8006e32:	3708      	adds	r7, #8
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b082      	sub	sp, #8
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a20      	ldr	r2, [pc, #128]	; (8006ec8 <I2SEx_RxISR_I2SExt+0x90>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d101      	bne.n	8006e4e <I2SEx_RxISR_I2SExt+0x16>
 8006e4a:	4b20      	ldr	r3, [pc, #128]	; (8006ecc <I2SEx_RxISR_I2SExt+0x94>)
 8006e4c:	e001      	b.n	8006e52 <I2SEx_RxISR_I2SExt+0x1a>
 8006e4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e52:	68d8      	ldr	r0, [r3, #12]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e58:	1c99      	adds	r1, r3, #2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006e5e:	b282      	uxth	r2, r0
 8006e60:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d121      	bne.n	8006ebe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a12      	ldr	r2, [pc, #72]	; (8006ec8 <I2SEx_RxISR_I2SExt+0x90>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d101      	bne.n	8006e88 <I2SEx_RxISR_I2SExt+0x50>
 8006e84:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <I2SEx_RxISR_I2SExt+0x94>)
 8006e86:	e001      	b.n	8006e8c <I2SEx_RxISR_I2SExt+0x54>
 8006e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	490d      	ldr	r1, [pc, #52]	; (8006ec8 <I2SEx_RxISR_I2SExt+0x90>)
 8006e94:	428b      	cmp	r3, r1
 8006e96:	d101      	bne.n	8006e9c <I2SEx_RxISR_I2SExt+0x64>
 8006e98:	4b0c      	ldr	r3, [pc, #48]	; (8006ecc <I2SEx_RxISR_I2SExt+0x94>)
 8006e9a:	e001      	b.n	8006ea0 <I2SEx_RxISR_I2SExt+0x68>
 8006e9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ea0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006ea4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d106      	bne.n	8006ebe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7fa f807 	bl	8000ecc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006ebe:	bf00      	nop
 8006ec0:	3708      	adds	r7, #8
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	40003800 	.word	0x40003800
 8006ecc:	40003400 	.word	0x40003400

08006ed0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ed2:	b08f      	sub	sp, #60	; 0x3c
 8006ed4:	af0a      	add	r7, sp, #40	; 0x28
 8006ed6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e116      	b.n	8007110 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d106      	bne.n	8006f02 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f009 f91f 	bl	8010140 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2203      	movs	r2, #3
 8006f06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d102      	bne.n	8006f1c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4618      	mov	r0, r3
 8006f22:	f006 f84c 	bl	800cfbe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	603b      	str	r3, [r7, #0]
 8006f2c:	687e      	ldr	r6, [r7, #4]
 8006f2e:	466d      	mov	r5, sp
 8006f30:	f106 0410 	add.w	r4, r6, #16
 8006f34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f3c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006f40:	e885 0003 	stmia.w	r5, {r0, r1}
 8006f44:	1d33      	adds	r3, r6, #4
 8006f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f48:	6838      	ldr	r0, [r7, #0]
 8006f4a:	f005 ff23 	bl	800cd94 <USB_CoreInit>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d005      	beq.n	8006f60 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e0d7      	b.n	8007110 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2100      	movs	r1, #0
 8006f66:	4618      	mov	r0, r3
 8006f68:	f006 f83a 	bl	800cfe0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	73fb      	strb	r3, [r7, #15]
 8006f70:	e04a      	b.n	8007008 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006f72:	7bfa      	ldrb	r2, [r7, #15]
 8006f74:	6879      	ldr	r1, [r7, #4]
 8006f76:	4613      	mov	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	1a9b      	subs	r3, r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	440b      	add	r3, r1
 8006f80:	333d      	adds	r3, #61	; 0x3d
 8006f82:	2201      	movs	r2, #1
 8006f84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006f86:	7bfa      	ldrb	r2, [r7, #15]
 8006f88:	6879      	ldr	r1, [r7, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	00db      	lsls	r3, r3, #3
 8006f8e:	1a9b      	subs	r3, r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	440b      	add	r3, r1
 8006f94:	333c      	adds	r3, #60	; 0x3c
 8006f96:	7bfa      	ldrb	r2, [r7, #15]
 8006f98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006f9a:	7bfa      	ldrb	r2, [r7, #15]
 8006f9c:	7bfb      	ldrb	r3, [r7, #15]
 8006f9e:	b298      	uxth	r0, r3
 8006fa0:	6879      	ldr	r1, [r7, #4]
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	00db      	lsls	r3, r3, #3
 8006fa6:	1a9b      	subs	r3, r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	440b      	add	r3, r1
 8006fac:	3342      	adds	r3, #66	; 0x42
 8006fae:	4602      	mov	r2, r0
 8006fb0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006fb2:	7bfa      	ldrb	r2, [r7, #15]
 8006fb4:	6879      	ldr	r1, [r7, #4]
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	1a9b      	subs	r3, r3, r2
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	440b      	add	r3, r1
 8006fc0:	333f      	adds	r3, #63	; 0x3f
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006fc6:	7bfa      	ldrb	r2, [r7, #15]
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	00db      	lsls	r3, r3, #3
 8006fce:	1a9b      	subs	r3, r3, r2
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	440b      	add	r3, r1
 8006fd4:	3344      	adds	r3, #68	; 0x44
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006fda:	7bfa      	ldrb	r2, [r7, #15]
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	00db      	lsls	r3, r3, #3
 8006fe2:	1a9b      	subs	r3, r3, r2
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	440b      	add	r3, r1
 8006fe8:	3348      	adds	r3, #72	; 0x48
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006fee:	7bfa      	ldrb	r2, [r7, #15]
 8006ff0:	6879      	ldr	r1, [r7, #4]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	3350      	adds	r3, #80	; 0x50
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	3301      	adds	r3, #1
 8007006:	73fb      	strb	r3, [r7, #15]
 8007008:	7bfa      	ldrb	r2, [r7, #15]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	429a      	cmp	r2, r3
 8007010:	d3af      	bcc.n	8006f72 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]
 8007016:	e044      	b.n	80070a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007018:	7bfa      	ldrb	r2, [r7, #15]
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	4613      	mov	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	1a9b      	subs	r3, r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800702a:	2200      	movs	r2, #0
 800702c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800702e:	7bfa      	ldrb	r2, [r7, #15]
 8007030:	6879      	ldr	r1, [r7, #4]
 8007032:	4613      	mov	r3, r2
 8007034:	00db      	lsls	r3, r3, #3
 8007036:	1a9b      	subs	r3, r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	440b      	add	r3, r1
 800703c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007040:	7bfa      	ldrb	r2, [r7, #15]
 8007042:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007044:	7bfa      	ldrb	r2, [r7, #15]
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	4613      	mov	r3, r2
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	1a9b      	subs	r3, r3, r2
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	440b      	add	r3, r1
 8007052:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007056:	2200      	movs	r2, #0
 8007058:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800705a:	7bfa      	ldrb	r2, [r7, #15]
 800705c:	6879      	ldr	r1, [r7, #4]
 800705e:	4613      	mov	r3, r2
 8007060:	00db      	lsls	r3, r3, #3
 8007062:	1a9b      	subs	r3, r3, r2
 8007064:	009b      	lsls	r3, r3, #2
 8007066:	440b      	add	r3, r1
 8007068:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800706c:	2200      	movs	r2, #0
 800706e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007070:	7bfa      	ldrb	r2, [r7, #15]
 8007072:	6879      	ldr	r1, [r7, #4]
 8007074:	4613      	mov	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007082:	2200      	movs	r2, #0
 8007084:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007086:	7bfa      	ldrb	r2, [r7, #15]
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	4613      	mov	r3, r2
 800708c:	00db      	lsls	r3, r3, #3
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	440b      	add	r3, r1
 8007094:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007098:	2200      	movs	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800709c:	7bfb      	ldrb	r3, [r7, #15]
 800709e:	3301      	adds	r3, #1
 80070a0:	73fb      	strb	r3, [r7, #15]
 80070a2:	7bfa      	ldrb	r2, [r7, #15]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d3b5      	bcc.n	8007018 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	603b      	str	r3, [r7, #0]
 80070b2:	687e      	ldr	r6, [r7, #4]
 80070b4:	466d      	mov	r5, sp
 80070b6:	f106 0410 	add.w	r4, r6, #16
 80070ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80070c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80070ca:	1d33      	adds	r3, r6, #4
 80070cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070ce:	6838      	ldr	r0, [r7, #0]
 80070d0:	f005 ffd2 	bl	800d078 <USB_DevInit>
 80070d4:	4603      	mov	r3, r0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2202      	movs	r2, #2
 80070de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e014      	b.n	8007110 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d102      	bne.n	8007104 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f001 f892 	bl	8008228 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4618      	mov	r0, r3
 800710a:	f007 f841 	bl	800e190 <USB_DevDisconnect>

  return HAL_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007118 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_PCD_Start+0x1c>
 8007130:	2302      	movs	r3, #2
 8007132:	e020      	b.n	8007176 <HAL_PCD_Start+0x5e>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	2b01      	cmp	r3, #1
 8007142:	d109      	bne.n	8007158 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007148:	2b01      	cmp	r3, #1
 800714a:	d005      	beq.n	8007158 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007150:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4618      	mov	r0, r3
 800715e:	f005 ff1d 	bl	800cf9c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4618      	mov	r0, r3
 8007168:	f006 fff1 	bl	800e14e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007174:	2300      	movs	r3, #0
}
 8007176:	4618      	mov	r0, r3
 8007178:	3710      	adds	r7, #16
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}

0800717e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800717e:	b590      	push	{r4, r7, lr}
 8007180:	b08d      	sub	sp, #52	; 0x34
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4618      	mov	r0, r3
 8007196:	f007 f8af 	bl	800e2f8 <USB_GetMode>
 800719a:	4603      	mov	r3, r0
 800719c:	2b00      	cmp	r3, #0
 800719e:	f040 83ca 	bne.w	8007936 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f007 f813 	bl	800e1d2 <USB_ReadInterrupts>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	f000 83c0 	beq.w	8007934 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f007 f80a 	bl	800e1d2 <USB_ReadInterrupts>
 80071be:	4603      	mov	r3, r0
 80071c0:	f003 0302 	and.w	r3, r3, #2
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d107      	bne.n	80071d8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695a      	ldr	r2, [r3, #20]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f002 0202 	and.w	r2, r2, #2
 80071d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4618      	mov	r0, r3
 80071de:	f006 fff8 	bl	800e1d2 <USB_ReadInterrupts>
 80071e2:	4603      	mov	r3, r0
 80071e4:	f003 0310 	and.w	r3, r3, #16
 80071e8:	2b10      	cmp	r3, #16
 80071ea:	d161      	bne.n	80072b0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0210 	bic.w	r2, r2, #16
 80071fa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	f003 020f 	and.w	r2, r3, #15
 8007208:	4613      	mov	r3, r2
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	4413      	add	r3, r2
 8007218:	3304      	adds	r3, #4
 800721a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	0c5b      	lsrs	r3, r3, #17
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	2b02      	cmp	r3, #2
 8007226:	d124      	bne.n	8007272 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d035      	beq.n	80072a0 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	091b      	lsrs	r3, r3, #4
 800723c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800723e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007242:	b29b      	uxth	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	6a38      	ldr	r0, [r7, #32]
 8007248:	f006 fe2f 	bl	800deaa <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	69bb      	ldr	r3, [r7, #24]
 8007252:	091b      	lsrs	r3, r3, #4
 8007254:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007258:	441a      	add	r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	091b      	lsrs	r3, r3, #4
 8007266:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800726a:	441a      	add	r2, r3
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	619a      	str	r2, [r3, #24]
 8007270:	e016      	b.n	80072a0 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	0c5b      	lsrs	r3, r3, #17
 8007276:	f003 030f 	and.w	r3, r3, #15
 800727a:	2b06      	cmp	r3, #6
 800727c:	d110      	bne.n	80072a0 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007284:	2208      	movs	r2, #8
 8007286:	4619      	mov	r1, r3
 8007288:	6a38      	ldr	r0, [r7, #32]
 800728a:	f006 fe0e 	bl	800deaa <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	699a      	ldr	r2, [r3, #24]
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	091b      	lsrs	r3, r3, #4
 8007296:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800729a:	441a      	add	r2, r3
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0210 	orr.w	r2, r2, #16
 80072ae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f006 ff8c 	bl	800e1d2 <USB_ReadInterrupts>
 80072ba:	4603      	mov	r3, r0
 80072bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80072c4:	d16e      	bne.n	80073a4 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f006 ff92 	bl	800e1f8 <USB_ReadDevAllOutEpInterrupt>
 80072d4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80072d6:	e062      	b.n	800739e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	f003 0301 	and.w	r3, r3, #1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d057      	beq.n	8007392 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072e8:	b2d2      	uxtb	r2, r2
 80072ea:	4611      	mov	r1, r2
 80072ec:	4618      	mov	r0, r3
 80072ee:	f006 ffb7 	bl	800e260 <USB_ReadDevOutEPInterrupt>
 80072f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d00c      	beq.n	8007318 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730a:	461a      	mov	r2, r3
 800730c:	2301      	movs	r3, #1
 800730e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fdde 	bl	8007ed4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	f003 0308 	and.w	r3, r3, #8
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00c      	beq.n	800733c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732e:	461a      	mov	r2, r3
 8007330:	2308      	movs	r3, #8
 8007332:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fed8 	bl	80080ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f003 0310 	and.w	r3, r3, #16
 8007342:	2b00      	cmp	r3, #0
 8007344:	d008      	beq.n	8007358 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007352:	461a      	mov	r2, r3
 8007354:	2310      	movs	r3, #16
 8007356:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f003 0320 	and.w	r3, r3, #32
 800735e:	2b00      	cmp	r3, #0
 8007360:	d008      	beq.n	8007374 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007364:	015a      	lsls	r2, r3, #5
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	4413      	add	r3, r2
 800736a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800736e:	461a      	mov	r2, r3
 8007370:	2320      	movs	r3, #32
 8007372:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738a:	461a      	mov	r2, r3
 800738c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007390:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	3301      	adds	r3, #1
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	085b      	lsrs	r3, r3, #1
 800739c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d199      	bne.n	80072d8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4618      	mov	r0, r3
 80073aa:	f006 ff12 	bl	800e1d2 <USB_ReadInterrupts>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80073b8:	f040 80c0 	bne.w	800753c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f006 ff33 	bl	800e22c <USB_ReadDevAllInEpInterrupt>
 80073c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80073cc:	e0b2      	b.n	8007534 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	f003 0301 	and.w	r3, r3, #1
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f000 80a7 	beq.w	8007528 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e0:	b2d2      	uxtb	r2, r2
 80073e2:	4611      	mov	r1, r2
 80073e4:	4618      	mov	r0, r3
 80073e6:	f006 ff59 	bl	800e29c <USB_ReadDevInEPInterrupt>
 80073ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d057      	beq.n	80074a6 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80073f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f8:	f003 030f 	and.w	r3, r3, #15
 80073fc:	2201      	movs	r2, #1
 80073fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007402:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	43db      	mvns	r3, r3
 8007410:	69f9      	ldr	r1, [r7, #28]
 8007412:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007416:	4013      	ands	r3, r2
 8007418:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	015a      	lsls	r2, r3, #5
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	4413      	add	r3, r2
 8007422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007426:	461a      	mov	r2, r3
 8007428:	2301      	movs	r3, #1
 800742a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	691b      	ldr	r3, [r3, #16]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d132      	bne.n	800749a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007434:	6879      	ldr	r1, [r7, #4]
 8007436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007438:	4613      	mov	r3, r2
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	440b      	add	r3, r1
 8007442:	3348      	adds	r3, #72	; 0x48
 8007444:	6819      	ldr	r1, [r3, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744a:	4613      	mov	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	1a9b      	subs	r3, r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4403      	add	r3, r0
 8007454:	3344      	adds	r3, #68	; 0x44
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4419      	add	r1, r3
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800745e:	4613      	mov	r3, r2
 8007460:	00db      	lsls	r3, r3, #3
 8007462:	1a9b      	subs	r3, r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4403      	add	r3, r0
 8007468:	3348      	adds	r3, #72	; 0x48
 800746a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	2b00      	cmp	r3, #0
 8007470:	d113      	bne.n	800749a <HAL_PCD_IRQHandler+0x31c>
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007476:	4613      	mov	r3, r2
 8007478:	00db      	lsls	r3, r3, #3
 800747a:	1a9b      	subs	r3, r3, r2
 800747c:	009b      	lsls	r3, r3, #2
 800747e:	440b      	add	r3, r1
 8007480:	3350      	adds	r3, #80	; 0x50
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d108      	bne.n	800749a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6818      	ldr	r0, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007492:	461a      	mov	r2, r3
 8007494:	2101      	movs	r1, #1
 8007496:	f006 ff61 	bl	800e35c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	b2db      	uxtb	r3, r3
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f008 fee4 	bl	801026e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f003 0308 	and.w	r3, r3, #8
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074bc:	461a      	mov	r2, r3
 80074be:	2308      	movs	r3, #8
 80074c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d008      	beq.n	80074de <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	461a      	mov	r2, r3
 80074da:	2310      	movs	r3, #16
 80074dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d008      	beq.n	80074fa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80074e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f4:	461a      	mov	r2, r3
 80074f6:	2340      	movs	r3, #64	; 0x40
 80074f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d008      	beq.n	8007516 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007510:	461a      	mov	r2, r3
 8007512:	2302      	movs	r3, #2
 8007514:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 fc48 	bl	8007db8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752a:	3301      	adds	r3, #1
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800752e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007530:	085b      	lsrs	r3, r3, #1
 8007532:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	2b00      	cmp	r3, #0
 8007538:	f47f af49 	bne.w	80073ce <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4618      	mov	r0, r3
 8007542:	f006 fe46 	bl	800e1d2 <USB_ReadInterrupts>
 8007546:	4603      	mov	r3, r0
 8007548:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800754c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007550:	d122      	bne.n	8007598 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007560:	f023 0301 	bic.w	r3, r3, #1
 8007564:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800756c:	2b01      	cmp	r3, #1
 800756e:	d108      	bne.n	8007582 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007578:	2100      	movs	r1, #0
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f009 f8c0 	bl	8010700 <HAL_PCDEx_LPM_Callback>
 8007580:	e002      	b.n	8007588 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f008 fee0 	bl	8010348 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695a      	ldr	r2, [r3, #20]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007596:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	f006 fe18 	bl	800e1d2 <USB_ReadInterrupts>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075ac:	d112      	bne.n	80075d4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b4:	689b      	ldr	r3, [r3, #8]
 80075b6:	f003 0301 	and.w	r3, r3, #1
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d102      	bne.n	80075c4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f008 fe9c 	bl	80102fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	695a      	ldr	r2, [r3, #20]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80075d2:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4618      	mov	r0, r3
 80075da:	f006 fdfa 	bl	800e1d2 <USB_ReadInterrupts>
 80075de:	4603      	mov	r3, r0
 80075e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075e8:	d121      	bne.n	800762e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	695a      	ldr	r2, [r3, #20]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80075f8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007600:	2b00      	cmp	r3, #0
 8007602:	d111      	bne.n	8007628 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007612:	089b      	lsrs	r3, r3, #2
 8007614:	f003 020f 	and.w	r2, r3, #15
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800761e:	2101      	movs	r1, #1
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f009 f86d 	bl	8010700 <HAL_PCDEx_LPM_Callback>
 8007626:	e002      	b.n	800762e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f008 fe67 	bl	80102fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4618      	mov	r0, r3
 8007634:	f006 fdcd 	bl	800e1d2 <USB_ReadInterrupts>
 8007638:	4603      	mov	r3, r0
 800763a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800763e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007642:	f040 80c7 	bne.w	80077d4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2110      	movs	r1, #16
 8007660:	4618      	mov	r0, r3
 8007662:	f005 fe67 	bl	800d334 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007666:	2300      	movs	r3, #0
 8007668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800766a:	e056      	b.n	800771a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800766c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	4413      	add	r3, r2
 8007674:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007678:	461a      	mov	r2, r3
 800767a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800767e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	015a      	lsls	r2, r3, #5
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	4413      	add	r3, r2
 8007688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007690:	0151      	lsls	r1, r2, #5
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	440a      	add	r2, r1
 8007696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800769a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800769e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80076c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076cc:	461a      	mov	r2, r3
 80076ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80076d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076d6:	015a      	lsls	r2, r3, #5
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e4:	0151      	lsls	r1, r2, #5
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	440a      	add	r2, r1
 80076ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80076f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007704:	0151      	lsls	r1, r2, #5
 8007706:	69fa      	ldr	r2, [r7, #28]
 8007708:	440a      	add	r2, r1
 800770a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800770e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007712:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007716:	3301      	adds	r3, #1
 8007718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	685b      	ldr	r3, [r3, #4]
 800771e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007720:	429a      	cmp	r2, r3
 8007722:	d3a3      	bcc.n	800766c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800772a:	69db      	ldr	r3, [r3, #28]
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007732:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8007736:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773c:	2b00      	cmp	r3, #0
 800773e:	d016      	beq.n	800776e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007750:	f043 030b 	orr.w	r3, r3, #11
 8007754:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007760:	69fa      	ldr	r2, [r7, #28]
 8007762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007766:	f043 030b 	orr.w	r3, r3, #11
 800776a:	6453      	str	r3, [r2, #68]	; 0x44
 800776c:	e015      	b.n	800779a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800777c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007780:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007784:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	69fa      	ldr	r2, [r7, #28]
 8007790:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007794:	f043 030b 	orr.w	r3, r3, #11
 8007798:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69fa      	ldr	r2, [r7, #28]
 80077a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80077a8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80077ac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6818      	ldr	r0, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80077be:	461a      	mov	r2, r3
 80077c0:	f006 fdcc 	bl	800e35c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	695a      	ldr	r2, [r3, #20]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80077d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4618      	mov	r0, r3
 80077da:	f006 fcfa 	bl	800e1d2 <USB_ReadInterrupts>
 80077de:	4603      	mov	r3, r0
 80077e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077e8:	d124      	bne.n	8007834 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4618      	mov	r0, r3
 80077f0:	f006 fd90 	bl	800e314 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f005 fdf8 	bl	800d3ee <USB_GetDevSpeed>
 80077fe:	4603      	mov	r3, r0
 8007800:	461a      	mov	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681c      	ldr	r4, [r3, #0]
 800780a:	f000 ff61 	bl	80086d0 <HAL_RCC_GetHCLKFreq>
 800780e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007814:	b2db      	uxtb	r3, r3
 8007816:	461a      	mov	r2, r3
 8007818:	4620      	mov	r0, r4
 800781a:	f005 fb1d 	bl	800ce58 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f008 fd4d 	bl	80102be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	695a      	ldr	r2, [r3, #20]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8007832:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4618      	mov	r0, r3
 800783a:	f006 fcca 	bl	800e1d2 <USB_ReadInterrupts>
 800783e:	4603      	mov	r3, r0
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b08      	cmp	r3, #8
 8007846:	d10a      	bne.n	800785e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f008 fd2a 	bl	80102a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	695a      	ldr	r2, [r3, #20]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f002 0208 	and.w	r2, r2, #8
 800785c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4618      	mov	r0, r3
 8007864:	f006 fcb5 	bl	800e1d2 <USB_ReadInterrupts>
 8007868:	4603      	mov	r3, r0
 800786a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800786e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007872:	d10f      	bne.n	8007894 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007874:	2300      	movs	r3, #0
 8007876:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	b2db      	uxtb	r3, r3
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f008 fd82 	bl	8010388 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	695a      	ldr	r2, [r3, #20]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4618      	mov	r0, r3
 800789a:	f006 fc9a 	bl	800e1d2 <USB_ReadInterrupts>
 800789e:	4603      	mov	r3, r0
 80078a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078a8:	d10f      	bne.n	80078ca <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	4619      	mov	r1, r3
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f008 fd55 	bl	8010364 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695a      	ldr	r2, [r3, #20]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80078c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4618      	mov	r0, r3
 80078d0:	f006 fc7f 	bl	800e1d2 <USB_ReadInterrupts>
 80078d4:	4603      	mov	r3, r0
 80078d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80078da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078de:	d10a      	bne.n	80078f6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f008 fd63 	bl	80103ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	695a      	ldr	r2, [r3, #20]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80078f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f006 fc69 	bl	800e1d2 <USB_ReadInterrupts>
 8007900:	4603      	mov	r3, r0
 8007902:	f003 0304 	and.w	r3, r3, #4
 8007906:	2b04      	cmp	r3, #4
 8007908:	d115      	bne.n	8007936 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007912:	69bb      	ldr	r3, [r7, #24]
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b00      	cmp	r3, #0
 800791a:	d002      	beq.n	8007922 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f008 fd53 	bl	80103c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6859      	ldr	r1, [r3, #4]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	69ba      	ldr	r2, [r7, #24]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
 8007932:	e000      	b.n	8007936 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007934:	bf00      	nop
    }
  }
}
 8007936:	3734      	adds	r7, #52	; 0x34
 8007938:	46bd      	mov	sp, r7
 800793a:	bd90      	pop	{r4, r7, pc}

0800793c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_PCD_SetAddress+0x1a>
 8007952:	2302      	movs	r3, #2
 8007954:	e013      	b.n	800797e <HAL_PCD_SetAddress+0x42>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	78fa      	ldrb	r2, [r7, #3]
 8007962:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	4611      	mov	r1, r2
 800796e:	4618      	mov	r0, r3
 8007970:	f006 fbc7 	bl	800e102 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3708      	adds	r7, #8
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	4608      	mov	r0, r1
 8007990:	4611      	mov	r1, r2
 8007992:	461a      	mov	r2, r3
 8007994:	4603      	mov	r3, r0
 8007996:	70fb      	strb	r3, [r7, #3]
 8007998:	460b      	mov	r3, r1
 800799a:	803b      	strh	r3, [r7, #0]
 800799c:	4613      	mov	r3, r2
 800799e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80079a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	da0f      	bge.n	80079cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	f003 020f 	and.w	r2, r3, #15
 80079b2:	4613      	mov	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	1a9b      	subs	r3, r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	3338      	adds	r3, #56	; 0x38
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	4413      	add	r3, r2
 80079c0:	3304      	adds	r3, #4
 80079c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	705a      	strb	r2, [r3, #1]
 80079ca:	e00f      	b.n	80079ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	f003 020f 	and.w	r2, r3, #15
 80079d2:	4613      	mov	r3, r2
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	1a9b      	subs	r3, r3, r2
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	4413      	add	r3, r2
 80079e2:	3304      	adds	r3, #4
 80079e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80079ec:	78fb      	ldrb	r3, [r7, #3]
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80079f8:	883a      	ldrh	r2, [r7, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	78ba      	ldrb	r2, [r7, #2]
 8007a02:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	785b      	ldrb	r3, [r3, #1]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d004      	beq.n	8007a16 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	b29a      	uxth	r2, r3
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007a16:	78bb      	ldrb	r3, [r7, #2]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d102      	bne.n	8007a22 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d101      	bne.n	8007a30 <HAL_PCD_EP_Open+0xaa>
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	e00e      	b.n	8007a4e <HAL_PCD_EP_Open+0xc8>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68f9      	ldr	r1, [r7, #12]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f005 fcfa 	bl	800d438 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007a4c:	7afb      	ldrb	r3, [r7, #11]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	da0f      	bge.n	8007a8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	f003 020f 	and.w	r2, r3, #15
 8007a70:	4613      	mov	r3, r2
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	1a9b      	subs	r3, r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	3338      	adds	r3, #56	; 0x38
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	3304      	adds	r3, #4
 8007a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	705a      	strb	r2, [r3, #1]
 8007a88:	e00f      	b.n	8007aaa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	f003 020f 	and.w	r2, r3, #15
 8007a90:	4613      	mov	r3, r2
 8007a92:	00db      	lsls	r3, r3, #3
 8007a94:	1a9b      	subs	r3, r3, r2
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007aaa:	78fb      	ldrb	r3, [r7, #3]
 8007aac:	f003 030f 	and.w	r3, r3, #15
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_PCD_EP_Close+0x6e>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e00e      	b.n	8007ae2 <HAL_PCD_EP_Close+0x8c>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68f9      	ldr	r1, [r7, #12]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f005 fd38 	bl	800d548 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007ae0:	2300      	movs	r3, #0
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b086      	sub	sp, #24
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	607a      	str	r2, [r7, #4]
 8007af4:	603b      	str	r3, [r7, #0]
 8007af6:	460b      	mov	r3, r1
 8007af8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007afa:	7afb      	ldrb	r3, [r7, #11]
 8007afc:	f003 020f 	and.w	r2, r3, #15
 8007b00:	4613      	mov	r3, r2
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	1a9b      	subs	r3, r3, r2
 8007b06:	009b      	lsls	r3, r3, #2
 8007b08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	4413      	add	r3, r2
 8007b10:	3304      	adds	r3, #4
 8007b12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	2200      	movs	r2, #0
 8007b24:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b2c:	7afb      	ldrb	r3, [r7, #11]
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d102      	bne.n	8007b46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	f003 030f 	and.w	r3, r3, #15
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d109      	bne.n	8007b64 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	691b      	ldr	r3, [r3, #16]
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	6979      	ldr	r1, [r7, #20]
 8007b5e:	f006 f813 	bl	800db88 <USB_EP0StartXfer>
 8007b62:	e008      	b.n	8007b76 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	461a      	mov	r2, r3
 8007b70:	6979      	ldr	r1, [r7, #20]
 8007b72:	f005 fdc5 	bl	800d700 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007b8c:	78fb      	ldrb	r3, [r7, #3]
 8007b8e:	f003 020f 	and.w	r2, r3, #15
 8007b92:	6879      	ldr	r1, [r7, #4]
 8007b94:	4613      	mov	r3, r2
 8007b96:	00db      	lsls	r3, r3, #3
 8007b98:	1a9b      	subs	r3, r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	440b      	add	r3, r1
 8007b9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007ba2:	681b      	ldr	r3, [r3, #0]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	370c      	adds	r7, #12
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	607a      	str	r2, [r7, #4]
 8007bba:	603b      	str	r3, [r7, #0]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	f003 020f 	and.w	r2, r3, #15
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	1a9b      	subs	r3, r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	3338      	adds	r3, #56	; 0x38
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	4413      	add	r3, r2
 8007bd4:	3304      	adds	r3, #4
 8007bd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2200      	movs	r2, #0
 8007be8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2201      	movs	r2, #1
 8007bee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007bf0:	7afb      	ldrb	r3, [r7, #11]
 8007bf2:	f003 030f 	and.w	r3, r3, #15
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d102      	bne.n	8007c0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007c0a:	7afb      	ldrb	r3, [r7, #11]
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d109      	bne.n	8007c28 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6818      	ldr	r0, [r3, #0]
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	461a      	mov	r2, r3
 8007c20:	6979      	ldr	r1, [r7, #20]
 8007c22:	f005 ffb1 	bl	800db88 <USB_EP0StartXfer>
 8007c26:	e008      	b.n	8007c3a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6818      	ldr	r0, [r3, #0]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	6979      	ldr	r1, [r7, #20]
 8007c36:	f005 fd63 	bl	800d700 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3718      	adds	r7, #24
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	f003 020f 	and.w	r2, r3, #15
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d901      	bls.n	8007c62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	e050      	b.n	8007d04 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007c62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	da0f      	bge.n	8007c8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	f003 020f 	and.w	r2, r3, #15
 8007c70:	4613      	mov	r3, r2
 8007c72:	00db      	lsls	r3, r3, #3
 8007c74:	1a9b      	subs	r3, r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	3338      	adds	r3, #56	; 0x38
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	4413      	add	r3, r2
 8007c7e:	3304      	adds	r3, #4
 8007c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2201      	movs	r2, #1
 8007c86:	705a      	strb	r2, [r3, #1]
 8007c88:	e00d      	b.n	8007ca6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c8a:	78fa      	ldrb	r2, [r7, #3]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	00db      	lsls	r3, r3, #3
 8007c90:	1a9b      	subs	r3, r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4413      	add	r3, r2
 8007c9c:	3304      	adds	r3, #4
 8007c9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cac:	78fb      	ldrb	r3, [r7, #3]
 8007cae:	f003 030f 	and.w	r3, r3, #15
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <HAL_PCD_EP_SetStall+0x82>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e01e      	b.n	8007d04 <HAL_PCD_EP_SetStall+0xc0>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68f9      	ldr	r1, [r7, #12]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f006 f940 	bl	800df5a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	f003 030f 	and.w	r3, r3, #15
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10a      	bne.n	8007cfa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	b2d9      	uxtb	r1, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	f006 fb31 	bl	800e35c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007d02:	2300      	movs	r3, #0
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	460b      	mov	r3, r1
 8007d16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	f003 020f 	and.w	r2, r3, #15
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d901      	bls.n	8007d2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007d26:	2301      	movs	r3, #1
 8007d28:	e042      	b.n	8007db0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007d2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	da0f      	bge.n	8007d52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	f003 020f 	and.w	r2, r3, #15
 8007d38:	4613      	mov	r3, r2
 8007d3a:	00db      	lsls	r3, r3, #3
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	009b      	lsls	r3, r3, #2
 8007d40:	3338      	adds	r3, #56	; 0x38
 8007d42:	687a      	ldr	r2, [r7, #4]
 8007d44:	4413      	add	r3, r2
 8007d46:	3304      	adds	r3, #4
 8007d48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	705a      	strb	r2, [r3, #1]
 8007d50:	e00f      	b.n	8007d72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007d52:	78fb      	ldrb	r3, [r7, #3]
 8007d54:	f003 020f 	and.w	r2, r3, #15
 8007d58:	4613      	mov	r3, r2
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	1a9b      	subs	r3, r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	4413      	add	r3, r2
 8007d68:	3304      	adds	r3, #4
 8007d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2200      	movs	r2, #0
 8007d76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	f003 030f 	and.w	r3, r3, #15
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d101      	bne.n	8007d92 <HAL_PCD_EP_ClrStall+0x86>
 8007d8e:	2302      	movs	r3, #2
 8007d90:	e00e      	b.n	8007db0 <HAL_PCD_EP_ClrStall+0xa4>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f006 f948 	bl	800e036 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3710      	adds	r7, #16
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08a      	sub	sp, #40	; 0x28
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	1a9b      	subs	r3, r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	3338      	adds	r3, #56	; 0x38
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	4413      	add	r3, r2
 8007ddc:	3304      	adds	r3, #4
 8007dde:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	699a      	ldr	r2, [r3, #24]
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	695b      	ldr	r3, [r3, #20]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d901      	bls.n	8007df0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e06c      	b.n	8007eca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	695a      	ldr	r2, [r3, #20]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	699b      	ldr	r3, [r3, #24]
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	69fa      	ldr	r2, [r7, #28]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d902      	bls.n	8007e0c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	3303      	adds	r3, #3
 8007e10:	089b      	lsrs	r3, r3, #2
 8007e12:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e14:	e02b      	b.n	8007e6e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	695a      	ldr	r2, [r3, #20]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	69fa      	ldr	r2, [r7, #28]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d902      	bls.n	8007e32 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	3303      	adds	r3, #3
 8007e36:	089b      	lsrs	r3, r3, #2
 8007e38:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	68d9      	ldr	r1, [r3, #12]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	b2da      	uxtb	r2, r3
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	4603      	mov	r3, r0
 8007e50:	6978      	ldr	r0, [r7, #20]
 8007e52:	f005 ffec 	bl	800de2e <USB_WritePacket>

    ep->xfer_buff  += len;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	441a      	add	r2, r3
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	699a      	ldr	r2, [r3, #24]
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	441a      	add	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	015a      	lsls	r2, r3, #5
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	4413      	add	r3, r2
 8007e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d809      	bhi.n	8007e98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d203      	bcs.n	8007e98 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1be      	bne.n	8007e16 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	695a      	ldr	r2, [r3, #20]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	699b      	ldr	r3, [r3, #24]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d811      	bhi.n	8007ec8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	f003 030f 	and.w	r3, r3, #15
 8007eaa:	2201      	movs	r2, #1
 8007eac:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	6939      	ldr	r1, [r7, #16]
 8007ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007ec8:	2300      	movs	r3, #0
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3720      	adds	r7, #32
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
	...

08007ed4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	333c      	adds	r3, #60	; 0x3c
 8007eec:	3304      	adds	r3, #4
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	015a      	lsls	r2, r3, #5
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	4413      	add	r3, r2
 8007efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	f040 80a0 	bne.w	800804c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	f003 0308 	and.w	r3, r3, #8
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d015      	beq.n	8007f42 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a72      	ldr	r2, [pc, #456]	; (80080e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	f240 80dd 	bls.w	80080da <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f000 80d7 	beq.w	80080da <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	015a      	lsls	r2, r3, #5
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	4413      	add	r3, r2
 8007f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f38:	461a      	mov	r2, r3
 8007f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f3e:	6093      	str	r3, [r2, #8]
 8007f40:	e0cb      	b.n	80080da <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f003 0320 	and.w	r3, r3, #32
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d009      	beq.n	8007f60 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	015a      	lsls	r2, r3, #5
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	4413      	add	r3, r2
 8007f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f58:	461a      	mov	r2, r3
 8007f5a:	2320      	movs	r3, #32
 8007f5c:	6093      	str	r3, [r2, #8]
 8007f5e:	e0bc      	b.n	80080da <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	f040 80b7 	bne.w	80080da <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4a5d      	ldr	r2, [pc, #372]	; (80080e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d90f      	bls.n	8007f94 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f90:	6093      	str	r3, [r2, #8]
 8007f92:	e0a2      	b.n	80080da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	00db      	lsls	r3, r3, #3
 8007f9c:	1a9b      	subs	r3, r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007fa6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	0159      	lsls	r1, r3, #5
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	440b      	add	r3, r1
 8007fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb4:	691b      	ldr	r3, [r3, #16]
 8007fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007fba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	683a      	ldr	r2, [r7, #0]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	00db      	lsls	r3, r3, #3
 8007fc4:	1a9b      	subs	r3, r3, r2
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	4403      	add	r3, r0
 8007fca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007fce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	683a      	ldr	r2, [r7, #0]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	00db      	lsls	r3, r3, #3
 8007fd8:	1a9b      	subs	r3, r3, r2
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	440b      	add	r3, r1
 8007fde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007fe2:	6819      	ldr	r1, [r3, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	683a      	ldr	r2, [r7, #0]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	00db      	lsls	r3, r3, #3
 8007fec:	1a9b      	subs	r3, r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4403      	add	r3, r0
 8007ff2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4419      	add	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	4613      	mov	r3, r2
 8008000:	00db      	lsls	r3, r3, #3
 8008002:	1a9b      	subs	r3, r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4403      	add	r3, r0
 8008008:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800800c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d114      	bne.n	800803e <PCD_EP_OutXfrComplete_int+0x16a>
 8008014:	6879      	ldr	r1, [r7, #4]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	4613      	mov	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	1a9b      	subs	r3, r3, r2
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	440b      	add	r3, r1
 8008022:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d108      	bne.n	800803e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6818      	ldr	r0, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008036:	461a      	mov	r2, r3
 8008038:	2101      	movs	r1, #1
 800803a:	f006 f98f 	bl	800e35c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f008 f8f7 	bl	8010238 <HAL_PCD_DataOutStageCallback>
 800804a:	e046      	b.n	80080da <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4a26      	ldr	r2, [pc, #152]	; (80080e8 <PCD_EP_OutXfrComplete_int+0x214>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d124      	bne.n	800809e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	015a      	lsls	r2, r3, #5
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	4413      	add	r3, r2
 8008066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800806a:	461a      	mov	r2, r3
 800806c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008070:	6093      	str	r3, [r2, #8]
 8008072:	e032      	b.n	80080da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	d008      	beq.n	8008090 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	4413      	add	r3, r2
 8008086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800808a:	461a      	mov	r2, r3
 800808c:	2320      	movs	r3, #32
 800808e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	4619      	mov	r1, r3
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f008 f8ce 	bl	8010238 <HAL_PCD_DataOutStageCallback>
 800809c:	e01d      	b.n	80080da <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d114      	bne.n	80080ce <PCD_EP_OutXfrComplete_int+0x1fa>
 80080a4:	6879      	ldr	r1, [r7, #4]
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	4613      	mov	r3, r2
 80080aa:	00db      	lsls	r3, r3, #3
 80080ac:	1a9b      	subs	r3, r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d108      	bne.n	80080ce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80080c6:	461a      	mov	r2, r3
 80080c8:	2100      	movs	r1, #0
 80080ca:	f006 f947 	bl	800e35c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	4619      	mov	r1, r3
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f008 f8af 	bl	8010238 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3718      	adds	r7, #24
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	4f54300a 	.word	0x4f54300a
 80080e8:	4f54310a 	.word	0x4f54310a

080080ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b086      	sub	sp, #24
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	333c      	adds	r3, #60	; 0x3c
 8008104:	3304      	adds	r3, #4
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	4a15      	ldr	r2, [pc, #84]	; (8008174 <PCD_EP_OutSetupPacket_int+0x88>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d90e      	bls.n	8008140 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008128:	2b00      	cmp	r3, #0
 800812a:	d009      	beq.n	8008140 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	015a      	lsls	r2, r3, #5
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	4413      	add	r3, r2
 8008134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008138:	461a      	mov	r2, r3
 800813a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800813e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f008 f867 	bl	8010214 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	4a0a      	ldr	r2, [pc, #40]	; (8008174 <PCD_EP_OutSetupPacket_int+0x88>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d90c      	bls.n	8008168 <PCD_EP_OutSetupPacket_int+0x7c>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	691b      	ldr	r3, [r3, #16]
 8008152:	2b01      	cmp	r3, #1
 8008154:	d108      	bne.n	8008168 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6818      	ldr	r0, [r3, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008160:	461a      	mov	r2, r3
 8008162:	2101      	movs	r1, #1
 8008164:	f006 f8fa 	bl	800e35c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	4f54300a 	.word	0x4f54300a

08008178 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	460b      	mov	r3, r1
 8008182:	70fb      	strb	r3, [r7, #3]
 8008184:	4613      	mov	r3, r2
 8008186:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d107      	bne.n	80081a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008196:	883b      	ldrh	r3, [r7, #0]
 8008198:	0419      	lsls	r1, r3, #16
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	430a      	orrs	r2, r1
 80081a2:	629a      	str	r2, [r3, #40]	; 0x28
 80081a4:	e028      	b.n	80081f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ac:	0c1b      	lsrs	r3, r3, #16
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	4413      	add	r3, r2
 80081b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
 80081b8:	e00d      	b.n	80081d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	7bfb      	ldrb	r3, [r7, #15]
 80081c0:	3340      	adds	r3, #64	; 0x40
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	0c1b      	lsrs	r3, r3, #16
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	4413      	add	r3, r2
 80081ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	3301      	adds	r3, #1
 80081d4:	73fb      	strb	r3, [r7, #15]
 80081d6:	7bfa      	ldrb	r2, [r7, #15]
 80081d8:	78fb      	ldrb	r3, [r7, #3]
 80081da:	3b01      	subs	r3, #1
 80081dc:	429a      	cmp	r2, r3
 80081de:	d3ec      	bcc.n	80081ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80081e0:	883b      	ldrh	r3, [r7, #0]
 80081e2:	0418      	lsls	r0, r3, #16
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6819      	ldr	r1, [r3, #0]
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	3b01      	subs	r3, #1
 80081ec:	68ba      	ldr	r2, [r7, #8]
 80081ee:	4302      	orrs	r2, r0
 80081f0:	3340      	adds	r3, #64	; 0x40
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	440b      	add	r3, r1
 80081f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
 800820e:	460b      	mov	r3, r1
 8008210:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	887a      	ldrh	r2, [r7, #2]
 8008218:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800821a:	2300      	movs	r3, #0
}
 800821c:	4618      	mov	r0, r3
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825a:	f043 0303 	orr.w	r3, r3, #3
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3714      	adds	r7, #20
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0cc      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008284:	4b68      	ldr	r3, [pc, #416]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	683a      	ldr	r2, [r7, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d90c      	bls.n	80082ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008292:	4b65      	ldr	r3, [pc, #404]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 8008294:	683a      	ldr	r2, [r7, #0]
 8008296:	b2d2      	uxtb	r2, r2
 8008298:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800829a:	4b63      	ldr	r3, [pc, #396]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 0307 	and.w	r3, r3, #7
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d001      	beq.n	80082ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80082a8:	2301      	movs	r3, #1
 80082aa:	e0b8      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d020      	beq.n	80082fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f003 0304 	and.w	r3, r3, #4
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d005      	beq.n	80082d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082c4:	4b59      	ldr	r3, [pc, #356]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	4a58      	ldr	r2, [pc, #352]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80082ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f003 0308 	and.w	r3, r3, #8
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d005      	beq.n	80082e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80082dc:	4b53      	ldr	r3, [pc, #332]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	4a52      	ldr	r2, [pc, #328]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80082e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082e8:	4b50      	ldr	r3, [pc, #320]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082ea:	689b      	ldr	r3, [r3, #8]
 80082ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	494d      	ldr	r1, [pc, #308]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f003 0301 	and.w	r3, r3, #1
 8008302:	2b00      	cmp	r3, #0
 8008304:	d044      	beq.n	8008390 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d107      	bne.n	800831e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800830e:	4b47      	ldr	r3, [pc, #284]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008316:	2b00      	cmp	r3, #0
 8008318:	d119      	bne.n	800834e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e07f      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	2b02      	cmp	r3, #2
 8008324:	d003      	beq.n	800832e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800832a:	2b03      	cmp	r3, #3
 800832c:	d107      	bne.n	800833e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800832e:	4b3f      	ldr	r3, [pc, #252]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d109      	bne.n	800834e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e06f      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800833e:	4b3b      	ldr	r3, [pc, #236]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 0302 	and.w	r3, r3, #2
 8008346:	2b00      	cmp	r3, #0
 8008348:	d101      	bne.n	800834e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e067      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800834e:	4b37      	ldr	r3, [pc, #220]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f023 0203 	bic.w	r2, r3, #3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	4934      	ldr	r1, [pc, #208]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 800835c:	4313      	orrs	r3, r2
 800835e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008360:	f7fb ffa4 	bl	80042ac <HAL_GetTick>
 8008364:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008366:	e00a      	b.n	800837e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008368:	f7fb ffa0 	bl	80042ac <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	1ad3      	subs	r3, r2, r3
 8008372:	f241 3288 	movw	r2, #5000	; 0x1388
 8008376:	4293      	cmp	r3, r2
 8008378:	d901      	bls.n	800837e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800837a:	2303      	movs	r3, #3
 800837c:	e04f      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800837e:	4b2b      	ldr	r3, [pc, #172]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	f003 020c 	and.w	r2, r3, #12
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	429a      	cmp	r2, r3
 800838e:	d1eb      	bne.n	8008368 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008390:	4b25      	ldr	r3, [pc, #148]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0307 	and.w	r3, r3, #7
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	429a      	cmp	r2, r3
 800839c:	d20c      	bcs.n	80083b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800839e:	4b22      	ldr	r3, [pc, #136]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 80083a0:	683a      	ldr	r2, [r7, #0]
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80083a6:	4b20      	ldr	r3, [pc, #128]	; (8008428 <HAL_RCC_ClockConfig+0x1b8>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d001      	beq.n	80083b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e032      	b.n	800841e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0304 	and.w	r3, r3, #4
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d008      	beq.n	80083d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80083c4:	4b19      	ldr	r3, [pc, #100]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	4916      	ldr	r1, [pc, #88]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f003 0308 	and.w	r3, r3, #8
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d009      	beq.n	80083f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80083e2:	4b12      	ldr	r3, [pc, #72]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083e4:	689b      	ldr	r3, [r3, #8]
 80083e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	00db      	lsls	r3, r3, #3
 80083f0:	490e      	ldr	r1, [pc, #56]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80083f6:	f000 f889 	bl	800850c <HAL_RCC_GetSysClockFreq>
 80083fa:	4602      	mov	r2, r0
 80083fc:	4b0b      	ldr	r3, [pc, #44]	; (800842c <HAL_RCC_ClockConfig+0x1bc>)
 80083fe:	689b      	ldr	r3, [r3, #8]
 8008400:	091b      	lsrs	r3, r3, #4
 8008402:	f003 030f 	and.w	r3, r3, #15
 8008406:	490a      	ldr	r1, [pc, #40]	; (8008430 <HAL_RCC_ClockConfig+0x1c0>)
 8008408:	5ccb      	ldrb	r3, [r1, r3]
 800840a:	fa22 f303 	lsr.w	r3, r2, r3
 800840e:	4a09      	ldr	r2, [pc, #36]	; (8008434 <HAL_RCC_ClockConfig+0x1c4>)
 8008410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008412:	4b09      	ldr	r3, [pc, #36]	; (8008438 <HAL_RCC_ClockConfig+0x1c8>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f7fb ff04 	bl	8004224 <HAL_InitTick>

  return HAL_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	40023c00 	.word	0x40023c00
 800842c:	40023800 	.word	0x40023800
 8008430:	080116f4 	.word	0x080116f4
 8008434:	20000198 	.word	0x20000198
 8008438:	20000318 	.word	0x20000318

0800843c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08c      	sub	sp, #48	; 0x30
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d129      	bne.n	80084a2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800844e:	2300      	movs	r3, #0
 8008450:	61bb      	str	r3, [r7, #24]
 8008452:	4b2b      	ldr	r3, [pc, #172]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	4a2a      	ldr	r2, [pc, #168]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 8008458:	f043 0301 	orr.w	r3, r3, #1
 800845c:	6313      	str	r3, [r2, #48]	; 0x30
 800845e:	4b28      	ldr	r3, [pc, #160]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 8008460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008462:	f003 0301 	and.w	r3, r3, #1
 8008466:	61bb      	str	r3, [r7, #24]
 8008468:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800846a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800846e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008470:	2302      	movs	r3, #2
 8008472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008474:	2303      	movs	r3, #3
 8008476:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008478:	2300      	movs	r3, #0
 800847a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800847c:	2300      	movs	r3, #0
 800847e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008480:	f107 031c 	add.w	r3, r7, #28
 8008484:	4619      	mov	r1, r3
 8008486:	481f      	ldr	r0, [pc, #124]	; (8008504 <HAL_RCC_MCOConfig+0xc8>)
 8008488:	f7fd fd3a 	bl	8005f00 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800848c:	4b1c      	ldr	r3, [pc, #112]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008494:	68b9      	ldr	r1, [r7, #8]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	430b      	orrs	r3, r1
 800849a:	4919      	ldr	r1, [pc, #100]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 800849c:	4313      	orrs	r3, r2
 800849e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 80084a0:	e029      	b.n	80084f6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	4b16      	ldr	r3, [pc, #88]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 80084a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084aa:	4a15      	ldr	r2, [pc, #84]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 80084ac:	f043 0304 	orr.w	r3, r3, #4
 80084b0:	6313      	str	r3, [r2, #48]	; 0x30
 80084b2:	4b13      	ldr	r3, [pc, #76]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 80084b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b6:	f003 0304 	and.w	r3, r3, #4
 80084ba:	617b      	str	r3, [r7, #20]
 80084bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80084be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084c4:	2302      	movs	r3, #2
 80084c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084c8:	2303      	movs	r3, #3
 80084ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80084d0:	2300      	movs	r3, #0
 80084d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80084d4:	f107 031c 	add.w	r3, r7, #28
 80084d8:	4619      	mov	r1, r3
 80084da:	480b      	ldr	r0, [pc, #44]	; (8008508 <HAL_RCC_MCOConfig+0xcc>)
 80084dc:	f7fd fd10 	bl	8005f00 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 80084e0:	4b07      	ldr	r3, [pc, #28]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	00d9      	lsls	r1, r3, #3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	430b      	orrs	r3, r1
 80084f0:	4903      	ldr	r1, [pc, #12]	; (8008500 <HAL_RCC_MCOConfig+0xc4>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	608b      	str	r3, [r1, #8]
}
 80084f6:	bf00      	nop
 80084f8:	3730      	adds	r7, #48	; 0x30
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	40023800 	.word	0x40023800
 8008504:	40020000 	.word	0x40020000
 8008508:	40020800 	.word	0x40020800

0800850c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800850c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008510:	b084      	sub	sp, #16
 8008512:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	607b      	str	r3, [r7, #4]
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	2300      	movs	r3, #0
 800851e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8008520:	2300      	movs	r3, #0
 8008522:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008524:	4b67      	ldr	r3, [pc, #412]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008526:	689b      	ldr	r3, [r3, #8]
 8008528:	f003 030c 	and.w	r3, r3, #12
 800852c:	2b08      	cmp	r3, #8
 800852e:	d00d      	beq.n	800854c <HAL_RCC_GetSysClockFreq+0x40>
 8008530:	2b08      	cmp	r3, #8
 8008532:	f200 80bd 	bhi.w	80086b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8008536:	2b00      	cmp	r3, #0
 8008538:	d002      	beq.n	8008540 <HAL_RCC_GetSysClockFreq+0x34>
 800853a:	2b04      	cmp	r3, #4
 800853c:	d003      	beq.n	8008546 <HAL_RCC_GetSysClockFreq+0x3a>
 800853e:	e0b7      	b.n	80086b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008540:	4b61      	ldr	r3, [pc, #388]	; (80086c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8008542:	60bb      	str	r3, [r7, #8]
       break;
 8008544:	e0b7      	b.n	80086b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008546:	4b61      	ldr	r3, [pc, #388]	; (80086cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008548:	60bb      	str	r3, [r7, #8]
      break;
 800854a:	e0b4      	b.n	80086b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800854c:	4b5d      	ldr	r3, [pc, #372]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008554:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008556:	4b5b      	ldr	r3, [pc, #364]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d04d      	beq.n	80085fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008562:	4b58      	ldr	r3, [pc, #352]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	099b      	lsrs	r3, r3, #6
 8008568:	461a      	mov	r2, r3
 800856a:	f04f 0300 	mov.w	r3, #0
 800856e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008572:	f04f 0100 	mov.w	r1, #0
 8008576:	ea02 0800 	and.w	r8, r2, r0
 800857a:	ea03 0901 	and.w	r9, r3, r1
 800857e:	4640      	mov	r0, r8
 8008580:	4649      	mov	r1, r9
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	014b      	lsls	r3, r1, #5
 800858c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008590:	0142      	lsls	r2, r0, #5
 8008592:	4610      	mov	r0, r2
 8008594:	4619      	mov	r1, r3
 8008596:	ebb0 0008 	subs.w	r0, r0, r8
 800859a:	eb61 0109 	sbc.w	r1, r1, r9
 800859e:	f04f 0200 	mov.w	r2, #0
 80085a2:	f04f 0300 	mov.w	r3, #0
 80085a6:	018b      	lsls	r3, r1, #6
 80085a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80085ac:	0182      	lsls	r2, r0, #6
 80085ae:	1a12      	subs	r2, r2, r0
 80085b0:	eb63 0301 	sbc.w	r3, r3, r1
 80085b4:	f04f 0000 	mov.w	r0, #0
 80085b8:	f04f 0100 	mov.w	r1, #0
 80085bc:	00d9      	lsls	r1, r3, #3
 80085be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80085c2:	00d0      	lsls	r0, r2, #3
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	eb12 0208 	adds.w	r2, r2, r8
 80085cc:	eb43 0309 	adc.w	r3, r3, r9
 80085d0:	f04f 0000 	mov.w	r0, #0
 80085d4:	f04f 0100 	mov.w	r1, #0
 80085d8:	0259      	lsls	r1, r3, #9
 80085da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80085de:	0250      	lsls	r0, r2, #9
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4610      	mov	r0, r2
 80085e6:	4619      	mov	r1, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	461a      	mov	r2, r3
 80085ec:	f04f 0300 	mov.w	r3, #0
 80085f0:	f7f8 fa5c 	bl	8000aac <__aeabi_uldivmod>
 80085f4:	4602      	mov	r2, r0
 80085f6:	460b      	mov	r3, r1
 80085f8:	4613      	mov	r3, r2
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e04a      	b.n	8008694 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085fe:	4b31      	ldr	r3, [pc, #196]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	099b      	lsrs	r3, r3, #6
 8008604:	461a      	mov	r2, r3
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800860e:	f04f 0100 	mov.w	r1, #0
 8008612:	ea02 0400 	and.w	r4, r2, r0
 8008616:	ea03 0501 	and.w	r5, r3, r1
 800861a:	4620      	mov	r0, r4
 800861c:	4629      	mov	r1, r5
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	014b      	lsls	r3, r1, #5
 8008628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800862c:	0142      	lsls	r2, r0, #5
 800862e:	4610      	mov	r0, r2
 8008630:	4619      	mov	r1, r3
 8008632:	1b00      	subs	r0, r0, r4
 8008634:	eb61 0105 	sbc.w	r1, r1, r5
 8008638:	f04f 0200 	mov.w	r2, #0
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	018b      	lsls	r3, r1, #6
 8008642:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008646:	0182      	lsls	r2, r0, #6
 8008648:	1a12      	subs	r2, r2, r0
 800864a:	eb63 0301 	sbc.w	r3, r3, r1
 800864e:	f04f 0000 	mov.w	r0, #0
 8008652:	f04f 0100 	mov.w	r1, #0
 8008656:	00d9      	lsls	r1, r3, #3
 8008658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800865c:	00d0      	lsls	r0, r2, #3
 800865e:	4602      	mov	r2, r0
 8008660:	460b      	mov	r3, r1
 8008662:	1912      	adds	r2, r2, r4
 8008664:	eb45 0303 	adc.w	r3, r5, r3
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	f04f 0100 	mov.w	r1, #0
 8008670:	0299      	lsls	r1, r3, #10
 8008672:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008676:	0290      	lsls	r0, r2, #10
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	4610      	mov	r0, r2
 800867e:	4619      	mov	r1, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	461a      	mov	r2, r3
 8008684:	f04f 0300 	mov.w	r3, #0
 8008688:	f7f8 fa10 	bl	8000aac <__aeabi_uldivmod>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4613      	mov	r3, r2
 8008692:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008694:	4b0b      	ldr	r3, [pc, #44]	; (80086c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	0c1b      	lsrs	r3, r3, #16
 800869a:	f003 0303 	and.w	r3, r3, #3
 800869e:	3301      	adds	r3, #1
 80086a0:	005b      	lsls	r3, r3, #1
 80086a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ac:	60bb      	str	r3, [r7, #8]
      break;
 80086ae:	e002      	b.n	80086b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086b0:	4b05      	ldr	r3, [pc, #20]	; (80086c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80086b2:	60bb      	str	r3, [r7, #8]
      break;
 80086b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086b6:	68bb      	ldr	r3, [r7, #8]
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3710      	adds	r7, #16
 80086bc:	46bd      	mov	sp, r7
 80086be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80086c2:	bf00      	nop
 80086c4:	40023800 	.word	0x40023800
 80086c8:	00f42400 	.word	0x00f42400
 80086cc:	007a1200 	.word	0x007a1200

080086d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086d0:	b480      	push	{r7}
 80086d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80086d4:	4b03      	ldr	r3, [pc, #12]	; (80086e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80086d6:	681b      	ldr	r3, [r3, #0]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	20000198 	.word	0x20000198

080086e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086ec:	f7ff fff0 	bl	80086d0 <HAL_RCC_GetHCLKFreq>
 80086f0:	4602      	mov	r2, r0
 80086f2:	4b05      	ldr	r3, [pc, #20]	; (8008708 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	0a9b      	lsrs	r3, r3, #10
 80086f8:	f003 0307 	and.w	r3, r3, #7
 80086fc:	4903      	ldr	r1, [pc, #12]	; (800870c <HAL_RCC_GetPCLK1Freq+0x24>)
 80086fe:	5ccb      	ldrb	r3, [r1, r3]
 8008700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008704:	4618      	mov	r0, r3
 8008706:	bd80      	pop	{r7, pc}
 8008708:	40023800 	.word	0x40023800
 800870c:	08011704 	.word	0x08011704

08008710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008714:	f7ff ffdc 	bl	80086d0 <HAL_RCC_GetHCLKFreq>
 8008718:	4602      	mov	r2, r0
 800871a:	4b05      	ldr	r3, [pc, #20]	; (8008730 <HAL_RCC_GetPCLK2Freq+0x20>)
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	0b5b      	lsrs	r3, r3, #13
 8008720:	f003 0307 	and.w	r3, r3, #7
 8008724:	4903      	ldr	r1, [pc, #12]	; (8008734 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008726:	5ccb      	ldrb	r3, [r1, r3]
 8008728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800872c:	4618      	mov	r0, r3
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40023800 	.word	0x40023800
 8008734:	08011704 	.word	0x08011704

08008738 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	60fb      	str	r3, [r7, #12]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8008748:	2300      	movs	r3, #0
 800874a:	617b      	str	r3, [r7, #20]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	2b00      	cmp	r3, #0
 8008756:	d010      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x42>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008758:	4b87      	ldr	r3, [pc, #540]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800875a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800875e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	4984      	ldr	r1, [pc, #528]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008768:	4313      	orrs	r3, r2
 800876a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	695b      	ldr	r3, [r3, #20]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d101      	bne.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x42>
    {
      plli2sused = 1U;
 8008776:	2301      	movs	r3, #1
 8008778:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0302 	and.w	r3, r3, #2
 8008782:	2b00      	cmp	r3, #0
 8008784:	d010      	beq.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8008786:	4b7c      	ldr	r3, [pc, #496]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800878c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	4978      	ldr	r1, [pc, #480]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008796:	4313      	orrs	r3, r2
 8008798:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d101      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x70>
    {
      plli2sused = 1U;
 80087a4:	2301      	movs	r3, #1
 80087a6:	617b      	str	r3, [r7, #20]
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0308 	and.w	r3, r3, #8
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 8083 	beq.w	80088bc <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80087b6:	2300      	movs	r3, #0
 80087b8:	60bb      	str	r3, [r7, #8]
 80087ba:	4b6f      	ldr	r3, [pc, #444]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	4a6e      	ldr	r2, [pc, #440]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80087c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c4:	6413      	str	r3, [r2, #64]	; 0x40
 80087c6:	4b6c      	ldr	r3, [pc, #432]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ce:	60bb      	str	r3, [r7, #8]
 80087d0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80087d2:	4b6a      	ldr	r3, [pc, #424]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a69      	ldr	r2, [pc, #420]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80087d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087dc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80087de:	f7fb fd65 	bl	80042ac <HAL_GetTick>
 80087e2:	6138      	str	r0, [r7, #16]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80087e4:	e008      	b.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80087e6:	f7fb fd61 	bl	80042ac <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d901      	bls.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      {
        return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e162      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x386>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80087f8:	4b60      	ldr	r3, [pc, #384]	; (800897c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0f0      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xae>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008804:	4b5c      	ldr	r3, [pc, #368]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008808:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800880c:	60fb      	str	r3, [r7, #12]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d02f      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	429a      	cmp	r2, r3
 8008820:	d028      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008822:	4b55      	ldr	r3, [pc, #340]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800882a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800882c:	4b54      	ldr	r3, [pc, #336]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800882e:	2201      	movs	r2, #1
 8008830:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008832:	4b53      	ldr	r3, [pc, #332]	; (8008980 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008838:	4a4f      	ldr	r2, [pc, #316]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800883e:	4b4e      	ldr	r3, [pc, #312]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008842:	f003 0301 	and.w	r3, r3, #1
 8008846:	2b01      	cmp	r3, #1
 8008848:	d114      	bne.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800884a:	f7fb fd2f 	bl	80042ac <HAL_GetTick>
 800884e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008850:	e00a      	b.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008852:	f7fb fd2b 	bl	80042ac <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008860:	4293      	cmp	r3, r2
 8008862:	d901      	bls.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x130>
          {
            return HAL_TIMEOUT;
 8008864:	2303      	movs	r3, #3
 8008866:	e12a      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x386>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008868:	4b43      	ldr	r3, [pc, #268]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800886a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886c:	f003 0302 	and.w	r3, r3, #2
 8008870:	2b00      	cmp	r3, #0
 8008872:	d0ee      	beq.n	8008852 <HAL_RCCEx_PeriphCLKConfig+0x11a>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800887c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008880:	d10d      	bne.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x166>
 8008882:	4b3d      	ldr	r3, [pc, #244]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	69db      	ldr	r3, [r3, #28]
 800888e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008896:	4938      	ldr	r1, [pc, #224]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008898:	4313      	orrs	r3, r2
 800889a:	608b      	str	r3, [r1, #8]
 800889c:	e005      	b.n	80088aa <HAL_RCCEx_PeriphCLKConfig+0x172>
 800889e:	4b36      	ldr	r3, [pc, #216]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80088a0:	689b      	ldr	r3, [r3, #8]
 80088a2:	4a35      	ldr	r2, [pc, #212]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80088a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80088a8:	6093      	str	r3, [r2, #8]
 80088aa:	4b33      	ldr	r3, [pc, #204]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80088ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80088b6:	4930      	ldr	r1, [pc, #192]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80088b8:	4313      	orrs	r3, r2
 80088ba:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 0304 	and.w	r3, r3, #4
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d004      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80088ce:	4b2d      	ldr	r3, [pc, #180]	; (8008984 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80088d0:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0310 	and.w	r3, r3, #16
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80088de:	4b26      	ldr	r3, [pc, #152]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80088e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	4922      	ldr	r1, [pc, #136]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d011      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008900:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008902:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008906:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890e:	491a      	ldr	r1, [pc, #104]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008910:	4313      	orrs	r3, r2
 8008912:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800891e:	d101      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    {
      plli2sused = 1U;
 8008920:	2301      	movs	r3, #1
 8008922:	617b      	str	r3, [r7, #20]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008930:	4b11      	ldr	r3, [pc, #68]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008936:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	490e      	ldr	r1, [pc, #56]	; (8008978 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8008940:	4313      	orrs	r3, r2
 8008942:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d004      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b80      	cmp	r3, #128	; 0x80
 8008952:	f040 8091 	bne.w	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008956:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8008958:	2200      	movs	r2, #0
 800895a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800895c:	f7fb fca6 	bl	80042ac <HAL_GetTick>
 8008960:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008962:	e013      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008964:	f7fb fca2 	bl	80042ac <HAL_GetTick>
 8008968:	4602      	mov	r2, r0
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	2b02      	cmp	r3, #2
 8008970:	d90c      	bls.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x254>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e0a3      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x386>
 8008976:	bf00      	nop
 8008978:	40023800 	.word	0x40023800
 800897c:	40007000 	.word	0x40007000
 8008980:	42470e40 	.word	0x42470e40
 8008984:	424711e0 	.word	0x424711e0
 8008988:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800898c:	4b4e      	ldr	r3, [pc, #312]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e5      	bne.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8008998:	4a4c      	ldr	r2, [pc, #304]	; (8008acc <HAL_RCCEx_PeriphCLKConfig+0x394>)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d023      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_RCCEx_PeriphCLKConfig+0x290>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	699b      	ldr	r3, [r3, #24]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d019      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d004      	beq.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x2a6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089dc:	d00e      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d019      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d115      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089fa:	d110      	bne.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	019b      	lsls	r3, r3, #6
 8008a06:	431a      	orrs	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	061b      	lsls	r3, r3, #24
 8008a0e:	431a      	orrs	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	071b      	lsls	r3, r3, #28
 8008a16:	492c      	ldr	r1, [pc, #176]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d010      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x314>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	019b      	lsls	r3, r3, #6
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	061b      	lsls	r3, r3, #24
 8008a3c:	431a      	orrs	r2, r3
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	071b      	lsls	r3, r3, #28
 8008a44:	4920      	ldr	r1, [pc, #128]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008a46:	4313      	orrs	r3, r2
 8008a48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008a4c:	4b20      	ldr	r3, [pc, #128]	; (8008ad0 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8008a4e:	2201      	movs	r2, #1
 8008a50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a52:	f7fb fc2b 	bl	80042ac <HAL_GetTick>
 8008a56:	6138      	str	r0, [r7, #16]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a58:	e008      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008a5a:	f7fb fc27 	bl	80042ac <HAL_GetTick>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	1ad3      	subs	r3, r2, r3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d901      	bls.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x334>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a68:	2303      	movs	r3, #3
 8008a6a:	e028      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x386>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a6c:	4b16      	ldr	r3, [pc, #88]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0f0      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x322>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d00a      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008a84:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008a86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	490d      	ldr	r1, [pc, #52]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00a      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x384>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8008aa6:	4b08      	ldr	r3, [pc, #32]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	4904      	ldr	r1, [pc, #16]	; (8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3718      	adds	r7, #24
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	40023800 	.word	0x40023800
 8008acc:	424710d8 	.word	0x424710d8
 8008ad0:	42470068 	.word	0x42470068

08008ad4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d004      	beq.n	8008afc <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	f000 80a1 	beq.w	8008c3c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8008afa:	e13f      	b.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8008afc:	4ba3      	ldr	r3, [pc, #652]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008afe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b02:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008b0e:	f000 8084 	beq.w	8008c1a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008b18:	f200 808c 	bhi.w	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b22:	d04f      	beq.n	8008bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b2a:	f200 8083 	bhi.w	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d006      	beq.n	8008b42 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b3a:	d17b      	bne.n	8008c34 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008b3c:	4b94      	ldr	r3, [pc, #592]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008b3e:	617b      	str	r3, [r7, #20]
          break;
 8008b40:	e07b      	b.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008b42:	4b92      	ldr	r3, [pc, #584]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b50:	d109      	bne.n	8008b66 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008b52:	4b8e      	ldr	r3, [pc, #568]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b5c:	4a8c      	ldr	r2, [pc, #560]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b62:	613b      	str	r3, [r7, #16]
 8008b64:	e019      	b.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008b66:	4b89      	ldr	r3, [pc, #548]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b72:	d109      	bne.n	8008b88 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008b74:	4b85      	ldr	r3, [pc, #532]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b7e:	4a85      	ldr	r2, [pc, #532]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b84:	613b      	str	r3, [r7, #16]
 8008b86:	e008      	b.n	8008b9a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008b88:	4b80      	ldr	r3, [pc, #512]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008b92:	4a81      	ldr	r2, [pc, #516]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b98:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008b9a:	4b7c      	ldr	r3, [pc, #496]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba0:	099b      	lsrs	r3, r3, #6
 8008ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	fb02 f303 	mul.w	r3, r2, r3
 8008bac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008bae:	4b77      	ldr	r3, [pc, #476]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bb4:	0f1b      	lsrs	r3, r3, #28
 8008bb6:	f003 0307 	and.w	r3, r3, #7
 8008bba:	68ba      	ldr	r2, [r7, #8]
 8008bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bc0:	617b      	str	r3, [r7, #20]
          break;
 8008bc2:	e03a      	b.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008bc4:	4b71      	ldr	r3, [pc, #452]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bd0:	d108      	bne.n	8008be4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008bd2:	4b6e      	ldr	r3, [pc, #440]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bda:	4a6e      	ldr	r2, [pc, #440]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	e007      	b.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008be4:	4b69      	ldr	r3, [pc, #420]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008bec:	4a6a      	ldr	r2, [pc, #424]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bf2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008bf4:	4b65      	ldr	r3, [pc, #404]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	099b      	lsrs	r3, r3, #6
 8008bfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	fb02 f303 	mul.w	r3, r2, r3
 8008c04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008c06:	4b61      	ldr	r3, [pc, #388]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	0f1b      	lsrs	r3, r3, #28
 8008c0c:	f003 0307 	and.w	r3, r3, #7
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c16:	617b      	str	r3, [r7, #20]
          break;
 8008c18:	e00f      	b.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008c1a:	4b5c      	ldr	r3, [pc, #368]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c26:	d102      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8008c28:	4b5a      	ldr	r3, [pc, #360]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008c2a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008c2c:	e005      	b.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8008c2e:	4b5a      	ldr	r3, [pc, #360]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008c30:	617b      	str	r3, [r7, #20]
          break;
 8008c32:	e002      	b.n	8008c3a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]
          break;
 8008c38:	bf00      	nop
        }
      }
      break;
 8008c3a:	e09f      	b.n	8008d7c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8008c3c:	4b53      	ldr	r3, [pc, #332]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c42:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8008c46:	60fb      	str	r3, [r7, #12]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008c4e:	f000 8084 	beq.w	8008d5a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008c58:	f200 808c 	bhi.w	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c62:	d04f      	beq.n	8008d04 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c6a:	f200 8083 	bhi.w	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d006      	beq.n	8008c82 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c7a:	d17b      	bne.n	8008d74 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8008c7c:	4b44      	ldr	r3, [pc, #272]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008c7e:	617b      	str	r3, [r7, #20]
          break;
 8008c80:	e07b      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8008c82:	4b42      	ldr	r3, [pc, #264]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c90:	d109      	bne.n	8008ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008c92:	4b3e      	ldr	r3, [pc, #248]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c9c:	4a3c      	ldr	r2, [pc, #240]	; (8008d90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8008c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	e019      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008ca6:	4b39      	ldr	r3, [pc, #228]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cb2:	d109      	bne.n	8008cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008cb4:	4b35      	ldr	r3, [pc, #212]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cbe:	4a35      	ldr	r2, [pc, #212]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc4:	613b      	str	r3, [r7, #16]
 8008cc6:	e008      	b.n	8008cda <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008cc8:	4b30      	ldr	r3, [pc, #192]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cd2:	4a31      	ldr	r2, [pc, #196]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cd8:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008cda:	4b2c      	ldr	r3, [pc, #176]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008cdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ce0:	099b      	lsrs	r3, r3, #6
 8008ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	fb02 f303 	mul.w	r3, r2, r3
 8008cec:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008cee:	4b27      	ldr	r3, [pc, #156]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cf4:	0f1b      	lsrs	r3, r3, #28
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d00:	617b      	str	r3, [r7, #20]
          break;
 8008d02:	e03a      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008d04:	4b21      	ldr	r3, [pc, #132]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d10:	d108      	bne.n	8008d24 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008d12:	4b1e      	ldr	r3, [pc, #120]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d1a:	4a1e      	ldr	r2, [pc, #120]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d20:	613b      	str	r3, [r7, #16]
 8008d22:	e007      	b.n	8008d34 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008d24:	4b19      	ldr	r3, [pc, #100]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d2c:	4a1a      	ldr	r2, [pc, #104]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d32:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008d34:	4b15      	ldr	r3, [pc, #84]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	099b      	lsrs	r3, r3, #6
 8008d3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	fb02 f303 	mul.w	r3, r2, r3
 8008d44:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008d46:	4b11      	ldr	r3, [pc, #68]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	0f1b      	lsrs	r3, r3, #28
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d56:	617b      	str	r3, [r7, #20]
          break;
 8008d58:	e00f      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008d5a:	4b0c      	ldr	r3, [pc, #48]	; (8008d8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d66:	d102      	bne.n	8008d6e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8008d68:	4b0a      	ldr	r3, [pc, #40]	; (8008d94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8008d6a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008d6c:	e005      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8008d6e:	4b0a      	ldr	r3, [pc, #40]	; (8008d98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8008d70:	617b      	str	r3, [r7, #20]
          break;
 8008d72:	e002      	b.n	8008d7a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8008d74:	2300      	movs	r3, #0
 8008d76:	617b      	str	r3, [r7, #20]
          break;
 8008d78:	bf00      	nop
        }
      }
      break;
 8008d7a:	bf00      	nop
    }
  }
  return frequency;
 8008d7c:	697b      	ldr	r3, [r7, #20]
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr
 8008d8a:	bf00      	nop
 8008d8c:	40023800 	.word	0x40023800
 8008d90:	00bb8000 	.word	0x00bb8000
 8008d94:	007a1200 	.word	0x007a1200
 8008d98:	00f42400 	.word	0x00f42400

08008d9c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b086      	sub	sp, #24
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d101      	bne.n	8008dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e270      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f003 0301 	and.w	r3, r3, #1
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d075      	beq.n	8008ea6 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008dba:	4ba3      	ldr	r3, [pc, #652]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	f003 030c 	and.w	r3, r3, #12
 8008dc2:	2b04      	cmp	r3, #4
 8008dc4:	d00c      	beq.n	8008de0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008dc6:	4ba0      	ldr	r3, [pc, #640]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008dce:	2b08      	cmp	r3, #8
 8008dd0:	d112      	bne.n	8008df8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008dd2:	4b9d      	ldr	r3, [pc, #628]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dde:	d10b      	bne.n	8008df8 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008de0:	4b99      	ldr	r3, [pc, #612]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d05b      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x108>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d157      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008df4:	2301      	movs	r3, #1
 8008df6:	e24b      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e00:	d106      	bne.n	8008e10 <HAL_RCC_OscConfig+0x74>
 8008e02:	4b91      	ldr	r3, [pc, #580]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a90      	ldr	r2, [pc, #576]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e0c:	6013      	str	r3, [r2, #0]
 8008e0e:	e01d      	b.n	8008e4c <HAL_RCC_OscConfig+0xb0>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008e18:	d10c      	bne.n	8008e34 <HAL_RCC_OscConfig+0x98>
 8008e1a:	4b8b      	ldr	r3, [pc, #556]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a8a      	ldr	r2, [pc, #552]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e24:	6013      	str	r3, [r2, #0]
 8008e26:	4b88      	ldr	r3, [pc, #544]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a87      	ldr	r2, [pc, #540]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e30:	6013      	str	r3, [r2, #0]
 8008e32:	e00b      	b.n	8008e4c <HAL_RCC_OscConfig+0xb0>
 8008e34:	4b84      	ldr	r3, [pc, #528]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a83      	ldr	r2, [pc, #524]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e3e:	6013      	str	r3, [r2, #0]
 8008e40:	4b81      	ldr	r3, [pc, #516]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a80      	ldr	r2, [pc, #512]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	685b      	ldr	r3, [r3, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d013      	beq.n	8008e7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e54:	f7fb fa2a 	bl	80042ac <HAL_GetTick>
 8008e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e5a:	e008      	b.n	8008e6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e5c:	f7fb fa26 	bl	80042ac <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	2b64      	cmp	r3, #100	; 0x64
 8008e68:	d901      	bls.n	8008e6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e210      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e6e:	4b76      	ldr	r3, [pc, #472]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0f0      	beq.n	8008e5c <HAL_RCC_OscConfig+0xc0>
 8008e7a:	e014      	b.n	8008ea6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e7c:	f7fb fa16 	bl	80042ac <HAL_GetTick>
 8008e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e82:	e008      	b.n	8008e96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008e84:	f7fb fa12 	bl	80042ac <HAL_GetTick>
 8008e88:	4602      	mov	r2, r0
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	2b64      	cmp	r3, #100	; 0x64
 8008e90:	d901      	bls.n	8008e96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e92:	2303      	movs	r3, #3
 8008e94:	e1fc      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e96:	4b6c      	ldr	r3, [pc, #432]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d1f0      	bne.n	8008e84 <HAL_RCC_OscConfig+0xe8>
 8008ea2:	e000      	b.n	8008ea6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f003 0302 	and.w	r3, r3, #2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d063      	beq.n	8008f7a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008eb2:	4b65      	ldr	r3, [pc, #404]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f003 030c 	and.w	r3, r3, #12
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d00b      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ebe:	4b62      	ldr	r3, [pc, #392]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008ec0:	689b      	ldr	r3, [r3, #8]
 8008ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008ec6:	2b08      	cmp	r3, #8
 8008ec8:	d11c      	bne.n	8008f04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008eca:	4b5f      	ldr	r3, [pc, #380]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d116      	bne.n	8008f04 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ed6:	4b5c      	ldr	r3, [pc, #368]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0302 	and.w	r3, r3, #2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d005      	beq.n	8008eee <HAL_RCC_OscConfig+0x152>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68db      	ldr	r3, [r3, #12]
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d001      	beq.n	8008eee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e1d0      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eee:	4b56      	ldr	r3, [pc, #344]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	4952      	ldr	r1, [pc, #328]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008f02:	e03a      	b.n	8008f7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d020      	beq.n	8008f4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008f0c:	4b4f      	ldr	r3, [pc, #316]	; (800904c <HAL_RCC_OscConfig+0x2b0>)
 8008f0e:	2201      	movs	r2, #1
 8008f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f12:	f7fb f9cb 	bl	80042ac <HAL_GetTick>
 8008f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f18:	e008      	b.n	8008f2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f1a:	f7fb f9c7 	bl	80042ac <HAL_GetTick>
 8008f1e:	4602      	mov	r2, r0
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d901      	bls.n	8008f2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	e1b1      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f2c:	4b46      	ldr	r3, [pc, #280]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d0f0      	beq.n	8008f1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f38:	4b43      	ldr	r3, [pc, #268]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	00db      	lsls	r3, r3, #3
 8008f46:	4940      	ldr	r1, [pc, #256]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008f48:	4313      	orrs	r3, r2
 8008f4a:	600b      	str	r3, [r1, #0]
 8008f4c:	e015      	b.n	8008f7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f4e:	4b3f      	ldr	r3, [pc, #252]	; (800904c <HAL_RCC_OscConfig+0x2b0>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f54:	f7fb f9aa 	bl	80042ac <HAL_GetTick>
 8008f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008f5c:	f7fb f9a6 	bl	80042ac <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e190      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f6e:	4b36      	ldr	r3, [pc, #216]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0302 	and.w	r3, r3, #2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1f0      	bne.n	8008f5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d030      	beq.n	8008fe8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	695b      	ldr	r3, [r3, #20]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d016      	beq.n	8008fbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f8e:	4b30      	ldr	r3, [pc, #192]	; (8009050 <HAL_RCC_OscConfig+0x2b4>)
 8008f90:	2201      	movs	r2, #1
 8008f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f94:	f7fb f98a 	bl	80042ac <HAL_GetTick>
 8008f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f9a:	e008      	b.n	8008fae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008f9c:	f7fb f986 	bl	80042ac <HAL_GetTick>
 8008fa0:	4602      	mov	r2, r0
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	1ad3      	subs	r3, r2, r3
 8008fa6:	2b02      	cmp	r3, #2
 8008fa8:	d901      	bls.n	8008fae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008faa:	2303      	movs	r3, #3
 8008fac:	e170      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008fae:	4b26      	ldr	r3, [pc, #152]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0f0      	beq.n	8008f9c <HAL_RCC_OscConfig+0x200>
 8008fba:	e015      	b.n	8008fe8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008fbc:	4b24      	ldr	r3, [pc, #144]	; (8009050 <HAL_RCC_OscConfig+0x2b4>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc2:	f7fb f973 	bl	80042ac <HAL_GetTick>
 8008fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fc8:	e008      	b.n	8008fdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008fca:	f7fb f96f 	bl	80042ac <HAL_GetTick>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	1ad3      	subs	r3, r2, r3
 8008fd4:	2b02      	cmp	r3, #2
 8008fd6:	d901      	bls.n	8008fdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e159      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fdc:	4b1a      	ldr	r3, [pc, #104]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fe0:	f003 0302 	and.w	r3, r3, #2
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1f0      	bne.n	8008fca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 0304 	and.w	r3, r3, #4
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 80a0 	beq.w	8009136 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008ffa:	4b13      	ldr	r3, [pc, #76]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8008ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10f      	bne.n	8009026 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009006:	2300      	movs	r3, #0
 8009008:	60bb      	str	r3, [r7, #8]
 800900a:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 800900c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800900e:	4a0e      	ldr	r2, [pc, #56]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8009010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009014:	6413      	str	r3, [r2, #64]	; 0x40
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <HAL_RCC_OscConfig+0x2ac>)
 8009018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800901a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800901e:	60bb      	str	r3, [r7, #8]
 8009020:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009022:	2301      	movs	r3, #1
 8009024:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009026:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <HAL_RCC_OscConfig+0x2b8>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902e:	2b00      	cmp	r3, #0
 8009030:	d121      	bne.n	8009076 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009032:	4b08      	ldr	r3, [pc, #32]	; (8009054 <HAL_RCC_OscConfig+0x2b8>)
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a07      	ldr	r2, [pc, #28]	; (8009054 <HAL_RCC_OscConfig+0x2b8>)
 8009038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800903c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800903e:	f7fb f935 	bl	80042ac <HAL_GetTick>
 8009042:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009044:	e011      	b.n	800906a <HAL_RCC_OscConfig+0x2ce>
 8009046:	bf00      	nop
 8009048:	40023800 	.word	0x40023800
 800904c:	42470000 	.word	0x42470000
 8009050:	42470e80 	.word	0x42470e80
 8009054:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009058:	f7fb f928 	bl	80042ac <HAL_GetTick>
 800905c:	4602      	mov	r2, r0
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	1ad3      	subs	r3, r2, r3
 8009062:	2b02      	cmp	r3, #2
 8009064:	d901      	bls.n	800906a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009066:	2303      	movs	r3, #3
 8009068:	e112      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800906a:	4b8b      	ldr	r3, [pc, #556]	; (8009298 <HAL_RCC_OscConfig+0x4fc>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0f0      	beq.n	8009058 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	2b01      	cmp	r3, #1
 800907c:	d106      	bne.n	800908c <HAL_RCC_OscConfig+0x2f0>
 800907e:	4b87      	ldr	r3, [pc, #540]	; (800929c <HAL_RCC_OscConfig+0x500>)
 8009080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009082:	4a86      	ldr	r2, [pc, #536]	; (800929c <HAL_RCC_OscConfig+0x500>)
 8009084:	f043 0301 	orr.w	r3, r3, #1
 8009088:	6713      	str	r3, [r2, #112]	; 0x70
 800908a:	e01c      	b.n	80090c6 <HAL_RCC_OscConfig+0x32a>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	2b05      	cmp	r3, #5
 8009092:	d10c      	bne.n	80090ae <HAL_RCC_OscConfig+0x312>
 8009094:	4b81      	ldr	r3, [pc, #516]	; (800929c <HAL_RCC_OscConfig+0x500>)
 8009096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009098:	4a80      	ldr	r2, [pc, #512]	; (800929c <HAL_RCC_OscConfig+0x500>)
 800909a:	f043 0304 	orr.w	r3, r3, #4
 800909e:	6713      	str	r3, [r2, #112]	; 0x70
 80090a0:	4b7e      	ldr	r3, [pc, #504]	; (800929c <HAL_RCC_OscConfig+0x500>)
 80090a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a4:	4a7d      	ldr	r2, [pc, #500]	; (800929c <HAL_RCC_OscConfig+0x500>)
 80090a6:	f043 0301 	orr.w	r3, r3, #1
 80090aa:	6713      	str	r3, [r2, #112]	; 0x70
 80090ac:	e00b      	b.n	80090c6 <HAL_RCC_OscConfig+0x32a>
 80090ae:	4b7b      	ldr	r3, [pc, #492]	; (800929c <HAL_RCC_OscConfig+0x500>)
 80090b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b2:	4a7a      	ldr	r2, [pc, #488]	; (800929c <HAL_RCC_OscConfig+0x500>)
 80090b4:	f023 0301 	bic.w	r3, r3, #1
 80090b8:	6713      	str	r3, [r2, #112]	; 0x70
 80090ba:	4b78      	ldr	r3, [pc, #480]	; (800929c <HAL_RCC_OscConfig+0x500>)
 80090bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090be:	4a77      	ldr	r2, [pc, #476]	; (800929c <HAL_RCC_OscConfig+0x500>)
 80090c0:	f023 0304 	bic.w	r3, r3, #4
 80090c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d015      	beq.n	80090fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090ce:	f7fb f8ed 	bl	80042ac <HAL_GetTick>
 80090d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090d4:	e00a      	b.n	80090ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80090d6:	f7fb f8e9 	bl	80042ac <HAL_GetTick>
 80090da:	4602      	mov	r2, r0
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	1ad3      	subs	r3, r2, r3
 80090e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d901      	bls.n	80090ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e0d1      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090ec:	4b6b      	ldr	r3, [pc, #428]	; (800929c <HAL_RCC_OscConfig+0x500>)
 80090ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d0ee      	beq.n	80090d6 <HAL_RCC_OscConfig+0x33a>
 80090f8:	e014      	b.n	8009124 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090fa:	f7fb f8d7 	bl	80042ac <HAL_GetTick>
 80090fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009100:	e00a      	b.n	8009118 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009102:	f7fb f8d3 	bl	80042ac <HAL_GetTick>
 8009106:	4602      	mov	r2, r0
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009110:	4293      	cmp	r3, r2
 8009112:	d901      	bls.n	8009118 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e0bb      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009118:	4b60      	ldr	r3, [pc, #384]	; (800929c <HAL_RCC_OscConfig+0x500>)
 800911a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1ee      	bne.n	8009102 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009124:	7dfb      	ldrb	r3, [r7, #23]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d105      	bne.n	8009136 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800912a:	4b5c      	ldr	r3, [pc, #368]	; (800929c <HAL_RCC_OscConfig+0x500>)
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	4a5b      	ldr	r2, [pc, #364]	; (800929c <HAL_RCC_OscConfig+0x500>)
 8009130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009134:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	699b      	ldr	r3, [r3, #24]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 80a7 	beq.w	800928e <HAL_RCC_OscConfig+0x4f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009140:	4b56      	ldr	r3, [pc, #344]	; (800929c <HAL_RCC_OscConfig+0x500>)
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	f003 030c 	and.w	r3, r3, #12
 8009148:	2b08      	cmp	r3, #8
 800914a:	d060      	beq.n	800920e <HAL_RCC_OscConfig+0x472>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	699b      	ldr	r3, [r3, #24]
 8009150:	2b02      	cmp	r3, #2
 8009152:	d145      	bne.n	80091e0 <HAL_RCC_OscConfig+0x444>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009154:	4b52      	ldr	r3, [pc, #328]	; (80092a0 <HAL_RCC_OscConfig+0x504>)
 8009156:	2200      	movs	r2, #0
 8009158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800915a:	f7fb f8a7 	bl	80042ac <HAL_GetTick>
 800915e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009160:	e008      	b.n	8009174 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009162:	f7fb f8a3 	bl	80042ac <HAL_GetTick>
 8009166:	4602      	mov	r2, r0
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	1ad3      	subs	r3, r2, r3
 800916c:	2b02      	cmp	r3, #2
 800916e:	d901      	bls.n	8009174 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009170:	2303      	movs	r3, #3
 8009172:	e08d      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009174:	4b49      	ldr	r3, [pc, #292]	; (800929c <HAL_RCC_OscConfig+0x500>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1f0      	bne.n	8009162 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	69da      	ldr	r2, [r3, #28]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	431a      	orrs	r2, r3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800918e:	019b      	lsls	r3, r3, #6
 8009190:	431a      	orrs	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009196:	085b      	lsrs	r3, r3, #1
 8009198:	3b01      	subs	r3, #1
 800919a:	041b      	lsls	r3, r3, #16
 800919c:	431a      	orrs	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a2:	061b      	lsls	r3, r3, #24
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091aa:	071b      	lsls	r3, r3, #28
 80091ac:	493b      	ldr	r1, [pc, #236]	; (800929c <HAL_RCC_OscConfig+0x500>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80091b2:	4b3b      	ldr	r3, [pc, #236]	; (80092a0 <HAL_RCC_OscConfig+0x504>)
 80091b4:	2201      	movs	r2, #1
 80091b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b8:	f7fb f878 	bl	80042ac <HAL_GetTick>
 80091bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091be:	e008      	b.n	80091d2 <HAL_RCC_OscConfig+0x436>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091c0:	f7fb f874 	bl	80042ac <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d901      	bls.n	80091d2 <HAL_RCC_OscConfig+0x436>
          {
            return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e05e      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091d2:	4b32      	ldr	r3, [pc, #200]	; (800929c <HAL_RCC_OscConfig+0x500>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0f0      	beq.n	80091c0 <HAL_RCC_OscConfig+0x424>
 80091de:	e056      	b.n	800928e <HAL_RCC_OscConfig+0x4f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091e0:	4b2f      	ldr	r3, [pc, #188]	; (80092a0 <HAL_RCC_OscConfig+0x504>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e6:	f7fb f861 	bl	80042ac <HAL_GetTick>
 80091ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091ec:	e008      	b.n	8009200 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80091ee:	f7fb f85d 	bl	80042ac <HAL_GetTick>
 80091f2:	4602      	mov	r2, r0
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	1ad3      	subs	r3, r2, r3
 80091f8:	2b02      	cmp	r3, #2
 80091fa:	d901      	bls.n	8009200 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80091fc:	2303      	movs	r3, #3
 80091fe:	e047      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009200:	4b26      	ldr	r3, [pc, #152]	; (800929c <HAL_RCC_OscConfig+0x500>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1f0      	bne.n	80091ee <HAL_RCC_OscConfig+0x452>
 800920c:	e03f      	b.n	800928e <HAL_RCC_OscConfig+0x4f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	2b01      	cmp	r3, #1
 8009214:	d101      	bne.n	800921a <HAL_RCC_OscConfig+0x47e>
      {
        return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e03a      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800921a:	4b20      	ldr	r3, [pc, #128]	; (800929c <HAL_RCC_OscConfig+0x500>)
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	699b      	ldr	r3, [r3, #24]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d030      	beq.n	800928a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009232:	429a      	cmp	r2, r3
 8009234:	d129      	bne.n	800928a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009240:	429a      	cmp	r2, r3
 8009242:	d122      	bne.n	800928a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009244:	68fa      	ldr	r2, [r7, #12]
 8009246:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800924a:	4013      	ands	r3, r2
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009250:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009252:	4293      	cmp	r3, r2
 8009254:	d119      	bne.n	800928a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009260:	085b      	lsrs	r3, r3, #1
 8009262:	3b01      	subs	r3, #1
 8009264:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009266:	429a      	cmp	r2, r3
 8009268:	d10f      	bne.n	800928a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009276:	429a      	cmp	r2, r3
 8009278:	d107      	bne.n	800928a <HAL_RCC_OscConfig+0x4ee>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009284:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009286:	429a      	cmp	r2, r3
 8009288:	d001      	beq.n	800928e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e000      	b.n	8009290 <HAL_RCC_OscConfig+0x4f4>
        }
      }
    }
  }
  return HAL_OK;
 800928e:	2300      	movs	r3, #0
}
 8009290:	4618      	mov	r0, r3
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}
 8009298:	40007000 	.word	0x40007000
 800929c:	40023800 	.word	0x40023800
 80092a0:	42470060 	.word	0x42470060

080092a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e022      	b.n	80092fc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d105      	bne.n	80092ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7f9 ff39 	bl	8003140 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2203      	movs	r2, #3
 80092d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 f814 	bl	8009304 <HAL_SD_InitCard>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e00a      	b.n	80092fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2200      	movs	r2, #0
 80092f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80092fa:	2300      	movs	r3, #0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009304:	b5b0      	push	{r4, r5, r7, lr}
 8009306:	b08e      	sub	sp, #56	; 0x38
 8009308:	af04      	add	r7, sp, #16
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800930c:	2300      	movs	r3, #0
 800930e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8009314:	2300      	movs	r3, #0
 8009316:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800931c:	2300      	movs	r3, #0
 800931e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8009320:	2376      	movs	r3, #118	; 0x76
 8009322:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681d      	ldr	r5, [r3, #0]
 8009328:	466c      	mov	r4, sp
 800932a:	f107 0314 	add.w	r3, r7, #20
 800932e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009332:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009336:	f107 0308 	add.w	r3, r7, #8
 800933a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800933c:	4628      	mov	r0, r5
 800933e:	f002 ffb5 	bl	800c2ac <SDIO_Init>
 8009342:	4603      	mov	r3, r0
 8009344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8009348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e04c      	b.n	80093ee <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8009354:	4b28      	ldr	r3, [pc, #160]	; (80093f8 <HAL_SD_InitCard+0xf4>)
 8009356:	2200      	movs	r2, #0
 8009358:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4618      	mov	r0, r3
 8009360:	f002 ffed 	bl	800c33e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8009364:	4b24      	ldr	r3, [pc, #144]	; (80093f8 <HAL_SD_InitCard+0xf4>)
 8009366:	2201      	movs	r2, #1
 8009368:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f000 ffee 	bl	800a34c <SD_PowerON>
 8009370:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00b      	beq.n	8009390 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2201      	movs	r2, #1
 800937c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009384:	6a3b      	ldr	r3, [r7, #32]
 8009386:	431a      	orrs	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e02e      	b.n	80093ee <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 ff0f 	bl	800a1b4 <SD_InitCard>
 8009396:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009398:	6a3b      	ldr	r3, [r7, #32]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d00b      	beq.n	80093b6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093aa:	6a3b      	ldr	r3, [r7, #32]
 80093ac:	431a      	orrs	r2, r3
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e01b      	b.n	80093ee <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80093be:	4618      	mov	r0, r3
 80093c0:	f003 f850 	bl	800c464 <SDMMC_CmdBlockLength>
 80093c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00f      	beq.n	80093ec <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a0a      	ldr	r2, [pc, #40]	; (80093fc <HAL_SD_InitCard+0xf8>)
 80093d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093d8:	6a3b      	ldr	r3, [r7, #32]
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	e000      	b.n	80093ee <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3728      	adds	r7, #40	; 0x28
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bdb0      	pop	{r4, r5, r7, pc}
 80093f6:	bf00      	nop
 80093f8:	422580a0 	.word	0x422580a0
 80093fc:	004005ff 	.word	0x004005ff

08009400 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b08c      	sub	sp, #48	; 0x30
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
 800940c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d107      	bne.n	8009428 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e0be      	b.n	80095a6 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b01      	cmp	r3, #1
 8009432:	f040 80b7 	bne.w	80095a4 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2200      	movs	r2, #0
 800943a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800943c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	441a      	add	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009446:	429a      	cmp	r2, r3
 8009448:	d907      	bls.n	800945a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e0a5      	b.n	80095a6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2203      	movs	r2, #3
 800945e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2200      	movs	r2, #0
 8009468:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8009478:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800947e:	4a4c      	ldr	r2, [pc, #304]	; (80095b0 <HAL_SD_ReadBlocks_DMA+0x1b0>)
 8009480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009486:	4a4b      	ldr	r2, [pc, #300]	; (80095b4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8009488:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800948e:	2200      	movs	r2, #0
 8009490:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009496:	2200      	movs	r2, #0
 8009498:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3380      	adds	r3, #128	; 0x80
 80094c0:	4619      	mov	r1, r3
 80094c2:	68ba      	ldr	r2, [r7, #8]
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	025b      	lsls	r3, r3, #9
 80094c8:	089b      	lsrs	r3, r3, #2
 80094ca:	f7fb fed1 	bl	8005270 <HAL_DMA_Start_IT>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d017      	beq.n	8009504 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80094e2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a33      	ldr	r2, [pc, #204]	; (80095b8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80094ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	e050      	b.n	80095a6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009504:	4b2d      	ldr	r3, [pc, #180]	; (80095bc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009506:	2201      	movs	r2, #1
 8009508:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950e:	2b01      	cmp	r3, #1
 8009510:	d002      	beq.n	8009518 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	025b      	lsls	r3, r3, #9
 8009516:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800951c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	025b      	lsls	r3, r3, #9
 8009522:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009524:	2390      	movs	r3, #144	; 0x90
 8009526:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009528:	2302      	movs	r3, #2
 800952a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800952c:	2300      	movs	r3, #0
 800952e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009530:	2301      	movs	r3, #1
 8009532:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f107 0210 	add.w	r2, r7, #16
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f002 ff64 	bl	800c40c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b01      	cmp	r3, #1
 8009548:	d90a      	bls.n	8009560 <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2282      	movs	r2, #130	; 0x82
 800954e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009556:	4618      	mov	r0, r3
 8009558:	f002 ffc8 	bl	800c4ec <SDMMC_CmdReadMultiBlock>
 800955c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800955e:	e009      	b.n	8009574 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2281      	movs	r2, #129	; 0x81
 8009564:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800956c:	4618      	mov	r0, r3
 800956e:	f002 ff9b 	bl	800c4a8 <SDMMC_CmdReadSingleBlock>
 8009572:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d012      	beq.n	80095a0 <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a0e      	ldr	r2, [pc, #56]	; (80095b8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009580:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009588:	431a      	orrs	r2, r3
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2201      	movs	r2, #1
 8009592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2200      	movs	r2, #0
 800959a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	e002      	b.n	80095a6 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	e000      	b.n	80095a6 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 80095a4:	2302      	movs	r3, #2
  }
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3730      	adds	r7, #48	; 0x30
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	08009fc3 	.word	0x08009fc3
 80095b4:	0800a035 	.word	0x0800a035
 80095b8:	004005ff 	.word	0x004005ff
 80095bc:	4225858c 	.word	0x4225858c

080095c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b08c      	sub	sp, #48	; 0x30
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d107      	bne.n	80095e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e0c1      	b.n	800976c <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	f040 80ba 	bne.w	800976a <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2200      	movs	r2, #0
 80095fa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80095fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	441a      	add	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009606:	429a      	cmp	r2, r3
 8009608:	d907      	bls.n	800961a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800960e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8009616:	2301      	movs	r3, #1
 8009618:	e0a8      	b.n	800976c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2203      	movs	r2, #3
 800961e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2200      	movs	r2, #0
 8009628:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f042 021a 	orr.w	r2, r2, #26
 8009638:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800963e:	4a4d      	ldr	r2, [pc, #308]	; (8009774 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 8009640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009646:	4a4c      	ldr	r2, [pc, #304]	; (8009778 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 8009648:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800964e:	2200      	movs	r2, #0
 8009650:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009656:	2b01      	cmp	r3, #1
 8009658:	d002      	beq.n	8009660 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800965a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965c:	025b      	lsls	r3, r3, #9
 800965e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	2b01      	cmp	r3, #1
 8009664:	d90a      	bls.n	800967c <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	22a0      	movs	r2, #160	; 0xa0
 800966a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009672:	4618      	mov	r0, r3
 8009674:	f002 ff7e 	bl	800c574 <SDMMC_CmdWriteMultiBlock>
 8009678:	62f8      	str	r0, [r7, #44]	; 0x2c
 800967a:	e009      	b.n	8009690 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2290      	movs	r2, #144	; 0x90
 8009680:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009688:	4618      	mov	r0, r3
 800968a:	f002 ff51 	bl	800c530 <SDMMC_CmdWriteSingleBlock>
 800968e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d012      	beq.n	80096bc <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a38      	ldr	r2, [pc, #224]	; (800977c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800969c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a4:	431a      	orrs	r2, r3
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	e057      	b.n	800976c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80096bc:	4b30      	ldr	r3, [pc, #192]	; (8009780 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80096be:	2201      	movs	r2, #1
 80096c0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c6:	2240      	movs	r2, #64	; 0x40
 80096c8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096da:	689a      	ldr	r2, [r3, #8]
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	430a      	orrs	r2, r1
 80096e4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80096ea:	68b9      	ldr	r1, [r7, #8]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3380      	adds	r3, #128	; 0x80
 80096f2:	461a      	mov	r2, r3
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	025b      	lsls	r3, r3, #9
 80096f8:	089b      	lsrs	r3, r3, #2
 80096fa:	f7fb fdb9 	bl	8005270 <HAL_DMA_Start_IT>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d01a      	beq.n	800973a <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 021a 	bic.w	r2, r2, #26
 8009712:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a18      	ldr	r2, [pc, #96]	; (800977c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800971a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009720:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2201      	movs	r2, #1
 800972c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e018      	b.n	800976c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800973a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800973e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	025b      	lsls	r3, r3, #9
 8009744:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8009746:	2390      	movs	r3, #144	; 0x90
 8009748:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800974a:	2300      	movs	r3, #0
 800974c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800974e:	2300      	movs	r3, #0
 8009750:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8009752:	2301      	movs	r3, #1
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f107 0210 	add.w	r2, r7, #16
 800975e:	4611      	mov	r1, r2
 8009760:	4618      	mov	r0, r3
 8009762:	f002 fe53 	bl	800c40c <SDIO_ConfigData>

      return HAL_OK;
 8009766:	2300      	movs	r3, #0
 8009768:	e000      	b.n	800976c <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800976a:	2302      	movs	r3, #2
  }
}
 800976c:	4618      	mov	r0, r3
 800976e:	3730      	adds	r7, #48	; 0x30
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	08009f99 	.word	0x08009f99
 8009778:	0800a035 	.word	0x0800a035
 800977c:	004005ff 	.word	0x004005ff
 8009780:	4225858c 	.word	0x4225858c

08009784 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009798:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d008      	beq.n	80097b2 <HAL_SD_IRQHandler+0x2e>
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f003 0308 	and.w	r3, r3, #8
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 ffed 	bl	800a78a <SD_Read_IT>
 80097b0:	e155      	b.n	8009a5e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f000 808f 	beq.w	80098e0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097ca:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	6812      	ldr	r2, [r2, #0]
 80097d6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80097da:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80097de:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f022 0201 	bic.w	r2, r2, #1
 80097ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f003 0308 	and.w	r3, r3, #8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d039      	beq.n	800986e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f003 0302 	and.w	r3, r3, #2
 8009800:	2b00      	cmp	r3, #0
 8009802:	d104      	bne.n	800980e <HAL_SD_IRQHandler+0x8a>
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f003 0320 	and.w	r3, r3, #32
 800980a:	2b00      	cmp	r3, #0
 800980c:	d011      	beq.n	8009832 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f002 fed0 	bl	800c5b8 <SDMMC_CmdStopTransfer>
 8009818:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d008      	beq.n	8009832 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	431a      	orrs	r2, r3
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 f91f 	bl	8009a70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f240 523a 	movw	r2, #1338	; 0x53a
 800983a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2201      	movs	r2, #1
 8009840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d104      	bne.n	800985e <HAL_SD_IRQHandler+0xda>
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f004 feaa 	bl	800e5b8 <HAL_SD_RxCpltCallback>
 8009864:	e0fb      	b.n	8009a5e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f004 fe9c 	bl	800e5a4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800986c:	e0f7      	b.n	8009a5e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80f2 	beq.w	8009a5e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	f003 0320 	and.w	r3, r3, #32
 8009880:	2b00      	cmp	r3, #0
 8009882:	d011      	beq.n	80098a8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4618      	mov	r0, r3
 800988a:	f002 fe95 	bl	800c5b8 <SDMMC_CmdStopTransfer>
 800988e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d008      	beq.n	80098a8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	431a      	orrs	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f8e4 	bl	8009a70 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f040 80d5 	bne.w	8009a5e <HAL_SD_IRQHandler+0x2da>
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f040 80cf 	bne.w	8009a5e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f022 0208 	bic.w	r2, r2, #8
 80098ce:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f004 fe63 	bl	800e5a4 <HAL_SD_TxCpltCallback>
}
 80098de:	e0be      	b.n	8009a5e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d008      	beq.n	8009900 <HAL_SD_IRQHandler+0x17c>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f003 0308 	and.w	r3, r3, #8
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d003      	beq.n	8009900 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 ff97 	bl	800a82c <SD_Write_IT>
 80098fe:	e0ae      	b.n	8009a5e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009906:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 80a7 	beq.w	8009a5e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009916:	f003 0302 	and.w	r3, r3, #2
 800991a:	2b00      	cmp	r3, #0
 800991c:	d005      	beq.n	800992a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009922:	f043 0202 	orr.w	r2, r3, #2
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009930:	f003 0308 	and.w	r3, r3, #8
 8009934:	2b00      	cmp	r3, #0
 8009936:	d005      	beq.n	8009944 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800993c:	f043 0208 	orr.w	r2, r3, #8
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994a:	f003 0320 	and.w	r3, r3, #32
 800994e:	2b00      	cmp	r3, #0
 8009950:	d005      	beq.n	800995e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009956:	f043 0220 	orr.w	r2, r3, #32
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009964:	f003 0310 	and.w	r3, r3, #16
 8009968:	2b00      	cmp	r3, #0
 800996a:	d005      	beq.n	8009978 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009970:	f043 0210 	orr.w	r2, r3, #16
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009980:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009990:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4618      	mov	r0, r3
 8009998:	f002 fe0e 	bl	800c5b8 <SDMMC_CmdStopTransfer>
 800999c:	4602      	mov	r2, r0
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a2:	431a      	orrs	r2, r3
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f003 0308 	and.w	r3, r3, #8
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00a      	beq.n	80099c8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f000 f855 	bl	8009a70 <HAL_SD_ErrorCallback>
}
 80099c6:	e04a      	b.n	8009a5e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d045      	beq.n	8009a5e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f003 0310 	and.w	r3, r3, #16
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d104      	bne.n	80099e6 <HAL_SD_IRQHandler+0x262>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d011      	beq.n	8009a0a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ea:	4a1f      	ldr	r2, [pc, #124]	; (8009a68 <HAL_SD_IRQHandler+0x2e4>)
 80099ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fb fd04 	bl	8005400 <HAL_DMA_Abort_IT>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d02f      	beq.n	8009a5e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 fb68 	bl	800a0d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009a08:	e029      	b.n	8009a5e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f003 0301 	and.w	r3, r3, #1
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d104      	bne.n	8009a1e <HAL_SD_IRQHandler+0x29a>
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f003 0302 	and.w	r3, r3, #2
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d011      	beq.n	8009a42 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a22:	4a12      	ldr	r2, [pc, #72]	; (8009a6c <HAL_SD_IRQHandler+0x2e8>)
 8009a24:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fb fce8 	bl	8005400 <HAL_DMA_Abort_IT>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d013      	beq.n	8009a5e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 fb83 	bl	800a146 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8009a40:	e00d      	b.n	8009a5e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f004 fd9a 	bl	800e590 <HAL_SD_AbortCallback>
}
 8009a5c:	e7ff      	b.n	8009a5e <HAL_SD_IRQHandler+0x2da>
 8009a5e:	bf00      	nop
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	0800a0d9 	.word	0x0800a0d9
 8009a6c:	0800a147 	.word	0x0800a147

08009a70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009a78:	bf00      	nop
 8009a7a:	370c      	adds	r7, #12
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a92:	0f9b      	lsrs	r3, r3, #30
 8009a94:	b2da      	uxtb	r2, r3
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a9e:	0e9b      	lsrs	r3, r3, #26
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	f003 030f 	and.w	r3, r3, #15
 8009aa6:	b2da      	uxtb	r2, r3
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ab0:	0e1b      	lsrs	r3, r3, #24
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	f003 0303 	and.w	r3, r3, #3
 8009ab8:	b2da      	uxtb	r2, r3
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ac2:	0c1b      	lsrs	r3, r3, #16
 8009ac4:	b2da      	uxtb	r2, r3
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ace:	0a1b      	lsrs	r3, r3, #8
 8009ad0:	b2da      	uxtb	r2, r3
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ae4:	0d1b      	lsrs	r3, r3, #20
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009af0:	0c1b      	lsrs	r3, r3, #16
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b02:	0bdb      	lsrs	r3, r3, #15
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	b2da      	uxtb	r2, r3
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b14:	0b9b      	lsrs	r3, r3, #14
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b26:	0b5b      	lsrs	r3, r3, #13
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b38:	0b1b      	lsrs	r3, r3, #12
 8009b3a:	b2db      	uxtb	r3, r3
 8009b3c:	f003 0301 	and.w	r3, r3, #1
 8009b40:	b2da      	uxtb	r2, r3
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d163      	bne.n	8009c1c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b58:	009a      	lsls	r2, r3, #2
 8009b5a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009b5e:	4013      	ands	r3, r2
 8009b60:	687a      	ldr	r2, [r7, #4]
 8009b62:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8009b64:	0f92      	lsrs	r2, r2, #30
 8009b66:	431a      	orrs	r2, r3
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b70:	0edb      	lsrs	r3, r3, #27
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	f003 0307 	and.w	r3, r3, #7
 8009b78:	b2da      	uxtb	r2, r3
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b82:	0e1b      	lsrs	r3, r3, #24
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	f003 0307 	and.w	r3, r3, #7
 8009b8a:	b2da      	uxtb	r2, r3
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b94:	0d5b      	lsrs	r3, r3, #21
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	f003 0307 	and.w	r3, r3, #7
 8009b9c:	b2da      	uxtb	r2, r3
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ba6:	0c9b      	lsrs	r3, r3, #18
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	f003 0307 	and.w	r3, r3, #7
 8009bae:	b2da      	uxtb	r2, r3
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009bb8:	0bdb      	lsrs	r3, r3, #15
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	f003 0307 	and.w	r3, r3, #7
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	691b      	ldr	r3, [r3, #16]
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	7e1b      	ldrb	r3, [r3, #24]
 8009bd4:	b2db      	uxtb	r3, r3
 8009bd6:	f003 0307 	and.w	r3, r3, #7
 8009bda:	3302      	adds	r3, #2
 8009bdc:	2201      	movs	r2, #1
 8009bde:	fa02 f303 	lsl.w	r3, r2, r3
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009be6:	fb02 f203 	mul.w	r2, r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	7a1b      	ldrb	r3, [r3, #8]
 8009bf2:	b2db      	uxtb	r3, r3
 8009bf4:	f003 030f 	and.w	r3, r3, #15
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	409a      	lsls	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8009c08:	0a52      	lsrs	r2, r2, #9
 8009c0a:	fb02 f203 	mul.w	r2, r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c18:	661a      	str	r2, [r3, #96]	; 0x60
 8009c1a:	e031      	b.n	8009c80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d11d      	bne.n	8009c60 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009c28:	041b      	lsls	r3, r3, #16
 8009c2a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c32:	0c1b      	lsrs	r3, r3, #16
 8009c34:	431a      	orrs	r2, r3
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	029a      	lsls	r2, r3, #10
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009c54:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	661a      	str	r2, [r3, #96]	; 0x60
 8009c5e:	e00f      	b.n	8009c80 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a58      	ldr	r2, [pc, #352]	; (8009dc8 <HAL_SD_GetCardCSD+0x344>)
 8009c66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c6c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e09d      	b.n	8009dbc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c84:	0b9b      	lsrs	r3, r3, #14
 8009c86:	b2db      	uxtb	r3, r3
 8009c88:	f003 0301 	and.w	r3, r3, #1
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c96:	09db      	lsrs	r3, r3, #7
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ca8:	b2db      	uxtb	r3, r3
 8009caa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cae:	b2da      	uxtb	r2, r3
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb8:	0fdb      	lsrs	r3, r3, #31
 8009cba:	b2da      	uxtb	r2, r3
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc4:	0f5b      	lsrs	r3, r3, #29
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	b2da      	uxtb	r2, r3
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd6:	0e9b      	lsrs	r3, r3, #26
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	f003 0307 	and.w	r3, r3, #7
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ce8:	0d9b      	lsrs	r3, r3, #22
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	f003 030f 	and.w	r3, r3, #15
 8009cf0:	b2da      	uxtb	r2, r3
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cfa:	0d5b      	lsrs	r3, r3, #21
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d16:	0c1b      	lsrs	r3, r3, #16
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	f003 0301 	and.w	r3, r3, #1
 8009d1e:	b2da      	uxtb	r2, r3
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2a:	0bdb      	lsrs	r3, r3, #15
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	f003 0301 	and.w	r3, r3, #1
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d3e:	0b9b      	lsrs	r3, r3, #14
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	f003 0301 	and.w	r3, r3, #1
 8009d46:	b2da      	uxtb	r2, r3
 8009d48:	683b      	ldr	r3, [r7, #0]
 8009d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d52:	0b5b      	lsrs	r3, r3, #13
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	b2da      	uxtb	r2, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d66:	0b1b      	lsrs	r3, r3, #12
 8009d68:	b2db      	uxtb	r3, r3
 8009d6a:	f003 0301 	and.w	r3, r3, #1
 8009d6e:	b2da      	uxtb	r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d7a:	0a9b      	lsrs	r3, r3, #10
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	f003 0303 	and.w	r3, r3, #3
 8009d82:	b2da      	uxtb	r2, r3
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8e:	0a1b      	lsrs	r3, r3, #8
 8009d90:	b2db      	uxtb	r3, r3
 8009d92:	f003 0303 	and.w	r3, r3, #3
 8009d96:	b2da      	uxtb	r2, r3
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009da2:	085b      	lsrs	r3, r3, #1
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr
 8009dc8:	004005ff 	.word	0x004005ff

08009dcc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009e24:	b5b0      	push	{r4, r5, r7, lr}
 8009e26:	b08e      	sub	sp, #56	; 0x38
 8009e28:	af04      	add	r7, sp, #16
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2203      	movs	r2, #3
 8009e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e40:	2b03      	cmp	r3, #3
 8009e42:	d02e      	beq.n	8009ea2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e4a:	d106      	bne.n	8009e5a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	639a      	str	r2, [r3, #56]	; 0x38
 8009e58:	e029      	b.n	8009eae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e60:	d10a      	bne.n	8009e78 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 fb28 	bl	800a4b8 <SD_WideBus_Enable>
 8009e68:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	431a      	orrs	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	639a      	str	r2, [r3, #56]	; 0x38
 8009e76:	e01a      	b.n	8009eae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10a      	bne.n	8009e94 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fb65 	bl	800a54e <SD_WideBus_Disable>
 8009e84:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e8a:	6a3b      	ldr	r3, [r7, #32]
 8009e8c:	431a      	orrs	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	639a      	str	r2, [r3, #56]	; 0x38
 8009e92:	e00c      	b.n	8009eae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	639a      	str	r2, [r3, #56]	; 0x38
 8009ea0:	e005      	b.n	8009eae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ea6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d00b      	beq.n	8009ece <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a26      	ldr	r2, [pc, #152]	; (8009f54 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009ebc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ecc:	e01f      	b.n	8009f0e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	699b      	ldr	r3, [r3, #24]
 8009eee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681d      	ldr	r5, [r3, #0]
 8009ef4:	466c      	mov	r4, sp
 8009ef6:	f107 0314 	add.w	r3, r7, #20
 8009efa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009efe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009f08:	4628      	mov	r0, r5
 8009f0a:	f002 f9cf 	bl	800c2ac <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009f16:	4618      	mov	r0, r3
 8009f18:	f002 faa4 	bl	800c464 <SDMMC_CmdBlockLength>
 8009f1c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f1e:	6a3b      	ldr	r3, [r7, #32]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00c      	beq.n	8009f3e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a0a      	ldr	r2, [pc, #40]	; (8009f54 <HAL_SD_ConfigWideBusOperation+0x130>)
 8009f2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f30:	6a3b      	ldr	r3, [r7, #32]
 8009f32:	431a      	orrs	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8009f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	3728      	adds	r7, #40	; 0x28
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bdb0      	pop	{r4, r5, r7, pc}
 8009f52:	bf00      	nop
 8009f54:	004005ff 	.word	0x004005ff

08009f58 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009f60:	2300      	movs	r3, #0
 8009f62:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009f64:	f107 030c 	add.w	r3, r7, #12
 8009f68:	4619      	mov	r1, r3
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 fa7c 	bl	800a468 <SD_SendStatus>
 8009f70:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d005      	beq.n	8009f84 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	431a      	orrs	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	0a5b      	lsrs	r3, r3, #9
 8009f88:	f003 030f 	and.w	r3, r3, #15
 8009f8c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009f8e:	693b      	ldr	r3, [r7, #16]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009fb4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009fb6:	bf00      	nop
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fd4:	2b82      	cmp	r3, #130	; 0x82
 8009fd6:	d111      	bne.n	8009ffc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4618      	mov	r0, r3
 8009fde:	f002 faeb 	bl	800c5b8 <SDMMC_CmdStopTransfer>
 8009fe2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009fe4:	68bb      	ldr	r3, [r7, #8]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d008      	beq.n	8009ffc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff fd3a 	bl	8009a70 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f022 0208 	bic.w	r2, r2, #8
 800a00a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	f240 523a 	movw	r2, #1338	; 0x53a
 800a014:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f004 fac7 	bl	800e5b8 <HAL_SD_RxCpltCallback>
#endif
}
 800a02a:	bf00      	nop
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
	...

0800a034 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a040:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f7fb fb88 	bl	8005758 <HAL_DMA_GetError>
 800a048:	4603      	mov	r3, r0
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d03e      	beq.n	800a0cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a054:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a05c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d002      	beq.n	800a06a <SD_DMAError+0x36>
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b01      	cmp	r3, #1
 800a068:	d12d      	bne.n	800a0c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a19      	ldr	r2, [pc, #100]	; (800a0d4 <SD_DMAError+0xa0>)
 800a070:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a080:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a082:	697b      	ldr	r3, [r7, #20]
 800a084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a08e:	6978      	ldr	r0, [r7, #20]
 800a090:	f7ff ff62 	bl	8009f58 <HAL_SD_GetCardState>
 800a094:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	2b06      	cmp	r3, #6
 800a09a:	d002      	beq.n	800a0a2 <SD_DMAError+0x6e>
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2b05      	cmp	r3, #5
 800a0a0:	d10a      	bne.n	800a0b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f002 fa86 	bl	800c5b8 <SDMMC_CmdStopTransfer>
 800a0ac:	4602      	mov	r2, r0
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a0c0:	697b      	ldr	r3, [r7, #20]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a0c6:	6978      	ldr	r0, [r7, #20]
 800a0c8:	f7ff fcd2 	bl	8009a70 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a0cc:	bf00      	nop
 800a0ce:	3718      	adds	r7, #24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	004005ff 	.word	0x004005ff

0800a0d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b084      	sub	sp, #16
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f240 523a 	movw	r2, #1338	; 0x53a
 800a0ee:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff ff31 	bl	8009f58 <HAL_SD_GetCardState>
 800a0f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2200      	movs	r2, #0
 800a104:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b06      	cmp	r3, #6
 800a10a:	d002      	beq.n	800a112 <SD_DMATxAbort+0x3a>
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	2b05      	cmp	r3, #5
 800a110:	d10a      	bne.n	800a128 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4618      	mov	r0, r3
 800a118:	f002 fa4e 	bl	800c5b8 <SDMMC_CmdStopTransfer>
 800a11c:	4602      	mov	r2, r0
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a122:	431a      	orrs	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d103      	bne.n	800a138 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f004 fa2d 	bl	800e590 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a136:	e002      	b.n	800a13e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a138:	68f8      	ldr	r0, [r7, #12]
 800a13a:	f7ff fc99 	bl	8009a70 <HAL_SD_ErrorCallback>
}
 800a13e:	bf00      	nop
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a152:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	f240 523a 	movw	r2, #1338	; 0x53a
 800a15c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7ff fefa 	bl	8009f58 <HAL_SD_GetCardState>
 800a164:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	2b06      	cmp	r3, #6
 800a178:	d002      	beq.n	800a180 <SD_DMARxAbort+0x3a>
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	2b05      	cmp	r3, #5
 800a17e:	d10a      	bne.n	800a196 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f002 fa17 	bl	800c5b8 <SDMMC_CmdStopTransfer>
 800a18a:	4602      	mov	r2, r0
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a190:	431a      	orrs	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d103      	bne.n	800a1a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f004 f9f6 	bl	800e590 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a1a4:	e002      	b.n	800a1ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7ff fc62 	bl	8009a70 <HAL_SD_ErrorCallback>
}
 800a1ac:	bf00      	nop
 800a1ae:	3710      	adds	r7, #16
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a1b4:	b5b0      	push	{r4, r5, r7, lr}
 800a1b6:	b094      	sub	sp, #80	; 0x50
 800a1b8:	af04      	add	r7, sp, #16
 800a1ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	f002 f8c9 	bl	800c35c <SDIO_GetPowerState>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d102      	bne.n	800a1d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a1d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a1d4:	e0b6      	b.n	800a344 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d02f      	beq.n	800a23e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f002 faf2 	bl	800c7cc <SDMMC_CmdSendCID>
 800a1e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a1ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d001      	beq.n	800a1f4 <SD_InitCard+0x40>
    {
      return errorstate;
 800a1f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1f2:	e0a7      	b.n	800a344 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f002 f8f3 	bl	800c3e6 <SDIO_GetResponse>
 800a200:	4602      	mov	r2, r0
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	2104      	movs	r1, #4
 800a20c:	4618      	mov	r0, r3
 800a20e:	f002 f8ea 	bl	800c3e6 <SDIO_GetResponse>
 800a212:	4602      	mov	r2, r0
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	2108      	movs	r1, #8
 800a21e:	4618      	mov	r0, r3
 800a220:	f002 f8e1 	bl	800c3e6 <SDIO_GetResponse>
 800a224:	4602      	mov	r2, r0
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	210c      	movs	r1, #12
 800a230:	4618      	mov	r0, r3
 800a232:	f002 f8d8 	bl	800c3e6 <SDIO_GetResponse>
 800a236:	4602      	mov	r2, r0
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a242:	2b03      	cmp	r3, #3
 800a244:	d00d      	beq.n	800a262 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f107 020e 	add.w	r2, r7, #14
 800a24e:	4611      	mov	r1, r2
 800a250:	4618      	mov	r0, r3
 800a252:	f002 faf8 	bl	800c846 <SDMMC_CmdSetRelAdd>
 800a256:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <SD_InitCard+0xae>
    {
      return errorstate;
 800a25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a260:	e070      	b.n	800a344 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a266:	2b03      	cmp	r3, #3
 800a268:	d036      	beq.n	800a2d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800a26a:	89fb      	ldrh	r3, [r7, #14]
 800a26c:	461a      	mov	r2, r3
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a27a:	041b      	lsls	r3, r3, #16
 800a27c:	4619      	mov	r1, r3
 800a27e:	4610      	mov	r0, r2
 800a280:	f002 fac2 	bl	800c808 <SDMMC_CmdSendCSD>
 800a284:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800a286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d001      	beq.n	800a290 <SD_InitCard+0xdc>
    {
      return errorstate;
 800a28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a28e:	e059      	b.n	800a344 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2100      	movs	r1, #0
 800a296:	4618      	mov	r0, r3
 800a298:	f002 f8a5 	bl	800c3e6 <SDIO_GetResponse>
 800a29c:	4602      	mov	r2, r0
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2104      	movs	r1, #4
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f002 f89c 	bl	800c3e6 <SDIO_GetResponse>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2108      	movs	r1, #8
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f002 f893 	bl	800c3e6 <SDIO_GetResponse>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	210c      	movs	r1, #12
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f002 f88a 	bl	800c3e6 <SDIO_GetResponse>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	2104      	movs	r1, #4
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f002 f881 	bl	800c3e6 <SDIO_GetResponse>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	0d1a      	lsrs	r2, r3, #20
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a2ec:	f107 0310 	add.w	r3, r7, #16
 800a2f0:	4619      	mov	r1, r3
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f7ff fbc6 	bl	8009a84 <HAL_SD_GetCardCSD>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d002      	beq.n	800a304 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a302:	e01f      	b.n	800a344 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	6819      	ldr	r1, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a30c:	041b      	lsls	r3, r3, #16
 800a30e:	461a      	mov	r2, r3
 800a310:	f04f 0300 	mov.w	r3, #0
 800a314:	4608      	mov	r0, r1
 800a316:	f002 f971 	bl	800c5fc <SDMMC_CmdSelDesel>
 800a31a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800a31c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d001      	beq.n	800a326 <SD_InitCard+0x172>
  {
    return errorstate;
 800a322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a324:	e00e      	b.n	800a344 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681d      	ldr	r5, [r3, #0]
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	466c      	mov	r4, sp
 800a32e:	f103 0210 	add.w	r2, r3, #16
 800a332:	ca07      	ldmia	r2, {r0, r1, r2}
 800a334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a338:	3304      	adds	r3, #4
 800a33a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a33c:	4628      	mov	r0, r5
 800a33e:	f001 ffb5 	bl	800c2ac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3740      	adds	r7, #64	; 0x40
 800a348:	46bd      	mov	sp, r7
 800a34a:	bdb0      	pop	{r4, r5, r7, pc}

0800a34c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b086      	sub	sp, #24
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a354:	2300      	movs	r3, #0
 800a356:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800a358:	2300      	movs	r3, #0
 800a35a:	617b      	str	r3, [r7, #20]
 800a35c:	2300      	movs	r3, #0
 800a35e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4618      	mov	r0, r3
 800a366:	f002 f96c 	bl	800c642 <SDMMC_CmdGoIdleState>
 800a36a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d001      	beq.n	800a376 <SD_PowerON+0x2a>
  {
    return errorstate;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	e072      	b.n	800a45c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f002 f97f 	bl	800c67e <SDMMC_CmdOperCond>
 800a380:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00d      	beq.n	800a3a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4618      	mov	r0, r3
 800a394:	f002 f955 	bl	800c642 <SDMMC_CmdGoIdleState>
 800a398:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d004      	beq.n	800a3aa <SD_PowerON+0x5e>
    {
      return errorstate;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	e05b      	b.n	800a45c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2201      	movs	r2, #1
 800a3a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d137      	bne.n	800a422 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	2100      	movs	r1, #0
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f002 f97f 	bl	800c6bc <SDMMC_CmdAppCommand>
 800a3be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d02d      	beq.n	800a422 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3ca:	e047      	b.n	800a45c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f002 f972 	bl	800c6bc <SDMMC_CmdAppCommand>
 800a3d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d001      	beq.n	800a3e4 <SD_PowerON+0x98>
    {
      return errorstate;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	e03b      	b.n	800a45c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	491e      	ldr	r1, [pc, #120]	; (800a464 <SD_PowerON+0x118>)
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f002 f988 	bl	800c700 <SDMMC_CmdAppOperCommand>
 800a3f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a3fc:	e02e      	b.n	800a45c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2100      	movs	r1, #0
 800a404:	4618      	mov	r0, r3
 800a406:	f001 ffee 	bl	800c3e6 <SDIO_GetResponse>
 800a40a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	0fdb      	lsrs	r3, r3, #31
 800a410:	2b01      	cmp	r3, #1
 800a412:	d101      	bne.n	800a418 <SD_PowerON+0xcc>
 800a414:	2301      	movs	r3, #1
 800a416:	e000      	b.n	800a41a <SD_PowerON+0xce>
 800a418:	2300      	movs	r3, #0
 800a41a:	613b      	str	r3, [r7, #16]

    count++;
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	3301      	adds	r3, #1
 800a420:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a428:	4293      	cmp	r3, r2
 800a42a:	d802      	bhi.n	800a432 <SD_PowerON+0xe6>
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0cc      	beq.n	800a3cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a438:	4293      	cmp	r3, r2
 800a43a:	d902      	bls.n	800a442 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a43c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a440:	e00c      	b.n	800a45c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d003      	beq.n	800a454 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	645a      	str	r2, [r3, #68]	; 0x44
 800a452:	e002      	b.n	800a45a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3718      	adds	r7, #24
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	c1100000 	.word	0xc1100000

0800a468 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a478:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a47c:	e018      	b.n	800a4b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a486:	041b      	lsls	r3, r3, #16
 800a488:	4619      	mov	r1, r3
 800a48a:	4610      	mov	r0, r2
 800a48c:	f002 f9fc 	bl	800c888 <SDMMC_CmdSendStatus>
 800a490:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d001      	beq.n	800a49c <SD_SendStatus+0x34>
  {
    return errorstate;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	e009      	b.n	800a4b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f001 ff9f 	bl	800c3e6 <SDIO_GetResponse>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b086      	sub	sp, #24
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	60fb      	str	r3, [r7, #12]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f001 ff89 	bl	800c3e6 <SDIO_GetResponse>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a4de:	d102      	bne.n	800a4e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a4e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4e4:	e02f      	b.n	800a546 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a4e6:	f107 030c 	add.w	r3, r7, #12
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f879 	bl	800a5e4 <SD_FindSCR>
 800a4f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	e023      	b.n	800a546 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d01c      	beq.n	800a542 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a510:	041b      	lsls	r3, r3, #16
 800a512:	4619      	mov	r1, r3
 800a514:	4610      	mov	r0, r2
 800a516:	f002 f8d1 	bl	800c6bc <SDMMC_CmdAppCommand>
 800a51a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d001      	beq.n	800a526 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	e00f      	b.n	800a546 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2102      	movs	r1, #2
 800a52c:	4618      	mov	r0, r3
 800a52e:	f002 f90a 	bl	800c746 <SDMMC_CmdBusWidth>
 800a532:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	e003      	b.n	800a546 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a53e:	2300      	movs	r3, #0
 800a540:	e001      	b.n	800a546 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a542:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b086      	sub	sp, #24
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800a556:	2300      	movs	r3, #0
 800a558:	60fb      	str	r3, [r7, #12]
 800a55a:	2300      	movs	r3, #0
 800a55c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	2100      	movs	r1, #0
 800a564:	4618      	mov	r0, r3
 800a566:	f001 ff3e 	bl	800c3e6 <SDIO_GetResponse>
 800a56a:	4603      	mov	r3, r0
 800a56c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a570:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a574:	d102      	bne.n	800a57c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a576:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a57a:	e02f      	b.n	800a5dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800a57c:	f107 030c 	add.w	r3, r7, #12
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 f82e 	bl	800a5e4 <SD_FindSCR>
 800a588:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	e023      	b.n	800a5dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d01c      	beq.n	800a5d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a6:	041b      	lsls	r3, r3, #16
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	4610      	mov	r0, r2
 800a5ac:	f002 f886 	bl	800c6bc <SDMMC_CmdAppCommand>
 800a5b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	e00f      	b.n	800a5dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2100      	movs	r1, #0
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f002 f8bf 	bl	800c746 <SDMMC_CmdBusWidth>
 800a5c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d001      	beq.n	800a5d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	e003      	b.n	800a5dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	e001      	b.n	800a5dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a5d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}

0800a5e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800a5e4:	b590      	push	{r4, r7, lr}
 800a5e6:	b08f      	sub	sp, #60	; 0x3c
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800a5ee:	f7f9 fe5d 	bl	80042ac <HAL_GetTick>
 800a5f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	60bb      	str	r3, [r7, #8]
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2108      	movs	r1, #8
 800a60a:	4618      	mov	r0, r3
 800a60c:	f001 ff2a 	bl	800c464 <SDMMC_CmdBlockLength>
 800a610:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <SD_FindSCR+0x38>
  {
    return errorstate;
 800a618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61a:	e0b2      	b.n	800a782 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a624:	041b      	lsls	r3, r3, #16
 800a626:	4619      	mov	r1, r3
 800a628:	4610      	mov	r0, r2
 800a62a:	f002 f847 	bl	800c6bc <SDMMC_CmdAppCommand>
 800a62e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <SD_FindSCR+0x56>
  {
    return errorstate;
 800a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a638:	e0a3      	b.n	800a782 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a63a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a63e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800a640:	2308      	movs	r3, #8
 800a642:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800a644:	2330      	movs	r3, #48	; 0x30
 800a646:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800a648:	2302      	movs	r3, #2
 800a64a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800a64c:	2300      	movs	r3, #0
 800a64e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800a650:	2301      	movs	r3, #1
 800a652:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f107 0210 	add.w	r2, r7, #16
 800a65c:	4611      	mov	r1, r2
 800a65e:	4618      	mov	r0, r3
 800a660:	f001 fed4 	bl	800c40c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	4618      	mov	r0, r3
 800a66a:	f002 f88e 	bl	800c78a <SDMMC_CmdSendSCR>
 800a66e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800a670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a672:	2b00      	cmp	r3, #0
 800a674:	d02a      	beq.n	800a6cc <SD_FindSCR+0xe8>
  {
    return errorstate;
 800a676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a678:	e083      	b.n	800a782 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a680:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a684:	2b00      	cmp	r3, #0
 800a686:	d00f      	beq.n	800a6a8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6819      	ldr	r1, [r3, #0]
 800a68c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	f107 0208 	add.w	r2, r7, #8
 800a694:	18d4      	adds	r4, r2, r3
 800a696:	4608      	mov	r0, r1
 800a698:	f001 fe33 	bl	800c302 <SDIO_ReadFIFO>
 800a69c:	4603      	mov	r3, r0
 800a69e:	6023      	str	r3, [r4, #0]
      index++;
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	637b      	str	r3, [r7, #52]	; 0x34
 800a6a6:	e006      	b.n	800a6b6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d012      	beq.n	800a6dc <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a6b6:	f7f9 fdf9 	bl	80042ac <HAL_GetTick>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	1ad3      	subs	r3, r2, r3
 800a6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6c4:	d102      	bne.n	800a6cc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800a6c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6ca:	e05a      	b.n	800a782 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d0cf      	beq.n	800a67a <SD_FindSCR+0x96>
 800a6da:	e000      	b.n	800a6de <SD_FindSCR+0xfa>
      break;
 800a6dc:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e4:	f003 0308 	and.w	r3, r3, #8
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d005      	beq.n	800a6f8 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2208      	movs	r2, #8
 800a6f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800a6f4:	2308      	movs	r3, #8
 800a6f6:	e044      	b.n	800a782 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fe:	f003 0302 	and.w	r3, r3, #2
 800a702:	2b00      	cmp	r3, #0
 800a704:	d005      	beq.n	800a712 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	2202      	movs	r2, #2
 800a70c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800a70e:	2302      	movs	r3, #2
 800a710:	e037      	b.n	800a782 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a718:	f003 0320 	and.w	r3, r3, #32
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d005      	beq.n	800a72c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	2220      	movs	r2, #32
 800a726:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800a728:	2320      	movs	r3, #32
 800a72a:	e02a      	b.n	800a782 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f240 523a 	movw	r2, #1338	; 0x53a
 800a734:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	061a      	lsls	r2, r3, #24
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	021b      	lsls	r3, r3, #8
 800a73e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a742:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	0a1b      	lsrs	r3, r3, #8
 800a748:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a74c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	0e1b      	lsrs	r3, r3, #24
 800a752:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a756:	601a      	str	r2, [r3, #0]
    scr++;
 800a758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a75a:	3304      	adds	r3, #4
 800a75c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	061a      	lsls	r2, r3, #24
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	021b      	lsls	r3, r3, #8
 800a766:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a76a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	0a1b      	lsrs	r3, r3, #8
 800a770:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a774:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	0e1b      	lsrs	r3, r3, #24
 800a77a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800a77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a77e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	373c      	adds	r7, #60	; 0x3c
 800a786:	46bd      	mov	sp, r7
 800a788:	bd90      	pop	{r4, r7, pc}

0800a78a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b086      	sub	sp, #24
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a796:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a79c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d03f      	beq.n	800a824 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	617b      	str	r3, [r7, #20]
 800a7a8:	e033      	b.n	800a812 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f001 fda7 	bl	800c302 <SDIO_ReadFIFO>
 800a7b4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	b2da      	uxtb	r2, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	0a1b      	lsrs	r3, r3, #8
 800a7ce:	b2da      	uxtb	r2, r3
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3301      	adds	r3, #1
 800a7d8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	0c1b      	lsrs	r3, r3, #16
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	3b01      	subs	r3, #1
 800a7f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	0e1b      	lsrs	r3, r3, #24
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	3301      	adds	r3, #1
 800a804:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a806:	693b      	ldr	r3, [r7, #16]
 800a808:	3b01      	subs	r3, #1
 800a80a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	3301      	adds	r3, #1
 800a810:	617b      	str	r3, [r7, #20]
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	2b07      	cmp	r3, #7
 800a816:	d9c8      	bls.n	800a7aa <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68fa      	ldr	r2, [r7, #12]
 800a81c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	693a      	ldr	r2, [r7, #16]
 800a822:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800a824:	bf00      	nop
 800a826:	3718      	adds	r7, #24
 800a828:	46bd      	mov	sp, r7
 800a82a:	bd80      	pop	{r7, pc}

0800a82c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b086      	sub	sp, #24
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a1b      	ldr	r3, [r3, #32]
 800a838:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d043      	beq.n	800a8ce <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800a846:	2300      	movs	r3, #0
 800a848:	617b      	str	r3, [r7, #20]
 800a84a:	e037      	b.n	800a8bc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3301      	adds	r3, #1
 800a856:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	3b01      	subs	r3, #1
 800a85c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	021a      	lsls	r2, r3, #8
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	4313      	orrs	r3, r2
 800a868:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	3301      	adds	r3, #1
 800a86e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	3b01      	subs	r3, #1
 800a874:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	041a      	lsls	r2, r3, #16
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	4313      	orrs	r3, r2
 800a880:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	3301      	adds	r3, #1
 800a886:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	3b01      	subs	r3, #1
 800a88c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	061a      	lsls	r2, r3, #24
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	4313      	orrs	r3, r2
 800a898:	60bb      	str	r3, [r7, #8]
      tmp++;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	3301      	adds	r3, #1
 800a89e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800a8a0:	693b      	ldr	r3, [r7, #16]
 800a8a2:	3b01      	subs	r3, #1
 800a8a4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f107 0208 	add.w	r2, r7, #8
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f001 fd33 	bl	800c31c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	617b      	str	r3, [r7, #20]
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	2b07      	cmp	r3, #7
 800a8c0:	d9c4      	bls.n	800a84c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	68fa      	ldr	r2, [r7, #12]
 800a8c6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	693a      	ldr	r2, [r7, #16]
 800a8cc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a8ce:	bf00      	nop
 800a8d0:	3718      	adds	r7, #24
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd80      	pop	{r7, pc}

0800a8d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8d6:	b580      	push	{r7, lr}
 800a8d8:	b082      	sub	sp, #8
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	e041      	b.n	800a96c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d106      	bne.n	800a902 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7f8 fd25 	bl	800334c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2202      	movs	r2, #2
 800a906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	3304      	adds	r3, #4
 800a912:	4619      	mov	r1, r3
 800a914:	4610      	mov	r0, r2
 800a916:	f000 fa95 	bl	800ae44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2201      	movs	r2, #1
 800a91e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2201      	movs	r2, #1
 800a926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2201      	movs	r2, #1
 800a92e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2201      	movs	r2, #1
 800a93e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2201      	movs	r2, #1
 800a94e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2201      	movs	r2, #1
 800a95e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a96a:	2300      	movs	r3, #0
}
 800a96c:	4618      	mov	r0, r3
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b01      	cmp	r3, #1
 800a986:	d001      	beq.n	800a98c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a988:	2301      	movs	r3, #1
 800a98a:	e04e      	b.n	800aa2a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2202      	movs	r2, #2
 800a990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	68da      	ldr	r2, [r3, #12]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f042 0201 	orr.w	r2, r2, #1
 800a9a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	4a23      	ldr	r2, [pc, #140]	; (800aa38 <HAL_TIM_Base_Start_IT+0xc4>)
 800a9aa:	4293      	cmp	r3, r2
 800a9ac:	d022      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x80>
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9b6:	d01d      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x80>
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a1f      	ldr	r2, [pc, #124]	; (800aa3c <HAL_TIM_Base_Start_IT+0xc8>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d018      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x80>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	4a1e      	ldr	r2, [pc, #120]	; (800aa40 <HAL_TIM_Base_Start_IT+0xcc>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d013      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x80>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a1c      	ldr	r2, [pc, #112]	; (800aa44 <HAL_TIM_Base_Start_IT+0xd0>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d00e      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x80>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a1b      	ldr	r2, [pc, #108]	; (800aa48 <HAL_TIM_Base_Start_IT+0xd4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d009      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x80>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a19      	ldr	r2, [pc, #100]	; (800aa4c <HAL_TIM_Base_Start_IT+0xd8>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d004      	beq.n	800a9f4 <HAL_TIM_Base_Start_IT+0x80>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a18      	ldr	r2, [pc, #96]	; (800aa50 <HAL_TIM_Base_Start_IT+0xdc>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d111      	bne.n	800aa18 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f003 0307 	and.w	r3, r3, #7
 800a9fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b06      	cmp	r3, #6
 800aa04:	d010      	beq.n	800aa28 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f042 0201 	orr.w	r2, r2, #1
 800aa14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa16:	e007      	b.n	800aa28 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	681a      	ldr	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f042 0201 	orr.w	r2, r2, #1
 800aa26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800aa28:	2300      	movs	r3, #0
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	3714      	adds	r7, #20
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	40010000 	.word	0x40010000
 800aa3c:	40000400 	.word	0x40000400
 800aa40:	40000800 	.word	0x40000800
 800aa44:	40000c00 	.word	0x40000c00
 800aa48:	40010400 	.word	0x40010400
 800aa4c:	40014000 	.word	0x40014000
 800aa50:	40001800 	.word	0x40001800

0800aa54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b082      	sub	sp, #8
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	f003 0302 	and.w	r3, r3, #2
 800aa66:	2b02      	cmp	r3, #2
 800aa68:	d122      	bne.n	800aab0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	f003 0302 	and.w	r3, r3, #2
 800aa74:	2b02      	cmp	r3, #2
 800aa76:	d11b      	bne.n	800aab0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f06f 0202 	mvn.w	r2, #2
 800aa80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2201      	movs	r2, #1
 800aa86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	f003 0303 	and.w	r3, r3, #3
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d003      	beq.n	800aa9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f000 f9b5 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800aa9c:	e005      	b.n	800aaaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 f9a7 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f9b8 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	f003 0304 	and.w	r3, r3, #4
 800aaba:	2b04      	cmp	r3, #4
 800aabc:	d122      	bne.n	800ab04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	68db      	ldr	r3, [r3, #12]
 800aac4:	f003 0304 	and.w	r3, r3, #4
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d11b      	bne.n	800ab04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f06f 0204 	mvn.w	r2, #4
 800aad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	2202      	movs	r2, #2
 800aada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 f98b 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800aaf0:	e005      	b.n	800aafe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aaf2:	6878      	ldr	r0, [r7, #4]
 800aaf4:	f000 f97d 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f000 f98e 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2200      	movs	r2, #0
 800ab02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	691b      	ldr	r3, [r3, #16]
 800ab0a:	f003 0308 	and.w	r3, r3, #8
 800ab0e:	2b08      	cmp	r3, #8
 800ab10:	d122      	bne.n	800ab58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	f003 0308 	and.w	r3, r3, #8
 800ab1c:	2b08      	cmp	r3, #8
 800ab1e:	d11b      	bne.n	800ab58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f06f 0208 	mvn.w	r2, #8
 800ab28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2204      	movs	r2, #4
 800ab2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	69db      	ldr	r3, [r3, #28]
 800ab36:	f003 0303 	and.w	r3, r3, #3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d003      	beq.n	800ab46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 f961 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800ab44:	e005      	b.n	800ab52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 f953 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f964 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2200      	movs	r2, #0
 800ab56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	691b      	ldr	r3, [r3, #16]
 800ab5e:	f003 0310 	and.w	r3, r3, #16
 800ab62:	2b10      	cmp	r3, #16
 800ab64:	d122      	bne.n	800abac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f003 0310 	and.w	r3, r3, #16
 800ab70:	2b10      	cmp	r3, #16
 800ab72:	d11b      	bne.n	800abac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f06f 0210 	mvn.w	r2, #16
 800ab7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2208      	movs	r2, #8
 800ab82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	69db      	ldr	r3, [r3, #28]
 800ab8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f937 	bl	800ae06 <HAL_TIM_IC_CaptureCallback>
 800ab98:	e005      	b.n	800aba6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f929 	bl	800adf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f000 f93a 	bl	800ae1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2200      	movs	r2, #0
 800abaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	f003 0301 	and.w	r3, r3, #1
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d10e      	bne.n	800abd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f003 0301 	and.w	r3, r3, #1
 800abc4:	2b01      	cmp	r3, #1
 800abc6:	d107      	bne.n	800abd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f06f 0201 	mvn.w	r2, #1
 800abd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7f6 f8e6 	bl	8000da4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abe2:	2b80      	cmp	r3, #128	; 0x80
 800abe4:	d10e      	bne.n	800ac04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68db      	ldr	r3, [r3, #12]
 800abec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abf0:	2b80      	cmp	r3, #128	; 0x80
 800abf2:	d107      	bne.n	800ac04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800abfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fae0 	bl	800b1c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac0e:	2b40      	cmp	r3, #64	; 0x40
 800ac10:	d10e      	bne.n	800ac30 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1c:	2b40      	cmp	r3, #64	; 0x40
 800ac1e:	d107      	bne.n	800ac30 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ac28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f8ff 	bl	800ae2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	f003 0320 	and.w	r3, r3, #32
 800ac3a:	2b20      	cmp	r3, #32
 800ac3c:	d10e      	bne.n	800ac5c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	68db      	ldr	r3, [r3, #12]
 800ac44:	f003 0320 	and.w	r3, r3, #32
 800ac48:	2b20      	cmp	r3, #32
 800ac4a:	d107      	bne.n	800ac5c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f06f 0220 	mvn.w	r2, #32
 800ac54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 faaa 	bl	800b1b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b084      	sub	sp, #16
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d101      	bne.n	800ac80 <HAL_TIM_ConfigClockSource+0x1c>
 800ac7c:	2302      	movs	r3, #2
 800ac7e:	e0b4      	b.n	800adea <HAL_TIM_ConfigClockSource+0x186>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2202      	movs	r2, #2
 800ac8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	689b      	ldr	r3, [r3, #8]
 800ac96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ac9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	68ba      	ldr	r2, [r7, #8]
 800acae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acb8:	d03e      	beq.n	800ad38 <HAL_TIM_ConfigClockSource+0xd4>
 800acba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800acbe:	f200 8087 	bhi.w	800add0 <HAL_TIM_ConfigClockSource+0x16c>
 800acc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acc6:	f000 8086 	beq.w	800add6 <HAL_TIM_ConfigClockSource+0x172>
 800acca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acce:	d87f      	bhi.n	800add0 <HAL_TIM_ConfigClockSource+0x16c>
 800acd0:	2b70      	cmp	r3, #112	; 0x70
 800acd2:	d01a      	beq.n	800ad0a <HAL_TIM_ConfigClockSource+0xa6>
 800acd4:	2b70      	cmp	r3, #112	; 0x70
 800acd6:	d87b      	bhi.n	800add0 <HAL_TIM_ConfigClockSource+0x16c>
 800acd8:	2b60      	cmp	r3, #96	; 0x60
 800acda:	d050      	beq.n	800ad7e <HAL_TIM_ConfigClockSource+0x11a>
 800acdc:	2b60      	cmp	r3, #96	; 0x60
 800acde:	d877      	bhi.n	800add0 <HAL_TIM_ConfigClockSource+0x16c>
 800ace0:	2b50      	cmp	r3, #80	; 0x50
 800ace2:	d03c      	beq.n	800ad5e <HAL_TIM_ConfigClockSource+0xfa>
 800ace4:	2b50      	cmp	r3, #80	; 0x50
 800ace6:	d873      	bhi.n	800add0 <HAL_TIM_ConfigClockSource+0x16c>
 800ace8:	2b40      	cmp	r3, #64	; 0x40
 800acea:	d058      	beq.n	800ad9e <HAL_TIM_ConfigClockSource+0x13a>
 800acec:	2b40      	cmp	r3, #64	; 0x40
 800acee:	d86f      	bhi.n	800add0 <HAL_TIM_ConfigClockSource+0x16c>
 800acf0:	2b30      	cmp	r3, #48	; 0x30
 800acf2:	d064      	beq.n	800adbe <HAL_TIM_ConfigClockSource+0x15a>
 800acf4:	2b30      	cmp	r3, #48	; 0x30
 800acf6:	d86b      	bhi.n	800add0 <HAL_TIM_ConfigClockSource+0x16c>
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	d060      	beq.n	800adbe <HAL_TIM_ConfigClockSource+0x15a>
 800acfc:	2b20      	cmp	r3, #32
 800acfe:	d867      	bhi.n	800add0 <HAL_TIM_ConfigClockSource+0x16c>
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d05c      	beq.n	800adbe <HAL_TIM_ConfigClockSource+0x15a>
 800ad04:	2b10      	cmp	r3, #16
 800ad06:	d05a      	beq.n	800adbe <HAL_TIM_ConfigClockSource+0x15a>
 800ad08:	e062      	b.n	800add0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6818      	ldr	r0, [r3, #0]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	6899      	ldr	r1, [r3, #8]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	685a      	ldr	r2, [r3, #4]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	68db      	ldr	r3, [r3, #12]
 800ad1a:	f000 f9ad 	bl	800b078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ad2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	609a      	str	r2, [r3, #8]
      break;
 800ad36:	e04f      	b.n	800add8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6818      	ldr	r0, [r3, #0]
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	6899      	ldr	r1, [r3, #8]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	685a      	ldr	r2, [r3, #4]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	68db      	ldr	r3, [r3, #12]
 800ad48:	f000 f996 	bl	800b078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	689a      	ldr	r2, [r3, #8]
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad5a:	609a      	str	r2, [r3, #8]
      break;
 800ad5c:	e03c      	b.n	800add8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	6818      	ldr	r0, [r3, #0]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	6859      	ldr	r1, [r3, #4]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	68db      	ldr	r3, [r3, #12]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f000 f90a 	bl	800af84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2150      	movs	r1, #80	; 0x50
 800ad76:	4618      	mov	r0, r3
 800ad78:	f000 f963 	bl	800b042 <TIM_ITRx_SetConfig>
      break;
 800ad7c:	e02c      	b.n	800add8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6818      	ldr	r0, [r3, #0]
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	6859      	ldr	r1, [r3, #4]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	f000 f929 	bl	800afe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	2160      	movs	r1, #96	; 0x60
 800ad96:	4618      	mov	r0, r3
 800ad98:	f000 f953 	bl	800b042 <TIM_ITRx_SetConfig>
      break;
 800ad9c:	e01c      	b.n	800add8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6818      	ldr	r0, [r3, #0]
 800ada2:	683b      	ldr	r3, [r7, #0]
 800ada4:	6859      	ldr	r1, [r3, #4]
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	68db      	ldr	r3, [r3, #12]
 800adaa:	461a      	mov	r2, r3
 800adac:	f000 f8ea 	bl	800af84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2140      	movs	r1, #64	; 0x40
 800adb6:	4618      	mov	r0, r3
 800adb8:	f000 f943 	bl	800b042 <TIM_ITRx_SetConfig>
      break;
 800adbc:	e00c      	b.n	800add8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4619      	mov	r1, r3
 800adc8:	4610      	mov	r0, r2
 800adca:	f000 f93a 	bl	800b042 <TIM_ITRx_SetConfig>
      break;
 800adce:	e003      	b.n	800add8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	73fb      	strb	r3, [r7, #15]
      break;
 800add4:	e000      	b.n	800add8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800add6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2201      	movs	r2, #1
 800addc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
}
 800adea:	4618      	mov	r0, r3
 800adec:	3710      	adds	r7, #16
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800adfa:	bf00      	nop
 800adfc:	370c      	adds	r7, #12
 800adfe:	46bd      	mov	sp, r7
 800ae00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae06:	b480      	push	{r7}
 800ae08:	b083      	sub	sp, #12
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae0e:	bf00      	nop
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b083      	sub	sp, #12
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae22:	bf00      	nop
 800ae24:	370c      	adds	r7, #12
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr

0800ae2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae2e:	b480      	push	{r7}
 800ae30:	b083      	sub	sp, #12
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae36:	bf00      	nop
 800ae38:	370c      	adds	r7, #12
 800ae3a:	46bd      	mov	sp, r7
 800ae3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae40:	4770      	bx	lr
	...

0800ae44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	4a40      	ldr	r2, [pc, #256]	; (800af58 <TIM_Base_SetConfig+0x114>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d013      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae62:	d00f      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a3d      	ldr	r2, [pc, #244]	; (800af5c <TIM_Base_SetConfig+0x118>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d00b      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a3c      	ldr	r2, [pc, #240]	; (800af60 <TIM_Base_SetConfig+0x11c>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d007      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a3b      	ldr	r2, [pc, #236]	; (800af64 <TIM_Base_SetConfig+0x120>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d003      	beq.n	800ae84 <TIM_Base_SetConfig+0x40>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a3a      	ldr	r2, [pc, #232]	; (800af68 <TIM_Base_SetConfig+0x124>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d108      	bne.n	800ae96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4313      	orrs	r3, r2
 800ae94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4a2f      	ldr	r2, [pc, #188]	; (800af58 <TIM_Base_SetConfig+0x114>)
 800ae9a:	4293      	cmp	r3, r2
 800ae9c:	d02b      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aea4:	d027      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	4a2c      	ldr	r2, [pc, #176]	; (800af5c <TIM_Base_SetConfig+0x118>)
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d023      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4a2b      	ldr	r2, [pc, #172]	; (800af60 <TIM_Base_SetConfig+0x11c>)
 800aeb2:	4293      	cmp	r3, r2
 800aeb4:	d01f      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4a2a      	ldr	r2, [pc, #168]	; (800af64 <TIM_Base_SetConfig+0x120>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d01b      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a29      	ldr	r2, [pc, #164]	; (800af68 <TIM_Base_SetConfig+0x124>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d017      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a28      	ldr	r2, [pc, #160]	; (800af6c <TIM_Base_SetConfig+0x128>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d013      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	4a27      	ldr	r2, [pc, #156]	; (800af70 <TIM_Base_SetConfig+0x12c>)
 800aed2:	4293      	cmp	r3, r2
 800aed4:	d00f      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	4a26      	ldr	r2, [pc, #152]	; (800af74 <TIM_Base_SetConfig+0x130>)
 800aeda:	4293      	cmp	r3, r2
 800aedc:	d00b      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	4a25      	ldr	r2, [pc, #148]	; (800af78 <TIM_Base_SetConfig+0x134>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d007      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	4a24      	ldr	r2, [pc, #144]	; (800af7c <TIM_Base_SetConfig+0x138>)
 800aeea:	4293      	cmp	r3, r2
 800aeec:	d003      	beq.n	800aef6 <TIM_Base_SetConfig+0xb2>
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a23      	ldr	r2, [pc, #140]	; (800af80 <TIM_Base_SetConfig+0x13c>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d108      	bne.n	800af08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aefc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	68fa      	ldr	r2, [r7, #12]
 800af04:	4313      	orrs	r3, r2
 800af06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	4313      	orrs	r3, r2
 800af14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	68fa      	ldr	r2, [r7, #12]
 800af1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	689a      	ldr	r2, [r3, #8]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	681a      	ldr	r2, [r3, #0]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	4a0a      	ldr	r2, [pc, #40]	; (800af58 <TIM_Base_SetConfig+0x114>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d003      	beq.n	800af3c <TIM_Base_SetConfig+0xf8>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	4a0c      	ldr	r2, [pc, #48]	; (800af68 <TIM_Base_SetConfig+0x124>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d103      	bne.n	800af44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	691a      	ldr	r2, [r3, #16]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2201      	movs	r2, #1
 800af48:	615a      	str	r2, [r3, #20]
}
 800af4a:	bf00      	nop
 800af4c:	3714      	adds	r7, #20
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	40010000 	.word	0x40010000
 800af5c:	40000400 	.word	0x40000400
 800af60:	40000800 	.word	0x40000800
 800af64:	40000c00 	.word	0x40000c00
 800af68:	40010400 	.word	0x40010400
 800af6c:	40014000 	.word	0x40014000
 800af70:	40014400 	.word	0x40014400
 800af74:	40014800 	.word	0x40014800
 800af78:	40001800 	.word	0x40001800
 800af7c:	40001c00 	.word	0x40001c00
 800af80:	40002000 	.word	0x40002000

0800af84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af84:	b480      	push	{r7}
 800af86:	b087      	sub	sp, #28
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6a1b      	ldr	r3, [r3, #32]
 800af94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	6a1b      	ldr	r3, [r3, #32]
 800af9a:	f023 0201 	bic.w	r2, r3, #1
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	699b      	ldr	r3, [r3, #24]
 800afa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800afae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	4313      	orrs	r3, r2
 800afb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	f023 030a 	bic.w	r3, r3, #10
 800afc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800afc2:	697a      	ldr	r2, [r7, #20]
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	4313      	orrs	r3, r2
 800afc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	693a      	ldr	r2, [r7, #16]
 800afce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	621a      	str	r2, [r3, #32]
}
 800afd6:	bf00      	nop
 800afd8:	371c      	adds	r7, #28
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr

0800afe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800afe2:	b480      	push	{r7}
 800afe4:	b087      	sub	sp, #28
 800afe6:	af00      	add	r7, sp, #0
 800afe8:	60f8      	str	r0, [r7, #12]
 800afea:	60b9      	str	r1, [r7, #8]
 800afec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6a1b      	ldr	r3, [r3, #32]
 800aff2:	f023 0210 	bic.w	r2, r3, #16
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b00c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	031b      	lsls	r3, r3, #12
 800b012:	697a      	ldr	r2, [r7, #20]
 800b014:	4313      	orrs	r3, r2
 800b016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b01e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	011b      	lsls	r3, r3, #4
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	4313      	orrs	r3, r2
 800b028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	697a      	ldr	r2, [r7, #20]
 800b02e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	621a      	str	r2, [r3, #32]
}
 800b036:	bf00      	nop
 800b038:	371c      	adds	r7, #28
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr

0800b042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b042:	b480      	push	{r7}
 800b044:	b085      	sub	sp, #20
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b05a:	683a      	ldr	r2, [r7, #0]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	4313      	orrs	r3, r2
 800b060:	f043 0307 	orr.w	r3, r3, #7
 800b064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	609a      	str	r2, [r3, #8]
}
 800b06c:	bf00      	nop
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b078:	b480      	push	{r7}
 800b07a:	b087      	sub	sp, #28
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	60f8      	str	r0, [r7, #12]
 800b080:	60b9      	str	r1, [r7, #8]
 800b082:	607a      	str	r2, [r7, #4]
 800b084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b094:	683b      	ldr	r3, [r7, #0]
 800b096:	021a      	lsls	r2, r3, #8
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	431a      	orrs	r2, r3
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	697a      	ldr	r2, [r7, #20]
 800b0aa:	609a      	str	r2, [r3, #8]
}
 800b0ac:	bf00      	nop
 800b0ae:	371c      	adds	r7, #28
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b6:	4770      	bx	lr

0800b0b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d101      	bne.n	800b0d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0cc:	2302      	movs	r3, #2
 800b0ce:	e05a      	b.n	800b186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2202      	movs	r2, #2
 800b0dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	685b      	ldr	r3, [r3, #4]
 800b0e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	68fa      	ldr	r2, [r7, #12]
 800b108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a21      	ldr	r2, [pc, #132]	; (800b194 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d022      	beq.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b11c:	d01d      	beq.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a1d      	ldr	r2, [pc, #116]	; (800b198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d018      	beq.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a1b      	ldr	r2, [pc, #108]	; (800b19c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d013      	beq.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a1a      	ldr	r2, [pc, #104]	; (800b1a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d00e      	beq.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a18      	ldr	r2, [pc, #96]	; (800b1a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b142:	4293      	cmp	r3, r2
 800b144:	d009      	beq.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4a17      	ldr	r2, [pc, #92]	; (800b1a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d004      	beq.n	800b15a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a15      	ldr	r2, [pc, #84]	; (800b1ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b156:	4293      	cmp	r3, r2
 800b158:	d10c      	bne.n	800b174 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	685b      	ldr	r3, [r3, #4]
 800b166:	68ba      	ldr	r2, [r7, #8]
 800b168:	4313      	orrs	r3, r2
 800b16a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b184:	2300      	movs	r3, #0
}
 800b186:	4618      	mov	r0, r3
 800b188:	3714      	adds	r7, #20
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr
 800b192:	bf00      	nop
 800b194:	40010000 	.word	0x40010000
 800b198:	40000400 	.word	0x40000400
 800b19c:	40000800 	.word	0x40000800
 800b1a0:	40000c00 	.word	0x40000c00
 800b1a4:	40010400 	.word	0x40010400
 800b1a8:	40014000 	.word	0x40014000
 800b1ac:	40001800 	.word	0x40001800

0800b1b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b083      	sub	sp, #12
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1b8:	bf00      	nop
 800b1ba:	370c      	adds	r7, #12
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr

0800b1c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b1c4:	b480      	push	{r7}
 800b1c6:	b083      	sub	sp, #12
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b1cc:	bf00      	nop
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d101      	bne.n	800b1ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e03f      	b.n	800b26a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1f0:	b2db      	uxtb	r3, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d106      	bne.n	800b204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b1fe:	6878      	ldr	r0, [r7, #4]
 800b200:	f7f8 f8e8 	bl	80033d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2224      	movs	r2, #36	; 0x24
 800b208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	68da      	ldr	r2, [r3, #12]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b21a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 fe7d 	bl	800bf1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	691a      	ldr	r2, [r3, #16]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	695a      	ldr	r2, [r3, #20]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	68da      	ldr	r2, [r3, #12]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2220      	movs	r2, #32
 800b25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2220      	movs	r2, #32
 800b264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b268:	2300      	movs	r3, #0
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3708      	adds	r7, #8
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}

0800b272 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b272:	b580      	push	{r7, lr}
 800b274:	b08a      	sub	sp, #40	; 0x28
 800b276:	af02      	add	r7, sp, #8
 800b278:	60f8      	str	r0, [r7, #12]
 800b27a:	60b9      	str	r1, [r7, #8]
 800b27c:	603b      	str	r3, [r7, #0]
 800b27e:	4613      	mov	r3, r2
 800b280:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800b282:	2300      	movs	r3, #0
 800b284:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b20      	cmp	r3, #32
 800b290:	d17c      	bne.n	800b38c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <HAL_UART_Transmit+0x2c>
 800b298:	88fb      	ldrh	r3, [r7, #6]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800b29e:	2301      	movs	r3, #1
 800b2a0:	e075      	b.n	800b38e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d101      	bne.n	800b2b0 <HAL_UART_Transmit+0x3e>
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	e06e      	b.n	800b38e <HAL_UART_Transmit+0x11c>
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2221      	movs	r2, #33	; 0x21
 800b2c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2c6:	f7f8 fff1 	bl	80042ac <HAL_GetTick>
 800b2ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	88fa      	ldrh	r2, [r7, #6]
 800b2d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	88fa      	ldrh	r2, [r7, #6]
 800b2d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2e0:	d108      	bne.n	800b2f4 <HAL_UART_Transmit+0x82>
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d104      	bne.n	800b2f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	61bb      	str	r3, [r7, #24]
 800b2f2:	e003      	b.n	800b2fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2200      	movs	r2, #0
 800b300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800b304:	e02a      	b.n	800b35c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	9300      	str	r3, [sp, #0]
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	2200      	movs	r2, #0
 800b30e:	2180      	movs	r1, #128	; 0x80
 800b310:	68f8      	ldr	r0, [r7, #12]
 800b312:	f000 fbc1 	bl	800ba98 <UART_WaitOnFlagUntilTimeout>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e036      	b.n	800b38e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10b      	bne.n	800b33e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	461a      	mov	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b334:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800b336:	69bb      	ldr	r3, [r7, #24]
 800b338:	3302      	adds	r3, #2
 800b33a:	61bb      	str	r3, [r7, #24]
 800b33c:	e007      	b.n	800b34e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	781a      	ldrb	r2, [r3, #0]
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	3301      	adds	r3, #1
 800b34c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b352:	b29b      	uxth	r3, r3
 800b354:	3b01      	subs	r3, #1
 800b356:	b29a      	uxth	r2, r3
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b360:	b29b      	uxth	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1cf      	bne.n	800b306 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	9300      	str	r3, [sp, #0]
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	2200      	movs	r2, #0
 800b36e:	2140      	movs	r1, #64	; 0x40
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f000 fb91 	bl	800ba98 <UART_WaitOnFlagUntilTimeout>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e006      	b.n	800b38e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	2220      	movs	r2, #32
 800b384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800b388:	2300      	movs	r3, #0
 800b38a:	e000      	b.n	800b38e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800b38c:	2302      	movs	r3, #2
  }
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3720      	adds	r7, #32
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b084      	sub	sp, #16
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	60f8      	str	r0, [r7, #12]
 800b39e:	60b9      	str	r1, [r7, #8]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b3aa:	b2db      	uxtb	r3, r3
 800b3ac:	2b20      	cmp	r3, #32
 800b3ae:	d11d      	bne.n	800b3ec <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d002      	beq.n	800b3bc <HAL_UART_Receive_IT+0x26>
 800b3b6:	88fb      	ldrh	r3, [r7, #6]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e016      	b.n	800b3ee <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d101      	bne.n	800b3ce <HAL_UART_Receive_IT+0x38>
 800b3ca:	2302      	movs	r3, #2
 800b3cc:	e00f      	b.n	800b3ee <HAL_UART_Receive_IT+0x58>
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2201      	movs	r2, #1
 800b3d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b3dc:	88fb      	ldrh	r3, [r7, #6]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	68b9      	ldr	r1, [r7, #8]
 800b3e2:	68f8      	ldr	r0, [r7, #12]
 800b3e4:	f000 fbc6 	bl	800bb74 <UART_Start_Receive_IT>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	e000      	b.n	800b3ee <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b3ec:	2302      	movs	r3, #2
  }
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3710      	adds	r7, #16
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b09a      	sub	sp, #104	; 0x68
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	330c      	adds	r3, #12
 800b404:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b408:	e853 3f00 	ldrex	r3, [r3]
 800b40c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b410:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b414:	667b      	str	r3, [r7, #100]	; 0x64
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	330c      	adds	r3, #12
 800b41c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b41e:	657a      	str	r2, [r7, #84]	; 0x54
 800b420:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b422:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b424:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b426:	e841 2300 	strex	r3, r2, [r1]
 800b42a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d1e5      	bne.n	800b3fe <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	3314      	adds	r3, #20
 800b438:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b43c:	e853 3f00 	ldrex	r3, [r3]
 800b440:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b444:	f023 0301 	bic.w	r3, r3, #1
 800b448:	663b      	str	r3, [r7, #96]	; 0x60
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	3314      	adds	r3, #20
 800b450:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b452:	643a      	str	r2, [r7, #64]	; 0x40
 800b454:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b456:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b45a:	e841 2300 	strex	r3, r2, [r1]
 800b45e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b462:	2b00      	cmp	r3, #0
 800b464:	d1e5      	bne.n	800b432 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d119      	bne.n	800b4a2 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	330c      	adds	r3, #12
 800b474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b476:	6a3b      	ldr	r3, [r7, #32]
 800b478:	e853 3f00 	ldrex	r3, [r3]
 800b47c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b47e:	69fb      	ldr	r3, [r7, #28]
 800b480:	f023 0310 	bic.w	r3, r3, #16
 800b484:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	330c      	adds	r3, #12
 800b48c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b48e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b496:	e841 2300 	strex	r3, r2, [r1]
 800b49a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1e5      	bne.n	800b46e <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	695b      	ldr	r3, [r3, #20]
 800b4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ac:	2b40      	cmp	r3, #64	; 0x40
 800b4ae:	d136      	bne.n	800b51e <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3314      	adds	r3, #20
 800b4b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	e853 3f00 	ldrex	r3, [r3]
 800b4be:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4c6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3314      	adds	r3, #20
 800b4ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4d0:	61ba      	str	r2, [r7, #24]
 800b4d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4d4:	6979      	ldr	r1, [r7, #20]
 800b4d6:	69ba      	ldr	r2, [r7, #24]
 800b4d8:	e841 2300 	strex	r3, r2, [r1]
 800b4dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b4de:	693b      	ldr	r3, [r7, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e5      	bne.n	800b4b0 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d018      	beq.n	800b51e <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	f7f9 ff11 	bl	8005320 <HAL_DMA_Abort>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00c      	beq.n	800b51e <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fa f925 	bl	8005758 <HAL_DMA_GetError>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b20      	cmp	r3, #32
 800b512:	d104      	bne.n	800b51e <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2210      	movs	r2, #16
 800b518:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b51a:	2303      	movs	r3, #3
 800b51c:	e00a      	b.n	800b534 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2200      	movs	r2, #0
 800b522:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2220      	movs	r2, #32
 800b528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2200      	movs	r2, #0
 800b530:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3768      	adds	r7, #104	; 0x68
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b0ba      	sub	sp, #232	; 0xe8
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68db      	ldr	r3, [r3, #12]
 800b554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b562:	2300      	movs	r3, #0
 800b564:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b568:	2300      	movs	r3, #0
 800b56a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b572:	f003 030f 	and.w	r3, r3, #15
 800b576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b57a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d10f      	bne.n	800b5a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b586:	f003 0320 	and.w	r3, r3, #32
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d009      	beq.n	800b5a2 <HAL_UART_IRQHandler+0x66>
 800b58e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b592:	f003 0320 	and.w	r3, r3, #32
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 fc03 	bl	800bda6 <UART_Receive_IT>
      return;
 800b5a0:	e256      	b.n	800ba50 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b5a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f000 80de 	beq.w	800b768 <HAL_UART_IRQHandler+0x22c>
 800b5ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5b0:	f003 0301 	and.w	r3, r3, #1
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d106      	bne.n	800b5c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80d1 	beq.w	800b768 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00b      	beq.n	800b5ea <HAL_UART_IRQHandler+0xae>
 800b5d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d005      	beq.n	800b5ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e2:	f043 0201 	orr.w	r2, r3, #1
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ee:	f003 0304 	and.w	r3, r3, #4
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d00b      	beq.n	800b60e <HAL_UART_IRQHandler+0xd2>
 800b5f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d005      	beq.n	800b60e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b606:	f043 0202 	orr.w	r2, r3, #2
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b60e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b612:	f003 0302 	and.w	r3, r3, #2
 800b616:	2b00      	cmp	r3, #0
 800b618:	d00b      	beq.n	800b632 <HAL_UART_IRQHandler+0xf6>
 800b61a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b61e:	f003 0301 	and.w	r3, r3, #1
 800b622:	2b00      	cmp	r3, #0
 800b624:	d005      	beq.n	800b632 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b62a:	f043 0204 	orr.w	r2, r3, #4
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b636:	f003 0308 	and.w	r3, r3, #8
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d011      	beq.n	800b662 <HAL_UART_IRQHandler+0x126>
 800b63e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b642:	f003 0320 	and.w	r3, r3, #32
 800b646:	2b00      	cmp	r3, #0
 800b648:	d105      	bne.n	800b656 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b64a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b64e:	f003 0301 	and.w	r3, r3, #1
 800b652:	2b00      	cmp	r3, #0
 800b654:	d005      	beq.n	800b662 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65a:	f043 0208 	orr.w	r2, r3, #8
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b666:	2b00      	cmp	r3, #0
 800b668:	f000 81ed 	beq.w	800ba46 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b670:	f003 0320 	and.w	r3, r3, #32
 800b674:	2b00      	cmp	r3, #0
 800b676:	d008      	beq.n	800b68a <HAL_UART_IRQHandler+0x14e>
 800b678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b67c:	f003 0320 	and.w	r3, r3, #32
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fb8e 	bl	800bda6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b694:	2b40      	cmp	r3, #64	; 0x40
 800b696:	bf0c      	ite	eq
 800b698:	2301      	moveq	r3, #1
 800b69a:	2300      	movne	r3, #0
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a6:	f003 0308 	and.w	r3, r3, #8
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d103      	bne.n	800b6b6 <HAL_UART_IRQHandler+0x17a>
 800b6ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d04f      	beq.n	800b756 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 fa96 	bl	800bbe8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6c6:	2b40      	cmp	r3, #64	; 0x40
 800b6c8:	d141      	bne.n	800b74e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3314      	adds	r3, #20
 800b6d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b6d8:	e853 3f00 	ldrex	r3, [r3]
 800b6dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b6e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3314      	adds	r3, #20
 800b6f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b6f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b6fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b702:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b706:	e841 2300 	strex	r3, r2, [r1]
 800b70a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b70e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b712:	2b00      	cmp	r3, #0
 800b714:	d1d9      	bne.n	800b6ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d013      	beq.n	800b746 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b722:	4a7d      	ldr	r2, [pc, #500]	; (800b918 <HAL_UART_IRQHandler+0x3dc>)
 800b724:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b72a:	4618      	mov	r0, r3
 800b72c:	f7f9 fe68 	bl	8005400 <HAL_DMA_Abort_IT>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d016      	beq.n	800b764 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b73c:	687a      	ldr	r2, [r7, #4]
 800b73e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b740:	4610      	mov	r0, r2
 800b742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b744:	e00e      	b.n	800b764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f990 	bl	800ba6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b74c:	e00a      	b.n	800b764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 f98c 	bl	800ba6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b754:	e006      	b.n	800b764 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b756:	6878      	ldr	r0, [r7, #4]
 800b758:	f000 f988 	bl	800ba6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b762:	e170      	b.n	800ba46 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b764:	bf00      	nop
    return;
 800b766:	e16e      	b.n	800ba46 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	f040 814a 	bne.w	800ba06 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b776:	f003 0310 	and.w	r3, r3, #16
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	f000 8143 	beq.w	800ba06 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b784:	f003 0310 	and.w	r3, r3, #16
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 813c 	beq.w	800ba06 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b78e:	2300      	movs	r3, #0
 800b790:	60bb      	str	r3, [r7, #8]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	60bb      	str	r3, [r7, #8]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	60bb      	str	r3, [r7, #8]
 800b7a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	695b      	ldr	r3, [r3, #20]
 800b7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ae:	2b40      	cmp	r3, #64	; 0x40
 800b7b0:	f040 80b4 	bne.w	800b91c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	685b      	ldr	r3, [r3, #4]
 800b7bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 8140 	beq.w	800ba4a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	f080 8139 	bcs.w	800ba4a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7e4:	69db      	ldr	r3, [r3, #28]
 800b7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7ea:	f000 8088 	beq.w	800b8fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	330c      	adds	r3, #12
 800b7f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b7fc:	e853 3f00 	ldrex	r3, [r3]
 800b800:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b804:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b808:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b80c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	330c      	adds	r3, #12
 800b816:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b81a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b81e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b822:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b826:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b82a:	e841 2300 	strex	r3, r2, [r1]
 800b82e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b832:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b836:	2b00      	cmp	r3, #0
 800b838:	d1d9      	bne.n	800b7ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	3314      	adds	r3, #20
 800b840:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b842:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b844:	e853 3f00 	ldrex	r3, [r3]
 800b848:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b84a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b84c:	f023 0301 	bic.w	r3, r3, #1
 800b850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	3314      	adds	r3, #20
 800b85a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b85e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b862:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b864:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b866:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b86a:	e841 2300 	strex	r3, r2, [r1]
 800b86e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b872:	2b00      	cmp	r3, #0
 800b874:	d1e1      	bne.n	800b83a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3314      	adds	r3, #20
 800b87c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b880:	e853 3f00 	ldrex	r3, [r3]
 800b884:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b88c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	3314      	adds	r3, #20
 800b896:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b89a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b89c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b8a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b8a2:	e841 2300 	strex	r3, r2, [r1]
 800b8a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b8a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d1e3      	bne.n	800b876 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2220      	movs	r2, #32
 800b8b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	330c      	adds	r3, #12
 800b8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8c6:	e853 3f00 	ldrex	r3, [r3]
 800b8ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8ce:	f023 0310 	bic.w	r3, r3, #16
 800b8d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	330c      	adds	r3, #12
 800b8dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b8e0:	65ba      	str	r2, [r7, #88]	; 0x58
 800b8e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8e8:	e841 2300 	strex	r3, r2, [r1]
 800b8ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d1e3      	bne.n	800b8bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7f9 fd11 	bl	8005320 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b906:	b29b      	uxth	r3, r3
 800b908:	1ad3      	subs	r3, r2, r3
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	4619      	mov	r1, r3
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f8b6 	bl	800ba80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b914:	e099      	b.n	800ba4a <HAL_UART_IRQHandler+0x50e>
 800b916:	bf00      	nop
 800b918:	0800bcaf 	.word	0x0800bcaf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b924:	b29b      	uxth	r3, r3
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b930:	b29b      	uxth	r3, r3
 800b932:	2b00      	cmp	r3, #0
 800b934:	f000 808b 	beq.w	800ba4e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800b938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 8086 	beq.w	800ba4e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	330c      	adds	r3, #12
 800b948:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b94a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94c:	e853 3f00 	ldrex	r3, [r3]
 800b950:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b958:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	330c      	adds	r3, #12
 800b962:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b966:	647a      	str	r2, [r7, #68]	; 0x44
 800b968:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b96a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b96c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b96e:	e841 2300 	strex	r3, r2, [r1]
 800b972:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b976:	2b00      	cmp	r3, #0
 800b978:	d1e3      	bne.n	800b942 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3314      	adds	r3, #20
 800b980:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	e853 3f00 	ldrex	r3, [r3]
 800b988:	623b      	str	r3, [r7, #32]
   return(result);
 800b98a:	6a3b      	ldr	r3, [r7, #32]
 800b98c:	f023 0301 	bic.w	r3, r3, #1
 800b990:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	3314      	adds	r3, #20
 800b99a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b99e:	633a      	str	r2, [r7, #48]	; 0x30
 800b9a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b9a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9a6:	e841 2300 	strex	r3, r2, [r1]
 800b9aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1e3      	bne.n	800b97a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2220      	movs	r2, #32
 800b9b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2200      	movs	r2, #0
 800b9be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	330c      	adds	r3, #12
 800b9c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c8:	693b      	ldr	r3, [r7, #16]
 800b9ca:	e853 3f00 	ldrex	r3, [r3]
 800b9ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f023 0310 	bic.w	r3, r3, #16
 800b9d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	330c      	adds	r3, #12
 800b9e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b9e4:	61fa      	str	r2, [r7, #28]
 800b9e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9e8:	69b9      	ldr	r1, [r7, #24]
 800b9ea:	69fa      	ldr	r2, [r7, #28]
 800b9ec:	e841 2300 	strex	r3, r2, [r1]
 800b9f0:	617b      	str	r3, [r7, #20]
   return(result);
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d1e3      	bne.n	800b9c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b9f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f83e 	bl	800ba80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ba04:	e023      	b.n	800ba4e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800ba06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d009      	beq.n	800ba26 <HAL_UART_IRQHandler+0x4ea>
 800ba12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 f959 	bl	800bcd6 <UART_Transmit_IT>
    return;
 800ba24:	e014      	b.n	800ba50 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00e      	beq.n	800ba50 <HAL_UART_IRQHandler+0x514>
 800ba32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d008      	beq.n	800ba50 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f000 f999 	bl	800bd76 <UART_EndTransmit_IT>
    return;
 800ba44:	e004      	b.n	800ba50 <HAL_UART_IRQHandler+0x514>
    return;
 800ba46:	bf00      	nop
 800ba48:	e002      	b.n	800ba50 <HAL_UART_IRQHandler+0x514>
      return;
 800ba4a:	bf00      	nop
 800ba4c:	e000      	b.n	800ba50 <HAL_UART_IRQHandler+0x514>
      return;
 800ba4e:	bf00      	nop
  }
}
 800ba50:	37e8      	adds	r7, #232	; 0xe8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop

0800ba58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ba74:	bf00      	nop
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b090      	sub	sp, #64	; 0x40
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	603b      	str	r3, [r7, #0]
 800baa4:	4613      	mov	r3, r2
 800baa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800baa8:	e050      	b.n	800bb4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800baaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800baac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bab0:	d04c      	beq.n	800bb4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800bab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d007      	beq.n	800bac8 <UART_WaitOnFlagUntilTimeout+0x30>
 800bab8:	f7f8 fbf8 	bl	80042ac <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d241      	bcs.n	800bb4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	330c      	adds	r3, #12
 800bace:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad2:	e853 3f00 	ldrex	r3, [r3]
 800bad6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	330c      	adds	r3, #12
 800bae6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bae8:	637a      	str	r2, [r7, #52]	; 0x34
 800baea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800baee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800baf0:	e841 2300 	strex	r3, r2, [r1]
 800baf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800baf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1e5      	bne.n	800bac8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	3314      	adds	r3, #20
 800bb02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	e853 3f00 	ldrex	r3, [r3]
 800bb0a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	f023 0301 	bic.w	r3, r3, #1
 800bb12:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	3314      	adds	r3, #20
 800bb1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb1c:	623a      	str	r2, [r7, #32]
 800bb1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb20:	69f9      	ldr	r1, [r7, #28]
 800bb22:	6a3a      	ldr	r2, [r7, #32]
 800bb24:	e841 2300 	strex	r3, r2, [r1]
 800bb28:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1e5      	bne.n	800bafc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	2220      	movs	r2, #32
 800bb34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2220      	movs	r2, #32
 800bb3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e00f      	b.n	800bb6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	68bb      	ldr	r3, [r7, #8]
 800bb54:	4013      	ands	r3, r2
 800bb56:	68ba      	ldr	r2, [r7, #8]
 800bb58:	429a      	cmp	r2, r3
 800bb5a:	bf0c      	ite	eq
 800bb5c:	2301      	moveq	r3, #1
 800bb5e:	2300      	movne	r3, #0
 800bb60:	b2db      	uxtb	r3, r3
 800bb62:	461a      	mov	r2, r3
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d09f      	beq.n	800baaa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800bb6a:	2300      	movs	r3, #0
}
 800bb6c:	4618      	mov	r0, r3
 800bb6e:	3740      	adds	r7, #64	; 0x40
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bb74:	b480      	push	{r7}
 800bb76:	b085      	sub	sp, #20
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	60f8      	str	r0, [r7, #12]
 800bb7c:	60b9      	str	r1, [r7, #8]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	68ba      	ldr	r2, [r7, #8]
 800bb86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	88fa      	ldrh	r2, [r7, #6]
 800bb8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	88fa      	ldrh	r2, [r7, #6]
 800bb92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2200      	movs	r2, #0
 800bb98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2222      	movs	r2, #34	; 0x22
 800bb9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68da      	ldr	r2, [r3, #12]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbb8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	695a      	ldr	r2, [r3, #20]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f042 0201 	orr.w	r2, r2, #1
 800bbc8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68da      	ldr	r2, [r3, #12]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f042 0220 	orr.w	r2, r2, #32
 800bbd8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3714      	adds	r7, #20
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b095      	sub	sp, #84	; 0x54
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	330c      	adds	r3, #12
 800bbf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbfa:	e853 3f00 	ldrex	r3, [r3]
 800bbfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bc06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	330c      	adds	r3, #12
 800bc0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc10:	643a      	str	r2, [r7, #64]	; 0x40
 800bc12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bc16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc18:	e841 2300 	strex	r3, r2, [r1]
 800bc1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d1e5      	bne.n	800bbf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	3314      	adds	r3, #20
 800bc2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2c:	6a3b      	ldr	r3, [r7, #32]
 800bc2e:	e853 3f00 	ldrex	r3, [r3]
 800bc32:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	f023 0301 	bic.w	r3, r3, #1
 800bc3a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	3314      	adds	r3, #20
 800bc42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc44:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc4c:	e841 2300 	strex	r3, r2, [r1]
 800bc50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d1e5      	bne.n	800bc24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5c:	2b01      	cmp	r3, #1
 800bc5e:	d119      	bne.n	800bc94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	330c      	adds	r3, #12
 800bc66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	e853 3f00 	ldrex	r3, [r3]
 800bc6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	f023 0310 	bic.w	r3, r3, #16
 800bc76:	647b      	str	r3, [r7, #68]	; 0x44
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	330c      	adds	r3, #12
 800bc7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bc80:	61ba      	str	r2, [r7, #24]
 800bc82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc84:	6979      	ldr	r1, [r7, #20]
 800bc86:	69ba      	ldr	r2, [r7, #24]
 800bc88:	e841 2300 	strex	r3, r2, [r1]
 800bc8c:	613b      	str	r3, [r7, #16]
   return(result);
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1e5      	bne.n	800bc60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2220      	movs	r2, #32
 800bc98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bca2:	bf00      	nop
 800bca4:	3754      	adds	r7, #84	; 0x54
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f7ff fecf 	bl	800ba6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcce:	bf00      	nop
 800bcd0:	3710      	adds	r7, #16
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bd80      	pop	{r7, pc}

0800bcd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	b085      	sub	sp, #20
 800bcda:	af00      	add	r7, sp, #0
 800bcdc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b21      	cmp	r3, #33	; 0x21
 800bce8:	d13e      	bne.n	800bd68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	689b      	ldr	r3, [r3, #8]
 800bcee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bcf2:	d114      	bne.n	800bd1e <UART_Transmit_IT+0x48>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d110      	bne.n	800bd1e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6a1b      	ldr	r3, [r3, #32]
 800bd00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	461a      	mov	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	1c9a      	adds	r2, r3, #2
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	621a      	str	r2, [r3, #32]
 800bd1c:	e008      	b.n	800bd30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	1c59      	adds	r1, r3, #1
 800bd24:	687a      	ldr	r2, [r7, #4]
 800bd26:	6211      	str	r1, [r2, #32]
 800bd28:	781a      	ldrb	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bd34:	b29b      	uxth	r3, r3
 800bd36:	3b01      	subs	r3, #1
 800bd38:	b29b      	uxth	r3, r3
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10f      	bne.n	800bd64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	68da      	ldr	r2, [r3, #12]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	68da      	ldr	r2, [r3, #12]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bd64:	2300      	movs	r3, #0
 800bd66:	e000      	b.n	800bd6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bd68:	2302      	movs	r3, #2
  }
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3714      	adds	r7, #20
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b082      	sub	sp, #8
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68da      	ldr	r2, [r3, #12]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bd8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2220      	movs	r2, #32
 800bd92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff fe5e 	bl	800ba58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	3708      	adds	r7, #8
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b08c      	sub	sp, #48	; 0x30
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2b22      	cmp	r3, #34	; 0x22
 800bdb8:	f040 80ab 	bne.w	800bf12 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	689b      	ldr	r3, [r3, #8]
 800bdc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdc4:	d117      	bne.n	800bdf6 <UART_Receive_IT+0x50>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	691b      	ldr	r3, [r3, #16]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d113      	bne.n	800bdf6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdee:	1c9a      	adds	r2, r3, #2
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	629a      	str	r2, [r3, #40]	; 0x28
 800bdf4:	e026      	b.n	800be44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be08:	d007      	beq.n	800be1a <UART_Receive_IT+0x74>
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	689b      	ldr	r3, [r3, #8]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10a      	bne.n	800be28 <UART_Receive_IT+0x82>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	691b      	ldr	r3, [r3, #16]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d106      	bne.n	800be28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	b2da      	uxtb	r2, r3
 800be22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be24:	701a      	strb	r2, [r3, #0]
 800be26:	e008      	b.n	800be3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be34:	b2da      	uxtb	r2, r3
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be3e:	1c5a      	adds	r2, r3, #1
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800be48:	b29b      	uxth	r3, r3
 800be4a:	3b01      	subs	r3, #1
 800be4c:	b29b      	uxth	r3, r3
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	4619      	mov	r1, r3
 800be52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800be54:	2b00      	cmp	r3, #0
 800be56:	d15a      	bne.n	800bf0e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68da      	ldr	r2, [r3, #12]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f022 0220 	bic.w	r2, r2, #32
 800be66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	68da      	ldr	r2, [r3, #12]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800be76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	695a      	ldr	r2, [r3, #20]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f022 0201 	bic.w	r2, r2, #1
 800be86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2220      	movs	r2, #32
 800be8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be94:	2b01      	cmp	r3, #1
 800be96:	d135      	bne.n	800bf04 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	330c      	adds	r3, #12
 800bea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	e853 3f00 	ldrex	r3, [r3]
 800beac:	613b      	str	r3, [r7, #16]
   return(result);
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f023 0310 	bic.w	r3, r3, #16
 800beb4:	627b      	str	r3, [r7, #36]	; 0x24
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	330c      	adds	r3, #12
 800bebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bebe:	623a      	str	r2, [r7, #32]
 800bec0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec2:	69f9      	ldr	r1, [r7, #28]
 800bec4:	6a3a      	ldr	r2, [r7, #32]
 800bec6:	e841 2300 	strex	r3, r2, [r1]
 800beca:	61bb      	str	r3, [r7, #24]
   return(result);
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d1e5      	bne.n	800be9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0310 	and.w	r3, r3, #16
 800bedc:	2b10      	cmp	r3, #16
 800bede:	d10a      	bne.n	800bef6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bee0:	2300      	movs	r3, #0
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	60fb      	str	r3, [r7, #12]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	60fb      	str	r3, [r7, #12]
 800bef4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800befa:	4619      	mov	r1, r3
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f7ff fdbf 	bl	800ba80 <HAL_UARTEx_RxEventCallback>
 800bf02:	e002      	b.n	800bf0a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f7f4 ff7b 	bl	8000e00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	e002      	b.n	800bf14 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	e000      	b.n	800bf14 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800bf12:	2302      	movs	r3, #2
  }
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3730      	adds	r7, #48	; 0x30
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bf1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf20:	b09f      	sub	sp, #124	; 0x7c
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bf30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf32:	68d9      	ldr	r1, [r3, #12]
 800bf34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf36:	681a      	ldr	r2, [r3, #0]
 800bf38:	ea40 0301 	orr.w	r3, r0, r1
 800bf3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800bf3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf40:	689a      	ldr	r2, [r3, #8]
 800bf42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	431a      	orrs	r2, r3
 800bf48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	431a      	orrs	r2, r3
 800bf4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf50:	69db      	ldr	r3, [r3, #28]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800bf56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800bf60:	f021 010c 	bic.w	r1, r1, #12
 800bf64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf66:	681a      	ldr	r2, [r3, #0]
 800bf68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf6a:	430b      	orrs	r3, r1
 800bf6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bf6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	695b      	ldr	r3, [r3, #20]
 800bf74:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800bf78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf7a:	6999      	ldr	r1, [r3, #24]
 800bf7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf7e:	681a      	ldr	r2, [r3, #0]
 800bf80:	ea40 0301 	orr.w	r3, r0, r1
 800bf84:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bf86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	4bc5      	ldr	r3, [pc, #788]	; (800c2a0 <UART_SetConfig+0x384>)
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d004      	beq.n	800bf9a <UART_SetConfig+0x7e>
 800bf90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	4bc3      	ldr	r3, [pc, #780]	; (800c2a4 <UART_SetConfig+0x388>)
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d103      	bne.n	800bfa2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800bf9a:	f7fc fbb9 	bl	8008710 <HAL_RCC_GetPCLK2Freq>
 800bf9e:	6778      	str	r0, [r7, #116]	; 0x74
 800bfa0:	e002      	b.n	800bfa8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bfa2:	f7fc fba1 	bl	80086e8 <HAL_RCC_GetPCLK1Freq>
 800bfa6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bfaa:	69db      	ldr	r3, [r3, #28]
 800bfac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfb0:	f040 80b6 	bne.w	800c120 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bfb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfb6:	461c      	mov	r4, r3
 800bfb8:	f04f 0500 	mov.w	r5, #0
 800bfbc:	4622      	mov	r2, r4
 800bfbe:	462b      	mov	r3, r5
 800bfc0:	1891      	adds	r1, r2, r2
 800bfc2:	6439      	str	r1, [r7, #64]	; 0x40
 800bfc4:	415b      	adcs	r3, r3
 800bfc6:	647b      	str	r3, [r7, #68]	; 0x44
 800bfc8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800bfcc:	1912      	adds	r2, r2, r4
 800bfce:	eb45 0303 	adc.w	r3, r5, r3
 800bfd2:	f04f 0000 	mov.w	r0, #0
 800bfd6:	f04f 0100 	mov.w	r1, #0
 800bfda:	00d9      	lsls	r1, r3, #3
 800bfdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800bfe0:	00d0      	lsls	r0, r2, #3
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	1911      	adds	r1, r2, r4
 800bfe8:	6639      	str	r1, [r7, #96]	; 0x60
 800bfea:	416b      	adcs	r3, r5
 800bfec:	667b      	str	r3, [r7, #100]	; 0x64
 800bfee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff0:	685b      	ldr	r3, [r3, #4]
 800bff2:	461a      	mov	r2, r3
 800bff4:	f04f 0300 	mov.w	r3, #0
 800bff8:	1891      	adds	r1, r2, r2
 800bffa:	63b9      	str	r1, [r7, #56]	; 0x38
 800bffc:	415b      	adcs	r3, r3
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c004:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800c008:	f7f4 fd50 	bl	8000aac <__aeabi_uldivmod>
 800c00c:	4602      	mov	r2, r0
 800c00e:	460b      	mov	r3, r1
 800c010:	4ba5      	ldr	r3, [pc, #660]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c012:	fba3 2302 	umull	r2, r3, r3, r2
 800c016:	095b      	lsrs	r3, r3, #5
 800c018:	011e      	lsls	r6, r3, #4
 800c01a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c01c:	461c      	mov	r4, r3
 800c01e:	f04f 0500 	mov.w	r5, #0
 800c022:	4622      	mov	r2, r4
 800c024:	462b      	mov	r3, r5
 800c026:	1891      	adds	r1, r2, r2
 800c028:	6339      	str	r1, [r7, #48]	; 0x30
 800c02a:	415b      	adcs	r3, r3
 800c02c:	637b      	str	r3, [r7, #52]	; 0x34
 800c02e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800c032:	1912      	adds	r2, r2, r4
 800c034:	eb45 0303 	adc.w	r3, r5, r3
 800c038:	f04f 0000 	mov.w	r0, #0
 800c03c:	f04f 0100 	mov.w	r1, #0
 800c040:	00d9      	lsls	r1, r3, #3
 800c042:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c046:	00d0      	lsls	r0, r2, #3
 800c048:	4602      	mov	r2, r0
 800c04a:	460b      	mov	r3, r1
 800c04c:	1911      	adds	r1, r2, r4
 800c04e:	65b9      	str	r1, [r7, #88]	; 0x58
 800c050:	416b      	adcs	r3, r5
 800c052:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c056:	685b      	ldr	r3, [r3, #4]
 800c058:	461a      	mov	r2, r3
 800c05a:	f04f 0300 	mov.w	r3, #0
 800c05e:	1891      	adds	r1, r2, r2
 800c060:	62b9      	str	r1, [r7, #40]	; 0x28
 800c062:	415b      	adcs	r3, r3
 800c064:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c06a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800c06e:	f7f4 fd1d 	bl	8000aac <__aeabi_uldivmod>
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	4b8c      	ldr	r3, [pc, #560]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c078:	fba3 1302 	umull	r1, r3, r3, r2
 800c07c:	095b      	lsrs	r3, r3, #5
 800c07e:	2164      	movs	r1, #100	; 0x64
 800c080:	fb01 f303 	mul.w	r3, r1, r3
 800c084:	1ad3      	subs	r3, r2, r3
 800c086:	00db      	lsls	r3, r3, #3
 800c088:	3332      	adds	r3, #50	; 0x32
 800c08a:	4a87      	ldr	r2, [pc, #540]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c08c:	fba2 2303 	umull	r2, r3, r2, r3
 800c090:	095b      	lsrs	r3, r3, #5
 800c092:	005b      	lsls	r3, r3, #1
 800c094:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c098:	441e      	add	r6, r3
 800c09a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c09c:	4618      	mov	r0, r3
 800c09e:	f04f 0100 	mov.w	r1, #0
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	1894      	adds	r4, r2, r2
 800c0a8:	623c      	str	r4, [r7, #32]
 800c0aa:	415b      	adcs	r3, r3
 800c0ac:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c0b2:	1812      	adds	r2, r2, r0
 800c0b4:	eb41 0303 	adc.w	r3, r1, r3
 800c0b8:	f04f 0400 	mov.w	r4, #0
 800c0bc:	f04f 0500 	mov.w	r5, #0
 800c0c0:	00dd      	lsls	r5, r3, #3
 800c0c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c0c6:	00d4      	lsls	r4, r2, #3
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	462b      	mov	r3, r5
 800c0cc:	1814      	adds	r4, r2, r0
 800c0ce:	653c      	str	r4, [r7, #80]	; 0x50
 800c0d0:	414b      	adcs	r3, r1
 800c0d2:	657b      	str	r3, [r7, #84]	; 0x54
 800c0d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	461a      	mov	r2, r3
 800c0da:	f04f 0300 	mov.w	r3, #0
 800c0de:	1891      	adds	r1, r2, r2
 800c0e0:	61b9      	str	r1, [r7, #24]
 800c0e2:	415b      	adcs	r3, r3
 800c0e4:	61fb      	str	r3, [r7, #28]
 800c0e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c0ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800c0ee:	f7f4 fcdd 	bl	8000aac <__aeabi_uldivmod>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	4b6c      	ldr	r3, [pc, #432]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c0f8:	fba3 1302 	umull	r1, r3, r3, r2
 800c0fc:	095b      	lsrs	r3, r3, #5
 800c0fe:	2164      	movs	r1, #100	; 0x64
 800c100:	fb01 f303 	mul.w	r3, r1, r3
 800c104:	1ad3      	subs	r3, r2, r3
 800c106:	00db      	lsls	r3, r3, #3
 800c108:	3332      	adds	r3, #50	; 0x32
 800c10a:	4a67      	ldr	r2, [pc, #412]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c10c:	fba2 2303 	umull	r2, r3, r2, r3
 800c110:	095b      	lsrs	r3, r3, #5
 800c112:	f003 0207 	and.w	r2, r3, #7
 800c116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4432      	add	r2, r6
 800c11c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c11e:	e0b9      	b.n	800c294 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c120:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c122:	461c      	mov	r4, r3
 800c124:	f04f 0500 	mov.w	r5, #0
 800c128:	4622      	mov	r2, r4
 800c12a:	462b      	mov	r3, r5
 800c12c:	1891      	adds	r1, r2, r2
 800c12e:	6139      	str	r1, [r7, #16]
 800c130:	415b      	adcs	r3, r3
 800c132:	617b      	str	r3, [r7, #20]
 800c134:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800c138:	1912      	adds	r2, r2, r4
 800c13a:	eb45 0303 	adc.w	r3, r5, r3
 800c13e:	f04f 0000 	mov.w	r0, #0
 800c142:	f04f 0100 	mov.w	r1, #0
 800c146:	00d9      	lsls	r1, r3, #3
 800c148:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800c14c:	00d0      	lsls	r0, r2, #3
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	eb12 0804 	adds.w	r8, r2, r4
 800c156:	eb43 0905 	adc.w	r9, r3, r5
 800c15a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	4618      	mov	r0, r3
 800c160:	f04f 0100 	mov.w	r1, #0
 800c164:	f04f 0200 	mov.w	r2, #0
 800c168:	f04f 0300 	mov.w	r3, #0
 800c16c:	008b      	lsls	r3, r1, #2
 800c16e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c172:	0082      	lsls	r2, r0, #2
 800c174:	4640      	mov	r0, r8
 800c176:	4649      	mov	r1, r9
 800c178:	f7f4 fc98 	bl	8000aac <__aeabi_uldivmod>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4b49      	ldr	r3, [pc, #292]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c182:	fba3 2302 	umull	r2, r3, r3, r2
 800c186:	095b      	lsrs	r3, r3, #5
 800c188:	011e      	lsls	r6, r3, #4
 800c18a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c18c:	4618      	mov	r0, r3
 800c18e:	f04f 0100 	mov.w	r1, #0
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	1894      	adds	r4, r2, r2
 800c198:	60bc      	str	r4, [r7, #8]
 800c19a:	415b      	adcs	r3, r3
 800c19c:	60fb      	str	r3, [r7, #12]
 800c19e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c1a2:	1812      	adds	r2, r2, r0
 800c1a4:	eb41 0303 	adc.w	r3, r1, r3
 800c1a8:	f04f 0400 	mov.w	r4, #0
 800c1ac:	f04f 0500 	mov.w	r5, #0
 800c1b0:	00dd      	lsls	r5, r3, #3
 800c1b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c1b6:	00d4      	lsls	r4, r2, #3
 800c1b8:	4622      	mov	r2, r4
 800c1ba:	462b      	mov	r3, r5
 800c1bc:	1814      	adds	r4, r2, r0
 800c1be:	64bc      	str	r4, [r7, #72]	; 0x48
 800c1c0:	414b      	adcs	r3, r1
 800c1c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f04f 0100 	mov.w	r1, #0
 800c1ce:	f04f 0200 	mov.w	r2, #0
 800c1d2:	f04f 0300 	mov.w	r3, #0
 800c1d6:	008b      	lsls	r3, r1, #2
 800c1d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c1dc:	0082      	lsls	r2, r0, #2
 800c1de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800c1e2:	f7f4 fc63 	bl	8000aac <__aeabi_uldivmod>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	4b2f      	ldr	r3, [pc, #188]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c1ec:	fba3 1302 	umull	r1, r3, r3, r2
 800c1f0:	095b      	lsrs	r3, r3, #5
 800c1f2:	2164      	movs	r1, #100	; 0x64
 800c1f4:	fb01 f303 	mul.w	r3, r1, r3
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	011b      	lsls	r3, r3, #4
 800c1fc:	3332      	adds	r3, #50	; 0x32
 800c1fe:	4a2a      	ldr	r2, [pc, #168]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c200:	fba2 2303 	umull	r2, r3, r2, r3
 800c204:	095b      	lsrs	r3, r3, #5
 800c206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c20a:	441e      	add	r6, r3
 800c20c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c20e:	4618      	mov	r0, r3
 800c210:	f04f 0100 	mov.w	r1, #0
 800c214:	4602      	mov	r2, r0
 800c216:	460b      	mov	r3, r1
 800c218:	1894      	adds	r4, r2, r2
 800c21a:	603c      	str	r4, [r7, #0]
 800c21c:	415b      	adcs	r3, r3
 800c21e:	607b      	str	r3, [r7, #4]
 800c220:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c224:	1812      	adds	r2, r2, r0
 800c226:	eb41 0303 	adc.w	r3, r1, r3
 800c22a:	f04f 0400 	mov.w	r4, #0
 800c22e:	f04f 0500 	mov.w	r5, #0
 800c232:	00dd      	lsls	r5, r3, #3
 800c234:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800c238:	00d4      	lsls	r4, r2, #3
 800c23a:	4622      	mov	r2, r4
 800c23c:	462b      	mov	r3, r5
 800c23e:	eb12 0a00 	adds.w	sl, r2, r0
 800c242:	eb43 0b01 	adc.w	fp, r3, r1
 800c246:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f04f 0100 	mov.w	r1, #0
 800c250:	f04f 0200 	mov.w	r2, #0
 800c254:	f04f 0300 	mov.w	r3, #0
 800c258:	008b      	lsls	r3, r1, #2
 800c25a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800c25e:	0082      	lsls	r2, r0, #2
 800c260:	4650      	mov	r0, sl
 800c262:	4659      	mov	r1, fp
 800c264:	f7f4 fc22 	bl	8000aac <__aeabi_uldivmod>
 800c268:	4602      	mov	r2, r0
 800c26a:	460b      	mov	r3, r1
 800c26c:	4b0e      	ldr	r3, [pc, #56]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c26e:	fba3 1302 	umull	r1, r3, r3, r2
 800c272:	095b      	lsrs	r3, r3, #5
 800c274:	2164      	movs	r1, #100	; 0x64
 800c276:	fb01 f303 	mul.w	r3, r1, r3
 800c27a:	1ad3      	subs	r3, r2, r3
 800c27c:	011b      	lsls	r3, r3, #4
 800c27e:	3332      	adds	r3, #50	; 0x32
 800c280:	4a09      	ldr	r2, [pc, #36]	; (800c2a8 <UART_SetConfig+0x38c>)
 800c282:	fba2 2303 	umull	r2, r3, r2, r3
 800c286:	095b      	lsrs	r3, r3, #5
 800c288:	f003 020f 	and.w	r2, r3, #15
 800c28c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4432      	add	r2, r6
 800c292:	609a      	str	r2, [r3, #8]
}
 800c294:	bf00      	nop
 800c296:	377c      	adds	r7, #124	; 0x7c
 800c298:	46bd      	mov	sp, r7
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	bf00      	nop
 800c2a0:	40011000 	.word	0x40011000
 800c2a4:	40011400 	.word	0x40011400
 800c2a8:	51eb851f 	.word	0x51eb851f

0800c2ac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c2ac:	b084      	sub	sp, #16
 800c2ae:	b480      	push	{r7}
 800c2b0:	b085      	sub	sp, #20
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
 800c2b6:	f107 001c 	add.w	r0, r7, #28
 800c2ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c2c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c2c6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c2ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c2ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c2d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c2d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	685b      	ldr	r3, [r3, #4]
 800c2e2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c2e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	431a      	orrs	r2, r3
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3714      	adds	r7, #20
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	b004      	add	sp, #16
 800c300:	4770      	bx	lr

0800c302 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c302:	b480      	push	{r7}
 800c304:	b083      	sub	sp, #12
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c310:	4618      	mov	r0, r3
 800c312:	370c      	adds	r7, #12
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c31c:	b480      	push	{r7}
 800c31e:	b083      	sub	sp, #12
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c326:	683b      	ldr	r3, [r7, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c330:	2300      	movs	r3, #0
}
 800c332:	4618      	mov	r0, r3
 800c334:	370c      	adds	r7, #12
 800c336:	46bd      	mov	sp, r7
 800c338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33c:	4770      	bx	lr

0800c33e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c33e:	b580      	push	{r7, lr}
 800c340:	b082      	sub	sp, #8
 800c342:	af00      	add	r7, sp, #0
 800c344:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2203      	movs	r2, #3
 800c34a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c34c:	2002      	movs	r0, #2
 800c34e:	f7f7 ffb9 	bl	80042c4 <HAL_Delay>
  
  return HAL_OK;
 800c352:	2300      	movs	r3, #0
}
 800c354:	4618      	mov	r0, r3
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c35c:	b480      	push	{r7}
 800c35e:	b083      	sub	sp, #12
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f003 0303 	and.w	r3, r3, #3
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	370c      	adds	r7, #12
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr

0800c378 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	681a      	ldr	r2, [r3, #0]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c396:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c39c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c3a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c3a4:	68fa      	ldr	r2, [r7, #12]
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c3b2:	f023 030f 	bic.w	r3, r3, #15
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	431a      	orrs	r2, r3
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3714      	adds	r7, #20
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b083      	sub	sp, #12
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	691b      	ldr	r3, [r3, #16]
 800c3d8:	b2db      	uxtb	r3, r3
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr

0800c3e6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c3e6:	b480      	push	{r7}
 800c3e8:	b085      	sub	sp, #20
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3314      	adds	r3, #20
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
}  
 800c400:	4618      	mov	r0, r3
 800c402:	3714      	adds	r7, #20
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b085      	sub	sp, #20
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
 800c414:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c416:	2300      	movs	r3, #0
 800c418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	685a      	ldr	r2, [r3, #4]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c432:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c438:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c43e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	4313      	orrs	r3, r2
 800c444:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c44a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	431a      	orrs	r2, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c456:	2300      	movs	r3, #0

}
 800c458:	4618      	mov	r0, r3
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b088      	sub	sp, #32
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c472:	2310      	movs	r3, #16
 800c474:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c476:	2340      	movs	r3, #64	; 0x40
 800c478:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c47a:	2300      	movs	r3, #0
 800c47c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c47e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c482:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c484:	f107 0308 	add.w	r3, r7, #8
 800c488:	4619      	mov	r1, r3
 800c48a:	6878      	ldr	r0, [r7, #4]
 800c48c:	f7ff ff74 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c490:	f241 3288 	movw	r2, #5000	; 0x1388
 800c494:	2110      	movs	r1, #16
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 fa44 	bl	800c924 <SDMMC_GetCmdResp1>
 800c49c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c49e:	69fb      	ldr	r3, [r7, #28]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3720      	adds	r7, #32
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b088      	sub	sp, #32
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c4b6:	2311      	movs	r3, #17
 800c4b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4ba:	2340      	movs	r3, #64	; 0x40
 800c4bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4c8:	f107 0308 	add.w	r3, r7, #8
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f7ff ff52 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c4d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4d8:	2111      	movs	r1, #17
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 fa22 	bl	800c924 <SDMMC_GetCmdResp1>
 800c4e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4e2:	69fb      	ldr	r3, [r7, #28]
}
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	3720      	adds	r7, #32
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b088      	sub	sp, #32
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c4fa:	2312      	movs	r3, #18
 800c4fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4fe:	2340      	movs	r3, #64	; 0x40
 800c500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c502:	2300      	movs	r3, #0
 800c504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c50a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c50c:	f107 0308 	add.w	r3, r7, #8
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff ff30 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c518:	f241 3288 	movw	r2, #5000	; 0x1388
 800c51c:	2112      	movs	r1, #18
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fa00 	bl	800c924 <SDMMC_GetCmdResp1>
 800c524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c526:	69fb      	ldr	r3, [r7, #28]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3720      	adds	r7, #32
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c53e:	2318      	movs	r3, #24
 800c540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c542:	2340      	movs	r3, #64	; 0x40
 800c544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c546:	2300      	movs	r3, #0
 800c548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c54a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c54e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c550:	f107 0308 	add.w	r3, r7, #8
 800c554:	4619      	mov	r1, r3
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f7ff ff0e 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c55c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c560:	2118      	movs	r1, #24
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f000 f9de 	bl	800c924 <SDMMC_GetCmdResp1>
 800c568:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c56a:	69fb      	ldr	r3, [r7, #28]
}
 800c56c:	4618      	mov	r0, r3
 800c56e:	3720      	adds	r7, #32
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b088      	sub	sp, #32
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c582:	2319      	movs	r3, #25
 800c584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c586:	2340      	movs	r3, #64	; 0x40
 800c588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c58e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c592:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c594:	f107 0308 	add.w	r3, r7, #8
 800c598:	4619      	mov	r1, r3
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f7ff feec 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c5a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5a4:	2119      	movs	r1, #25
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f000 f9bc 	bl	800c924 <SDMMC_GetCmdResp1>
 800c5ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5ae:	69fb      	ldr	r3, [r7, #28]
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3720      	adds	r7, #32
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b088      	sub	sp, #32
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c5c4:	230c      	movs	r3, #12
 800c5c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5c8:	2340      	movs	r3, #64	; 0x40
 800c5ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5d6:	f107 0308 	add.w	r3, r7, #8
 800c5da:	4619      	mov	r1, r3
 800c5dc:	6878      	ldr	r0, [r7, #4]
 800c5de:	f7ff fecb 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c5e2:	4a05      	ldr	r2, [pc, #20]	; (800c5f8 <SDMMC_CmdStopTransfer+0x40>)
 800c5e4:	210c      	movs	r1, #12
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f99c 	bl	800c924 <SDMMC_GetCmdResp1>
 800c5ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5ee:	69fb      	ldr	r3, [r7, #28]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3720      	adds	r7, #32
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}
 800c5f8:	05f5e100 	.word	0x05f5e100

0800c5fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b08a      	sub	sp, #40	; 0x28
 800c600:	af00      	add	r7, sp, #0
 800c602:	60f8      	str	r0, [r7, #12]
 800c604:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c60c:	2307      	movs	r3, #7
 800c60e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c610:	2340      	movs	r3, #64	; 0x40
 800c612:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c614:	2300      	movs	r3, #0
 800c616:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c618:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c61c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c61e:	f107 0310 	add.w	r3, r7, #16
 800c622:	4619      	mov	r1, r3
 800c624:	68f8      	ldr	r0, [r7, #12]
 800c626:	f7ff fea7 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c62a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c62e:	2107      	movs	r1, #7
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f000 f977 	bl	800c924 <SDMMC_GetCmdResp1>
 800c636:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3728      	adds	r7, #40	; 0x28
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b088      	sub	sp, #32
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c64a:	2300      	movs	r3, #0
 800c64c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c64e:	2300      	movs	r3, #0
 800c650:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c652:	2300      	movs	r3, #0
 800c654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c656:	2300      	movs	r3, #0
 800c658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c65a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c65e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c660:	f107 0308 	add.w	r3, r7, #8
 800c664:	4619      	mov	r1, r3
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7ff fe86 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f92d 	bl	800c8cc <SDMMC_GetCmdError>
 800c672:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c674:	69fb      	ldr	r3, [r7, #28]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3720      	adds	r7, #32
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}

0800c67e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c67e:	b580      	push	{r7, lr}
 800c680:	b088      	sub	sp, #32
 800c682:	af00      	add	r7, sp, #0
 800c684:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c686:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c68a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c68c:	2308      	movs	r3, #8
 800c68e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c690:	2340      	movs	r3, #64	; 0x40
 800c692:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c694:	2300      	movs	r3, #0
 800c696:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c69c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c69e:	f107 0308 	add.w	r3, r7, #8
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f7ff fe67 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 fb24 	bl	800ccf8 <SDMMC_GetCmdResp7>
 800c6b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6b2:	69fb      	ldr	r3, [r7, #28]
}
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3720      	adds	r7, #32
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}

0800c6bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b088      	sub	sp, #32
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c6ca:	2337      	movs	r3, #55	; 0x37
 800c6cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c6ce:	2340      	movs	r3, #64	; 0x40
 800c6d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c6d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c6dc:	f107 0308 	add.w	r3, r7, #8
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f7ff fe48 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6ec:	2137      	movs	r1, #55	; 0x37
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f000 f918 	bl	800c924 <SDMMC_GetCmdResp1>
 800c6f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6f6:	69fb      	ldr	r3, [r7, #28]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3720      	adds	r7, #32
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}

0800c700 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b088      	sub	sp, #32
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c714:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c716:	2329      	movs	r3, #41	; 0x29
 800c718:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c71a:	2340      	movs	r3, #64	; 0x40
 800c71c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c71e:	2300      	movs	r3, #0
 800c720:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c726:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c728:	f107 0308 	add.w	r3, r7, #8
 800c72c:	4619      	mov	r1, r3
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff fe22 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f000 fa2b 	bl	800cb90 <SDMMC_GetCmdResp3>
 800c73a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c73c:	69fb      	ldr	r3, [r7, #28]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3720      	adds	r7, #32
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b088      	sub	sp, #32
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c754:	2306      	movs	r3, #6
 800c756:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c758:	2340      	movs	r3, #64	; 0x40
 800c75a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c75c:	2300      	movs	r3, #0
 800c75e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c764:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c766:	f107 0308 	add.w	r3, r7, #8
 800c76a:	4619      	mov	r1, r3
 800c76c:	6878      	ldr	r0, [r7, #4]
 800c76e:	f7ff fe03 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c772:	f241 3288 	movw	r2, #5000	; 0x1388
 800c776:	2106      	movs	r1, #6
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 f8d3 	bl	800c924 <SDMMC_GetCmdResp1>
 800c77e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c780:	69fb      	ldr	r3, [r7, #28]
}
 800c782:	4618      	mov	r0, r3
 800c784:	3720      	adds	r7, #32
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b088      	sub	sp, #32
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c792:	2300      	movs	r3, #0
 800c794:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c796:	2333      	movs	r3, #51	; 0x33
 800c798:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c79a:	2340      	movs	r3, #64	; 0x40
 800c79c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7a8:	f107 0308 	add.w	r3, r7, #8
 800c7ac:	4619      	mov	r1, r3
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7ff fde2 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c7b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7b8:	2133      	movs	r1, #51	; 0x33
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 f8b2 	bl	800c924 <SDMMC_GetCmdResp1>
 800c7c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7c2:	69fb      	ldr	r3, [r7, #28]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3720      	adds	r7, #32
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b088      	sub	sp, #32
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c7d8:	2302      	movs	r3, #2
 800c7da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c7dc:	23c0      	movs	r3, #192	; 0xc0
 800c7de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c7e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c7ea:	f107 0308 	add.w	r3, r7, #8
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f7ff fdc1 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c7f6:	6878      	ldr	r0, [r7, #4]
 800c7f8:	f000 f982 	bl	800cb00 <SDMMC_GetCmdResp2>
 800c7fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7fe:	69fb      	ldr	r3, [r7, #28]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3720      	adds	r7, #32
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b088      	sub	sp, #32
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c816:	2309      	movs	r3, #9
 800c818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c81a:	23c0      	movs	r3, #192	; 0xc0
 800c81c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c81e:	2300      	movs	r3, #0
 800c820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c828:	f107 0308 	add.w	r3, r7, #8
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff fda2 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f000 f963 	bl	800cb00 <SDMMC_GetCmdResp2>
 800c83a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c83c:	69fb      	ldr	r3, [r7, #28]
}
 800c83e:	4618      	mov	r0, r3
 800c840:	3720      	adds	r7, #32
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}

0800c846 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c846:	b580      	push	{r7, lr}
 800c848:	b088      	sub	sp, #32
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c850:	2300      	movs	r3, #0
 800c852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c854:	2303      	movs	r3, #3
 800c856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c858:	2340      	movs	r3, #64	; 0x40
 800c85a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c85c:	2300      	movs	r3, #0
 800c85e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c864:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c866:	f107 0308 	add.w	r3, r7, #8
 800c86a:	4619      	mov	r1, r3
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f7ff fd83 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c872:	683a      	ldr	r2, [r7, #0]
 800c874:	2103      	movs	r1, #3
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 f9c8 	bl	800cc0c <SDMMC_GetCmdResp6>
 800c87c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c87e:	69fb      	ldr	r3, [r7, #28]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3720      	adds	r7, #32
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b088      	sub	sp, #32
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c896:	230d      	movs	r3, #13
 800c898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c89a:	2340      	movs	r3, #64	; 0x40
 800c89c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c8a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c8a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c8a8:	f107 0308 	add.w	r3, r7, #8
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7ff fd62 	bl	800c378 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c8b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8b8:	210d      	movs	r1, #13
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f832 	bl	800c924 <SDMMC_GetCmdResp1>
 800c8c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8c2:	69fb      	ldr	r3, [r7, #28]
}
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	3720      	adds	r7, #32
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b085      	sub	sp, #20
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8d4:	4b11      	ldr	r3, [pc, #68]	; (800c91c <SDMMC_GetCmdError+0x50>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4a11      	ldr	r2, [pc, #68]	; (800c920 <SDMMC_GetCmdError+0x54>)
 800c8da:	fba2 2303 	umull	r2, r3, r2, r3
 800c8de:	0a5b      	lsrs	r3, r3, #9
 800c8e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8e4:	fb02 f303 	mul.w	r3, r2, r3
 800c8e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	1e5a      	subs	r2, r3, #1
 800c8ee:	60fa      	str	r2, [r7, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d102      	bne.n	800c8fa <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c8f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c8f8:	e009      	b.n	800c90e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c902:	2b00      	cmp	r3, #0
 800c904:	d0f1      	beq.n	800c8ea <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	22c5      	movs	r2, #197	; 0xc5
 800c90a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c90c:	2300      	movs	r3, #0
}
 800c90e:	4618      	mov	r0, r3
 800c910:	3714      	adds	r7, #20
 800c912:	46bd      	mov	sp, r7
 800c914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c918:	4770      	bx	lr
 800c91a:	bf00      	nop
 800c91c:	20000198 	.word	0x20000198
 800c920:	10624dd3 	.word	0x10624dd3

0800c924 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b088      	sub	sp, #32
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	460b      	mov	r3, r1
 800c92e:	607a      	str	r2, [r7, #4]
 800c930:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c932:	4b70      	ldr	r3, [pc, #448]	; (800caf4 <SDMMC_GetCmdResp1+0x1d0>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	4a70      	ldr	r2, [pc, #448]	; (800caf8 <SDMMC_GetCmdResp1+0x1d4>)
 800c938:	fba2 2303 	umull	r2, r3, r2, r3
 800c93c:	0a5a      	lsrs	r2, r3, #9
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	fb02 f303 	mul.w	r3, r2, r3
 800c944:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	1e5a      	subs	r2, r3, #1
 800c94a:	61fa      	str	r2, [r7, #28]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d102      	bne.n	800c956 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c950:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c954:	e0c9      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c95a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c962:	2b00      	cmp	r3, #0
 800c964:	d0ef      	beq.n	800c946 <SDMMC_GetCmdResp1+0x22>
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1ea      	bne.n	800c946 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c974:	f003 0304 	and.w	r3, r3, #4
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d004      	beq.n	800c986 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2204      	movs	r2, #4
 800c980:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c982:	2304      	movs	r3, #4
 800c984:	e0b1      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c98a:	f003 0301 	and.w	r3, r3, #1
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d004      	beq.n	800c99c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2201      	movs	r2, #1
 800c996:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c998:	2301      	movs	r3, #1
 800c99a:	e0a6      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	22c5      	movs	r2, #197	; 0xc5
 800c9a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c9a2:	68f8      	ldr	r0, [r7, #12]
 800c9a4:	f7ff fd12 	bl	800c3cc <SDIO_GetCommandResponse>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	461a      	mov	r2, r3
 800c9ac:	7afb      	ldrb	r3, [r7, #11]
 800c9ae:	4293      	cmp	r3, r2
 800c9b0:	d001      	beq.n	800c9b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e099      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f7ff fd14 	bl	800c3e6 <SDIO_GetResponse>
 800c9be:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	4b4e      	ldr	r3, [pc, #312]	; (800cafc <SDMMC_GetCmdResp1+0x1d8>)
 800c9c4:	4013      	ands	r3, r2
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	e08d      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c9ce:	697b      	ldr	r3, [r7, #20]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	da02      	bge.n	800c9da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c9d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9d8:	e087      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c9e4:	2340      	movs	r3, #64	; 0x40
 800c9e6:	e080      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d001      	beq.n	800c9f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c9f2:	2380      	movs	r3, #128	; 0x80
 800c9f4:	e079      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d002      	beq.n	800ca06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ca00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca04:	e071      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ca10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca14:	e069      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca24:	e061      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca34:	e059      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d002      	beq.n	800ca46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca44:	e051      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca54:	e049      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ca60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca64:	e041      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d002      	beq.n	800ca76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ca70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca74:	e039      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ca80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ca84:	e031      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d002      	beq.n	800ca96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ca90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ca94:	e029      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800caa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800caa4:	e021      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cab0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cab4:	e019      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cac0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cac4:	e011      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cad0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cad4:	e009      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f003 0308 	and.w	r3, r3, #8
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cae0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800cae4:	e001      	b.n	800caea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800caea:	4618      	mov	r0, r3
 800caec:	3720      	adds	r7, #32
 800caee:	46bd      	mov	sp, r7
 800caf0:	bd80      	pop	{r7, pc}
 800caf2:	bf00      	nop
 800caf4:	20000198 	.word	0x20000198
 800caf8:	10624dd3 	.word	0x10624dd3
 800cafc:	fdffe008 	.word	0xfdffe008

0800cb00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb08:	4b1f      	ldr	r3, [pc, #124]	; (800cb88 <SDMMC_GetCmdResp2+0x88>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a1f      	ldr	r2, [pc, #124]	; (800cb8c <SDMMC_GetCmdResp2+0x8c>)
 800cb0e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb12:	0a5b      	lsrs	r3, r3, #9
 800cb14:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb18:	fb02 f303 	mul.w	r3, r2, r3
 800cb1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	1e5a      	subs	r2, r3, #1
 800cb22:	60fa      	str	r2, [r7, #12]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d102      	bne.n	800cb2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb2c:	e026      	b.n	800cb7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d0ef      	beq.n	800cb1e <SDMMC_GetCmdResp2+0x1e>
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1ea      	bne.n	800cb1e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4c:	f003 0304 	and.w	r3, r3, #4
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d004      	beq.n	800cb5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2204      	movs	r2, #4
 800cb58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb5a:	2304      	movs	r3, #4
 800cb5c:	e00e      	b.n	800cb7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb62:	f003 0301 	and.w	r3, r3, #1
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d004      	beq.n	800cb74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e003      	b.n	800cb7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	22c5      	movs	r2, #197	; 0xc5
 800cb78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cb7a:	2300      	movs	r3, #0
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3714      	adds	r7, #20
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr
 800cb88:	20000198 	.word	0x20000198
 800cb8c:	10624dd3 	.word	0x10624dd3

0800cb90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b085      	sub	sp, #20
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb98:	4b1a      	ldr	r3, [pc, #104]	; (800cc04 <SDMMC_GetCmdResp3+0x74>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a1a      	ldr	r2, [pc, #104]	; (800cc08 <SDMMC_GetCmdResp3+0x78>)
 800cb9e:	fba2 2303 	umull	r2, r3, r2, r3
 800cba2:	0a5b      	lsrs	r3, r3, #9
 800cba4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cba8:	fb02 f303 	mul.w	r3, r2, r3
 800cbac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	1e5a      	subs	r2, r3, #1
 800cbb2:	60fa      	str	r2, [r7, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d102      	bne.n	800cbbe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbbc:	e01b      	b.n	800cbf6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d0ef      	beq.n	800cbae <SDMMC_GetCmdResp3+0x1e>
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1ea      	bne.n	800cbae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbdc:	f003 0304 	and.w	r3, r3, #4
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d004      	beq.n	800cbee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2204      	movs	r2, #4
 800cbe8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbea:	2304      	movs	r3, #4
 800cbec:	e003      	b.n	800cbf6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	22c5      	movs	r2, #197	; 0xc5
 800cbf2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cbf4:	2300      	movs	r3, #0
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr
 800cc02:	bf00      	nop
 800cc04:	20000198 	.word	0x20000198
 800cc08:	10624dd3 	.word	0x10624dd3

0800cc0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cc0c:	b580      	push	{r7, lr}
 800cc0e:	b088      	sub	sp, #32
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	60f8      	str	r0, [r7, #12]
 800cc14:	460b      	mov	r3, r1
 800cc16:	607a      	str	r2, [r7, #4]
 800cc18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc1a:	4b35      	ldr	r3, [pc, #212]	; (800ccf0 <SDMMC_GetCmdResp6+0xe4>)
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	4a35      	ldr	r2, [pc, #212]	; (800ccf4 <SDMMC_GetCmdResp6+0xe8>)
 800cc20:	fba2 2303 	umull	r2, r3, r2, r3
 800cc24:	0a5b      	lsrs	r3, r3, #9
 800cc26:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc2a:	fb02 f303 	mul.w	r3, r2, r3
 800cc2e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cc30:	69fb      	ldr	r3, [r7, #28]
 800cc32:	1e5a      	subs	r2, r3, #1
 800cc34:	61fa      	str	r2, [r7, #28]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d102      	bne.n	800cc40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc3e:	e052      	b.n	800cce6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc44:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d0ef      	beq.n	800cc30 <SDMMC_GetCmdResp6+0x24>
 800cc50:	69bb      	ldr	r3, [r7, #24]
 800cc52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d1ea      	bne.n	800cc30 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc5e:	f003 0304 	and.w	r3, r3, #4
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d004      	beq.n	800cc70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	2204      	movs	r2, #4
 800cc6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc6c:	2304      	movs	r3, #4
 800cc6e:	e03a      	b.n	800cce6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc74:	f003 0301 	and.w	r3, r3, #1
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d004      	beq.n	800cc86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	2201      	movs	r2, #1
 800cc80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e02f      	b.n	800cce6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800cc86:	68f8      	ldr	r0, [r7, #12]
 800cc88:	f7ff fba0 	bl	800c3cc <SDIO_GetCommandResponse>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	461a      	mov	r2, r3
 800cc90:	7afb      	ldrb	r3, [r7, #11]
 800cc92:	4293      	cmp	r3, r2
 800cc94:	d001      	beq.n	800cc9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cc96:	2301      	movs	r3, #1
 800cc98:	e025      	b.n	800cce6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	22c5      	movs	r2, #197	; 0xc5
 800cc9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800cca0:	2100      	movs	r1, #0
 800cca2:	68f8      	ldr	r0, [r7, #12]
 800cca4:	f7ff fb9f 	bl	800c3e6 <SDIO_GetResponse>
 800cca8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800ccaa:	697b      	ldr	r3, [r7, #20]
 800ccac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d106      	bne.n	800ccc2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	0c1b      	lsrs	r3, r3, #16
 800ccb8:	b29a      	uxth	r2, r3
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	e011      	b.n	800cce6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ccd0:	e009      	b.n	800cce6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d002      	beq.n	800cce2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ccdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cce0:	e001      	b.n	800cce6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cce6:	4618      	mov	r0, r3
 800cce8:	3720      	adds	r7, #32
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	20000198 	.word	0x20000198
 800ccf4:	10624dd3 	.word	0x10624dd3

0800ccf8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd00:	4b22      	ldr	r3, [pc, #136]	; (800cd8c <SDMMC_GetCmdResp7+0x94>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a22      	ldr	r2, [pc, #136]	; (800cd90 <SDMMC_GetCmdResp7+0x98>)
 800cd06:	fba2 2303 	umull	r2, r3, r2, r3
 800cd0a:	0a5b      	lsrs	r3, r3, #9
 800cd0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd10:	fb02 f303 	mul.w	r3, r2, r3
 800cd14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	1e5a      	subs	r2, r3, #1
 800cd1a:	60fa      	str	r2, [r7, #12]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d102      	bne.n	800cd26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd24:	e02c      	b.n	800cd80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d0ef      	beq.n	800cd16 <SDMMC_GetCmdResp7+0x1e>
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1ea      	bne.n	800cd16 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd44:	f003 0304 	and.w	r3, r3, #4
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d004      	beq.n	800cd56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2204      	movs	r2, #4
 800cd50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd52:	2304      	movs	r3, #4
 800cd54:	e014      	b.n	800cd80 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd5a:	f003 0301 	and.w	r3, r3, #1
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d004      	beq.n	800cd6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2201      	movs	r2, #1
 800cd66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e009      	b.n	800cd80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2240      	movs	r2, #64	; 0x40
 800cd7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cd7e:	2300      	movs	r3, #0
  
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3714      	adds	r7, #20
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr
 800cd8c:	20000198 	.word	0x20000198
 800cd90:	10624dd3 	.word	0x10624dd3

0800cd94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cd94:	b084      	sub	sp, #16
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b084      	sub	sp, #16
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	f107 001c 	add.w	r0, r7, #28
 800cda2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800cda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d122      	bne.n	800cdf2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800cdc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	68db      	ldr	r3, [r3, #12]
 800cdcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cdd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d105      	bne.n	800cde6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	68db      	ldr	r3, [r3, #12]
 800cdde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f001 fb16 	bl	800e418 <USB_CoreReset>
 800cdec:	4603      	mov	r3, r0
 800cdee:	73fb      	strb	r3, [r7, #15]
 800cdf0:	e01a      	b.n	800ce28 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68db      	ldr	r3, [r3, #12]
 800cdf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f001 fb0a 	bl	800e418 <USB_CoreReset>
 800ce04:	4603      	mov	r3, r0
 800ce06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ce08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d106      	bne.n	800ce1c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	639a      	str	r2, [r3, #56]	; 0x38
 800ce1a:	e005      	b.n	800ce28 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ce28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d10b      	bne.n	800ce46 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	689b      	ldr	r3, [r3, #8]
 800ce32:	f043 0206 	orr.w	r2, r3, #6
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	f043 0220 	orr.w	r2, r3, #32
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ce46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ce52:	b004      	add	sp, #16
 800ce54:	4770      	bx	lr
	...

0800ce58 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b087      	sub	sp, #28
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	4613      	mov	r3, r2
 800ce64:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ce66:	79fb      	ldrb	r3, [r7, #7]
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d165      	bne.n	800cf38 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	4a41      	ldr	r2, [pc, #260]	; (800cf74 <USB_SetTurnaroundTime+0x11c>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d906      	bls.n	800ce82 <USB_SetTurnaroundTime+0x2a>
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	4a40      	ldr	r2, [pc, #256]	; (800cf78 <USB_SetTurnaroundTime+0x120>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d202      	bcs.n	800ce82 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ce7c:	230f      	movs	r3, #15
 800ce7e:	617b      	str	r3, [r7, #20]
 800ce80:	e062      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	4a3c      	ldr	r2, [pc, #240]	; (800cf78 <USB_SetTurnaroundTime+0x120>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d306      	bcc.n	800ce98 <USB_SetTurnaroundTime+0x40>
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	4a3b      	ldr	r2, [pc, #236]	; (800cf7c <USB_SetTurnaroundTime+0x124>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d202      	bcs.n	800ce98 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ce92:	230e      	movs	r3, #14
 800ce94:	617b      	str	r3, [r7, #20]
 800ce96:	e057      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	4a38      	ldr	r2, [pc, #224]	; (800cf7c <USB_SetTurnaroundTime+0x124>)
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	d306      	bcc.n	800ceae <USB_SetTurnaroundTime+0x56>
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	4a37      	ldr	r2, [pc, #220]	; (800cf80 <USB_SetTurnaroundTime+0x128>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d202      	bcs.n	800ceae <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800cea8:	230d      	movs	r3, #13
 800ceaa:	617b      	str	r3, [r7, #20]
 800ceac:	e04c      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	4a33      	ldr	r2, [pc, #204]	; (800cf80 <USB_SetTurnaroundTime+0x128>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d306      	bcc.n	800cec4 <USB_SetTurnaroundTime+0x6c>
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	4a32      	ldr	r2, [pc, #200]	; (800cf84 <USB_SetTurnaroundTime+0x12c>)
 800ceba:	4293      	cmp	r3, r2
 800cebc:	d802      	bhi.n	800cec4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800cebe:	230c      	movs	r3, #12
 800cec0:	617b      	str	r3, [r7, #20]
 800cec2:	e041      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	4a2f      	ldr	r2, [pc, #188]	; (800cf84 <USB_SetTurnaroundTime+0x12c>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d906      	bls.n	800ceda <USB_SetTurnaroundTime+0x82>
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	4a2e      	ldr	r2, [pc, #184]	; (800cf88 <USB_SetTurnaroundTime+0x130>)
 800ced0:	4293      	cmp	r3, r2
 800ced2:	d802      	bhi.n	800ceda <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ced4:	230b      	movs	r3, #11
 800ced6:	617b      	str	r3, [r7, #20]
 800ced8:	e036      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	4a2a      	ldr	r2, [pc, #168]	; (800cf88 <USB_SetTurnaroundTime+0x130>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d906      	bls.n	800cef0 <USB_SetTurnaroundTime+0x98>
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	4a29      	ldr	r2, [pc, #164]	; (800cf8c <USB_SetTurnaroundTime+0x134>)
 800cee6:	4293      	cmp	r3, r2
 800cee8:	d802      	bhi.n	800cef0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ceea:	230a      	movs	r3, #10
 800ceec:	617b      	str	r3, [r7, #20]
 800ceee:	e02b      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	4a26      	ldr	r2, [pc, #152]	; (800cf8c <USB_SetTurnaroundTime+0x134>)
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d906      	bls.n	800cf06 <USB_SetTurnaroundTime+0xae>
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	4a25      	ldr	r2, [pc, #148]	; (800cf90 <USB_SetTurnaroundTime+0x138>)
 800cefc:	4293      	cmp	r3, r2
 800cefe:	d202      	bcs.n	800cf06 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800cf00:	2309      	movs	r3, #9
 800cf02:	617b      	str	r3, [r7, #20]
 800cf04:	e020      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	4a21      	ldr	r2, [pc, #132]	; (800cf90 <USB_SetTurnaroundTime+0x138>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d306      	bcc.n	800cf1c <USB_SetTurnaroundTime+0xc4>
 800cf0e:	68bb      	ldr	r3, [r7, #8]
 800cf10:	4a20      	ldr	r2, [pc, #128]	; (800cf94 <USB_SetTurnaroundTime+0x13c>)
 800cf12:	4293      	cmp	r3, r2
 800cf14:	d802      	bhi.n	800cf1c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800cf16:	2308      	movs	r3, #8
 800cf18:	617b      	str	r3, [r7, #20]
 800cf1a:	e015      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4a1d      	ldr	r2, [pc, #116]	; (800cf94 <USB_SetTurnaroundTime+0x13c>)
 800cf20:	4293      	cmp	r3, r2
 800cf22:	d906      	bls.n	800cf32 <USB_SetTurnaroundTime+0xda>
 800cf24:	68bb      	ldr	r3, [r7, #8]
 800cf26:	4a1c      	ldr	r2, [pc, #112]	; (800cf98 <USB_SetTurnaroundTime+0x140>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d202      	bcs.n	800cf32 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800cf2c:	2307      	movs	r3, #7
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	e00a      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800cf32:	2306      	movs	r3, #6
 800cf34:	617b      	str	r3, [r7, #20]
 800cf36:	e007      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d102      	bne.n	800cf44 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800cf3e:	2309      	movs	r3, #9
 800cf40:	617b      	str	r3, [r7, #20]
 800cf42:	e001      	b.n	800cf48 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800cf44:	2309      	movs	r3, #9
 800cf46:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	68da      	ldr	r2, [r3, #12]
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	029b      	lsls	r3, r3, #10
 800cf5c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800cf60:	431a      	orrs	r2, r3
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	371c      	adds	r7, #28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	00d8acbf 	.word	0x00d8acbf
 800cf78:	00e4e1c0 	.word	0x00e4e1c0
 800cf7c:	00f42400 	.word	0x00f42400
 800cf80:	01067380 	.word	0x01067380
 800cf84:	011a499f 	.word	0x011a499f
 800cf88:	01312cff 	.word	0x01312cff
 800cf8c:	014ca43f 	.word	0x014ca43f
 800cf90:	016e3600 	.word	0x016e3600
 800cf94:	01a6ab1f 	.word	0x01a6ab1f
 800cf98:	01e84800 	.word	0x01e84800

0800cf9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf9c:	b480      	push	{r7}
 800cf9e:	b083      	sub	sp, #12
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	f043 0201 	orr.w	r2, r3, #1
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	370c      	adds	r7, #12
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	b083      	sub	sp, #12
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	f023 0201 	bic.w	r2, r3, #1
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	370c      	adds	r7, #12
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfde:	4770      	bx	lr

0800cfe0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cfec:	2300      	movs	r3, #0
 800cfee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68db      	ldr	r3, [r3, #12]
 800cff4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cffc:	78fb      	ldrb	r3, [r7, #3]
 800cffe:	2b01      	cmp	r3, #1
 800d000:	d115      	bne.n	800d02e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d00e:	2001      	movs	r0, #1
 800d010:	f7f7 f958 	bl	80042c4 <HAL_Delay>
      ms++;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	3301      	adds	r3, #1
 800d018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f001 f96c 	bl	800e2f8 <USB_GetMode>
 800d020:	4603      	mov	r3, r0
 800d022:	2b01      	cmp	r3, #1
 800d024:	d01e      	beq.n	800d064 <USB_SetCurrentMode+0x84>
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	2b31      	cmp	r3, #49	; 0x31
 800d02a:	d9f0      	bls.n	800d00e <USB_SetCurrentMode+0x2e>
 800d02c:	e01a      	b.n	800d064 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d02e:	78fb      	ldrb	r3, [r7, #3]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d115      	bne.n	800d060 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	68db      	ldr	r3, [r3, #12]
 800d038:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800d040:	2001      	movs	r0, #1
 800d042:	f7f7 f93f 	bl	80042c4 <HAL_Delay>
      ms++;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	3301      	adds	r3, #1
 800d04a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f001 f953 	bl	800e2f8 <USB_GetMode>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d005      	beq.n	800d064 <USB_SetCurrentMode+0x84>
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b31      	cmp	r3, #49	; 0x31
 800d05c:	d9f0      	bls.n	800d040 <USB_SetCurrentMode+0x60>
 800d05e:	e001      	b.n	800d064 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d060:	2301      	movs	r3, #1
 800d062:	e005      	b.n	800d070 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2b32      	cmp	r3, #50	; 0x32
 800d068:	d101      	bne.n	800d06e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d06a:	2301      	movs	r3, #1
 800d06c:	e000      	b.n	800d070 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d06e:	2300      	movs	r3, #0
}
 800d070:	4618      	mov	r0, r3
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d078:	b084      	sub	sp, #16
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b086      	sub	sp, #24
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d08a:	2300      	movs	r3, #0
 800d08c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d092:	2300      	movs	r3, #0
 800d094:	613b      	str	r3, [r7, #16]
 800d096:	e009      	b.n	800d0ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d098:	687a      	ldr	r2, [r7, #4]
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	3340      	adds	r3, #64	; 0x40
 800d09e:	009b      	lsls	r3, r3, #2
 800d0a0:	4413      	add	r3, r2
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	613b      	str	r3, [r7, #16]
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	2b0e      	cmp	r3, #14
 800d0b0:	d9f2      	bls.n	800d098 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d0b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d11c      	bne.n	800d0f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0c6:	f043 0302 	orr.w	r3, r3, #2
 800d0ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	601a      	str	r2, [r3, #0]
 800d0f0:	e005      	b.n	800d0fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d104:	461a      	mov	r2, r3
 800d106:	2300      	movs	r3, #0
 800d108:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d110:	4619      	mov	r1, r3
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d118:	461a      	mov	r2, r3
 800d11a:	680b      	ldr	r3, [r1, #0]
 800d11c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d120:	2b01      	cmp	r3, #1
 800d122:	d10c      	bne.n	800d13e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d126:	2b00      	cmp	r3, #0
 800d128:	d104      	bne.n	800d134 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d12a:	2100      	movs	r1, #0
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 f945 	bl	800d3bc <USB_SetDevSpeed>
 800d132:	e008      	b.n	800d146 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d134:	2101      	movs	r1, #1
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f000 f940 	bl	800d3bc <USB_SetDevSpeed>
 800d13c:	e003      	b.n	800d146 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d13e:	2103      	movs	r1, #3
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f000 f93b 	bl	800d3bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d146:	2110      	movs	r1, #16
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 f8f3 	bl	800d334 <USB_FlushTxFifo>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d001      	beq.n	800d158 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 f90f 	bl	800d37c <USB_FlushRxFifo>
 800d15e:	4603      	mov	r3, r0
 800d160:	2b00      	cmp	r3, #0
 800d162:	d001      	beq.n	800d168 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d164:	2301      	movs	r3, #1
 800d166:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d16e:	461a      	mov	r2, r3
 800d170:	2300      	movs	r3, #0
 800d172:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d17a:	461a      	mov	r2, r3
 800d17c:	2300      	movs	r3, #0
 800d17e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d186:	461a      	mov	r2, r3
 800d188:	2300      	movs	r3, #0
 800d18a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d18c:	2300      	movs	r3, #0
 800d18e:	613b      	str	r3, [r7, #16]
 800d190:	e043      	b.n	800d21a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	015a      	lsls	r2, r3, #5
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	4413      	add	r3, r2
 800d19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1a8:	d118      	bne.n	800d1dc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d1aa:	693b      	ldr	r3, [r7, #16]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d10a      	bne.n	800d1c6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	015a      	lsls	r2, r3, #5
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1bc:	461a      	mov	r2, r3
 800d1be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d1c2:	6013      	str	r3, [r2, #0]
 800d1c4:	e013      	b.n	800d1ee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d1c6:	693b      	ldr	r3, [r7, #16]
 800d1c8:	015a      	lsls	r2, r3, #5
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d2:	461a      	mov	r2, r3
 800d1d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d1d8:	6013      	str	r3, [r2, #0]
 800d1da:	e008      	b.n	800d1ee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	015a      	lsls	r2, r3, #5
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1e8:	461a      	mov	r2, r3
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d1ee:	693b      	ldr	r3, [r7, #16]
 800d1f0:	015a      	lsls	r2, r3, #5
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	4413      	add	r3, r2
 800d1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	015a      	lsls	r2, r3, #5
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	4413      	add	r3, r2
 800d208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d20c:	461a      	mov	r2, r3
 800d20e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d212:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	3301      	adds	r3, #1
 800d218:	613b      	str	r3, [r7, #16]
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	693a      	ldr	r2, [r7, #16]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d3b7      	bcc.n	800d192 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d222:	2300      	movs	r3, #0
 800d224:	613b      	str	r3, [r7, #16]
 800d226:	e043      	b.n	800d2b0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	015a      	lsls	r2, r3, #5
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	4413      	add	r3, r2
 800d230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d23a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d23e:	d118      	bne.n	800d272 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10a      	bne.n	800d25c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	015a      	lsls	r2, r3, #5
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	4413      	add	r3, r2
 800d24e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d252:	461a      	mov	r2, r3
 800d254:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d258:	6013      	str	r3, [r2, #0]
 800d25a:	e013      	b.n	800d284 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	015a      	lsls	r2, r3, #5
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	4413      	add	r3, r2
 800d264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d268:	461a      	mov	r2, r3
 800d26a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d26e:	6013      	str	r3, [r2, #0]
 800d270:	e008      	b.n	800d284 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	015a      	lsls	r2, r3, #5
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	4413      	add	r3, r2
 800d27a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d27e:	461a      	mov	r2, r3
 800d280:	2300      	movs	r3, #0
 800d282:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	015a      	lsls	r2, r3, #5
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	4413      	add	r3, r2
 800d28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d290:	461a      	mov	r2, r3
 800d292:	2300      	movs	r3, #0
 800d294:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	015a      	lsls	r2, r3, #5
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	4413      	add	r3, r2
 800d29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2a2:	461a      	mov	r2, r3
 800d2a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d2a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	613b      	str	r3, [r7, #16]
 800d2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b2:	693a      	ldr	r2, [r7, #16]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d3b7      	bcc.n	800d228 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2be:	691b      	ldr	r3, [r3, #16]
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d2d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d105      	bne.n	800d2ec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	f043 0210 	orr.w	r2, r3, #16
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	699a      	ldr	r2, [r3, #24]
 800d2f0:	4b0f      	ldr	r3, [pc, #60]	; (800d330 <USB_DevInit+0x2b8>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	687a      	ldr	r2, [r7, #4]
 800d2f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d2f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d005      	beq.n	800d30a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	699b      	ldr	r3, [r3, #24]
 800d302:	f043 0208 	orr.w	r2, r3, #8
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d30c:	2b01      	cmp	r3, #1
 800d30e:	d107      	bne.n	800d320 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	699b      	ldr	r3, [r3, #24]
 800d314:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d318:	f043 0304 	orr.w	r3, r3, #4
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d320:	7dfb      	ldrb	r3, [r7, #23]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3718      	adds	r7, #24
 800d326:	46bd      	mov	sp, r7
 800d328:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d32c:	b004      	add	sp, #16
 800d32e:	4770      	bx	lr
 800d330:	803c3800 	.word	0x803c3800

0800d334 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d334:	b480      	push	{r7}
 800d336:	b085      	sub	sp, #20
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
 800d33c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d33e:	2300      	movs	r3, #0
 800d340:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	019b      	lsls	r3, r3, #6
 800d346:	f043 0220 	orr.w	r2, r3, #32
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3301      	adds	r3, #1
 800d352:	60fb      	str	r3, [r7, #12]
 800d354:	4a08      	ldr	r2, [pc, #32]	; (800d378 <USB_FlushTxFifo+0x44>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d901      	bls.n	800d35e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e006      	b.n	800d36c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	691b      	ldr	r3, [r3, #16]
 800d362:	f003 0320 	and.w	r3, r3, #32
 800d366:	2b20      	cmp	r3, #32
 800d368:	d0f1      	beq.n	800d34e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800d36a:	2300      	movs	r3, #0
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3714      	adds	r7, #20
 800d370:	46bd      	mov	sp, r7
 800d372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d376:	4770      	bx	lr
 800d378:	00030d40 	.word	0x00030d40

0800d37c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b085      	sub	sp, #20
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d384:	2300      	movs	r3, #0
 800d386:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2210      	movs	r2, #16
 800d38c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	3301      	adds	r3, #1
 800d392:	60fb      	str	r3, [r7, #12]
 800d394:	4a08      	ldr	r2, [pc, #32]	; (800d3b8 <USB_FlushRxFifo+0x3c>)
 800d396:	4293      	cmp	r3, r2
 800d398:	d901      	bls.n	800d39e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800d39a:	2303      	movs	r3, #3
 800d39c:	e006      	b.n	800d3ac <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	691b      	ldr	r3, [r3, #16]
 800d3a2:	f003 0310 	and.w	r3, r3, #16
 800d3a6:	2b10      	cmp	r3, #16
 800d3a8:	d0f1      	beq.n	800d38e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800d3aa:	2300      	movs	r3, #0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3714      	adds	r7, #20
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr
 800d3b8:	00030d40 	.word	0x00030d40

0800d3bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d3bc:	b480      	push	{r7}
 800d3be:	b085      	sub	sp, #20
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	68f9      	ldr	r1, [r7, #12]
 800d3d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3714      	adds	r7, #20
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ec:	4770      	bx	lr

0800d3ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d3ee:	b480      	push	{r7}
 800d3f0:	b087      	sub	sp, #28
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	f003 0306 	and.w	r3, r3, #6
 800d406:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d102      	bne.n	800d414 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d40e:	2300      	movs	r3, #0
 800d410:	75fb      	strb	r3, [r7, #23]
 800d412:	e00a      	b.n	800d42a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	2b02      	cmp	r3, #2
 800d418:	d002      	beq.n	800d420 <USB_GetDevSpeed+0x32>
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2b06      	cmp	r3, #6
 800d41e:	d102      	bne.n	800d426 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d420:	2302      	movs	r3, #2
 800d422:	75fb      	strb	r3, [r7, #23]
 800d424:	e001      	b.n	800d42a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d426:	230f      	movs	r3, #15
 800d428:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	371c      	adds	r7, #28
 800d430:	46bd      	mov	sp, r7
 800d432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d436:	4770      	bx	lr

0800d438 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d438:	b480      	push	{r7}
 800d43a:	b085      	sub	sp, #20
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
 800d440:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	785b      	ldrb	r3, [r3, #1]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d13a      	bne.n	800d4ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d45a:	69da      	ldr	r2, [r3, #28]
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	781b      	ldrb	r3, [r3, #0]
 800d460:	f003 030f 	and.w	r3, r3, #15
 800d464:	2101      	movs	r1, #1
 800d466:	fa01 f303 	lsl.w	r3, r1, r3
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	68f9      	ldr	r1, [r7, #12]
 800d46e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d472:	4313      	orrs	r3, r2
 800d474:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	015a      	lsls	r2, r3, #5
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	4413      	add	r3, r2
 800d47e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d155      	bne.n	800d538 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d48c:	68bb      	ldr	r3, [r7, #8]
 800d48e:	015a      	lsls	r2, r3, #5
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4413      	add	r3, r2
 800d494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	78db      	ldrb	r3, [r3, #3]
 800d4a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	059b      	lsls	r3, r3, #22
 800d4ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d4b0:	4313      	orrs	r3, r2
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	0151      	lsls	r1, r2, #5
 800d4b6:	68fa      	ldr	r2, [r7, #12]
 800d4b8:	440a      	add	r2, r1
 800d4ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4c6:	6013      	str	r3, [r2, #0]
 800d4c8:	e036      	b.n	800d538 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d4d0:	69da      	ldr	r2, [r3, #28]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	f003 030f 	and.w	r3, r3, #15
 800d4da:	2101      	movs	r1, #1
 800d4dc:	fa01 f303 	lsl.w	r3, r1, r3
 800d4e0:	041b      	lsls	r3, r3, #16
 800d4e2:	68f9      	ldr	r1, [r7, #12]
 800d4e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d4ec:	68bb      	ldr	r3, [r7, #8]
 800d4ee:	015a      	lsls	r2, r3, #5
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d11a      	bne.n	800d538 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	015a      	lsls	r2, r3, #5
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	4413      	add	r3, r2
 800d50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d50e:	681a      	ldr	r2, [r3, #0]
 800d510:	683b      	ldr	r3, [r7, #0]
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	78db      	ldrb	r3, [r3, #3]
 800d51c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d51e:	430b      	orrs	r3, r1
 800d520:	4313      	orrs	r3, r2
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	0151      	lsls	r1, r2, #5
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	440a      	add	r2, r1
 800d52a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d52e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d536:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3714      	adds	r7, #20
 800d53e:	46bd      	mov	sp, r7
 800d540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d544:	4770      	bx	lr
	...

0800d548 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d548:	b480      	push	{r7}
 800d54a:	b085      	sub	sp, #20
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	785b      	ldrb	r3, [r3, #1]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d161      	bne.n	800d628 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d564:	68bb      	ldr	r3, [r7, #8]
 800d566:	015a      	lsls	r2, r3, #5
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	4413      	add	r3, r2
 800d56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d57a:	d11f      	bne.n	800d5bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d57c:	68bb      	ldr	r3, [r7, #8]
 800d57e:	015a      	lsls	r2, r3, #5
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	4413      	add	r3, r2
 800d584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	68ba      	ldr	r2, [r7, #8]
 800d58c:	0151      	lsls	r1, r2, #5
 800d58e:	68fa      	ldr	r2, [r7, #12]
 800d590:	440a      	add	r2, r1
 800d592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d59a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d59c:	68bb      	ldr	r3, [r7, #8]
 800d59e:	015a      	lsls	r2, r3, #5
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	0151      	lsls	r1, r2, #5
 800d5ae:	68fa      	ldr	r2, [r7, #12]
 800d5b0:	440a      	add	r2, r1
 800d5b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d5b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d5ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	f003 030f 	and.w	r3, r3, #15
 800d5cc:	2101      	movs	r1, #1
 800d5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	43db      	mvns	r3, r3
 800d5d6:	68f9      	ldr	r1, [r7, #12]
 800d5d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5dc:	4013      	ands	r3, r2
 800d5de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d5e6:	69da      	ldr	r2, [r3, #28]
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	f003 030f 	and.w	r3, r3, #15
 800d5f0:	2101      	movs	r1, #1
 800d5f2:	fa01 f303 	lsl.w	r3, r1, r3
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	43db      	mvns	r3, r3
 800d5fa:	68f9      	ldr	r1, [r7, #12]
 800d5fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d600:	4013      	ands	r3, r2
 800d602:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	015a      	lsls	r2, r3, #5
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	4413      	add	r3, r2
 800d60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d610:	681a      	ldr	r2, [r3, #0]
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	0159      	lsls	r1, r3, #5
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	440b      	add	r3, r1
 800d61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d61e:	4619      	mov	r1, r3
 800d620:	4b35      	ldr	r3, [pc, #212]	; (800d6f8 <USB_DeactivateEndpoint+0x1b0>)
 800d622:	4013      	ands	r3, r2
 800d624:	600b      	str	r3, [r1, #0]
 800d626:	e060      	b.n	800d6ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d628:	68bb      	ldr	r3, [r7, #8]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d63a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d63e:	d11f      	bne.n	800d680 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	015a      	lsls	r2, r3, #5
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	4413      	add	r3, r2
 800d648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68ba      	ldr	r2, [r7, #8]
 800d650:	0151      	lsls	r1, r2, #5
 800d652:	68fa      	ldr	r2, [r7, #12]
 800d654:	440a      	add	r2, r1
 800d656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d65a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d65e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	015a      	lsls	r2, r3, #5
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	4413      	add	r3, r2
 800d668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	68ba      	ldr	r2, [r7, #8]
 800d670:	0151      	lsls	r1, r2, #5
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	440a      	add	r2, r1
 800d676:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d67a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d67e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d686:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	f003 030f 	and.w	r3, r3, #15
 800d690:	2101      	movs	r1, #1
 800d692:	fa01 f303 	lsl.w	r3, r1, r3
 800d696:	041b      	lsls	r3, r3, #16
 800d698:	43db      	mvns	r3, r3
 800d69a:	68f9      	ldr	r1, [r7, #12]
 800d69c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6a0:	4013      	ands	r3, r2
 800d6a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d6aa:	69da      	ldr	r2, [r3, #28]
 800d6ac:	683b      	ldr	r3, [r7, #0]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	f003 030f 	and.w	r3, r3, #15
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	fa01 f303 	lsl.w	r3, r1, r3
 800d6ba:	041b      	lsls	r3, r3, #16
 800d6bc:	43db      	mvns	r3, r3
 800d6be:	68f9      	ldr	r1, [r7, #12]
 800d6c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	015a      	lsls	r2, r3, #5
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	4413      	add	r3, r2
 800d6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6d4:	681a      	ldr	r2, [r3, #0]
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	0159      	lsls	r1, r3, #5
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	440b      	add	r3, r1
 800d6de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	4b05      	ldr	r3, [pc, #20]	; (800d6fc <USB_DeactivateEndpoint+0x1b4>)
 800d6e6:	4013      	ands	r3, r2
 800d6e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d6ea:	2300      	movs	r3, #0
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3714      	adds	r7, #20
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f6:	4770      	bx	lr
 800d6f8:	ec337800 	.word	0xec337800
 800d6fc:	eff37800 	.word	0xeff37800

0800d700 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b08a      	sub	sp, #40	; 0x28
 800d704:	af02      	add	r7, sp, #8
 800d706:	60f8      	str	r0, [r7, #12]
 800d708:	60b9      	str	r1, [r7, #8]
 800d70a:	4613      	mov	r3, r2
 800d70c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	785b      	ldrb	r3, [r3, #1]
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	f040 815c 	bne.w	800d9da <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	695b      	ldr	r3, [r3, #20]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d132      	bne.n	800d790 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	015a      	lsls	r2, r3, #5
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	4413      	add	r3, r2
 800d732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d736:	691b      	ldr	r3, [r3, #16]
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	0151      	lsls	r1, r2, #5
 800d73c:	69fa      	ldr	r2, [r7, #28]
 800d73e:	440a      	add	r2, r1
 800d740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d744:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d748:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d74c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	015a      	lsls	r2, r3, #5
 800d752:	69fb      	ldr	r3, [r7, #28]
 800d754:	4413      	add	r3, r2
 800d756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d75a:	691b      	ldr	r3, [r3, #16]
 800d75c:	69ba      	ldr	r2, [r7, #24]
 800d75e:	0151      	lsls	r1, r2, #5
 800d760:	69fa      	ldr	r2, [r7, #28]
 800d762:	440a      	add	r2, r1
 800d764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d76c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	015a      	lsls	r2, r3, #5
 800d772:	69fb      	ldr	r3, [r7, #28]
 800d774:	4413      	add	r3, r2
 800d776:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d77a:	691b      	ldr	r3, [r3, #16]
 800d77c:	69ba      	ldr	r2, [r7, #24]
 800d77e:	0151      	lsls	r1, r2, #5
 800d780:	69fa      	ldr	r2, [r7, #28]
 800d782:	440a      	add	r2, r1
 800d784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d788:	0cdb      	lsrs	r3, r3, #19
 800d78a:	04db      	lsls	r3, r3, #19
 800d78c:	6113      	str	r3, [r2, #16]
 800d78e:	e074      	b.n	800d87a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	015a      	lsls	r2, r3, #5
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	4413      	add	r3, r2
 800d798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d79c:	691b      	ldr	r3, [r3, #16]
 800d79e:	69ba      	ldr	r2, [r7, #24]
 800d7a0:	0151      	lsls	r1, r2, #5
 800d7a2:	69fa      	ldr	r2, [r7, #28]
 800d7a4:	440a      	add	r2, r1
 800d7a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7aa:	0cdb      	lsrs	r3, r3, #19
 800d7ac:	04db      	lsls	r3, r3, #19
 800d7ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d7b0:	69bb      	ldr	r3, [r7, #24]
 800d7b2:	015a      	lsls	r2, r3, #5
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7bc:	691b      	ldr	r3, [r3, #16]
 800d7be:	69ba      	ldr	r2, [r7, #24]
 800d7c0:	0151      	lsls	r1, r2, #5
 800d7c2:	69fa      	ldr	r2, [r7, #28]
 800d7c4:	440a      	add	r2, r1
 800d7c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d7ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d7d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d7d4:	69bb      	ldr	r3, [r7, #24]
 800d7d6:	015a      	lsls	r2, r3, #5
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	4413      	add	r3, r2
 800d7dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d7e2:	68bb      	ldr	r3, [r7, #8]
 800d7e4:	6959      	ldr	r1, [r3, #20]
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	440b      	add	r3, r1
 800d7ec:	1e59      	subs	r1, r3, #1
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	689b      	ldr	r3, [r3, #8]
 800d7f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800d7f6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d7f8:	4b9d      	ldr	r3, [pc, #628]	; (800da70 <USB_EPStartXfer+0x370>)
 800d7fa:	400b      	ands	r3, r1
 800d7fc:	69b9      	ldr	r1, [r7, #24]
 800d7fe:	0148      	lsls	r0, r1, #5
 800d800:	69f9      	ldr	r1, [r7, #28]
 800d802:	4401      	add	r1, r0
 800d804:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d808:	4313      	orrs	r3, r2
 800d80a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d80c:	69bb      	ldr	r3, [r7, #24]
 800d80e:	015a      	lsls	r2, r3, #5
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	4413      	add	r3, r2
 800d814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d818:	691a      	ldr	r2, [r3, #16]
 800d81a:	68bb      	ldr	r3, [r7, #8]
 800d81c:	695b      	ldr	r3, [r3, #20]
 800d81e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d822:	69b9      	ldr	r1, [r7, #24]
 800d824:	0148      	lsls	r0, r1, #5
 800d826:	69f9      	ldr	r1, [r7, #28]
 800d828:	4401      	add	r1, r0
 800d82a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d82e:	4313      	orrs	r3, r2
 800d830:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	78db      	ldrb	r3, [r3, #3]
 800d836:	2b01      	cmp	r3, #1
 800d838:	d11f      	bne.n	800d87a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	015a      	lsls	r2, r3, #5
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	4413      	add	r3, r2
 800d842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	69ba      	ldr	r2, [r7, #24]
 800d84a:	0151      	lsls	r1, r2, #5
 800d84c:	69fa      	ldr	r2, [r7, #28]
 800d84e:	440a      	add	r2, r1
 800d850:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d854:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d858:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d85a:	69bb      	ldr	r3, [r7, #24]
 800d85c:	015a      	lsls	r2, r3, #5
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	4413      	add	r3, r2
 800d862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	69ba      	ldr	r2, [r7, #24]
 800d86a:	0151      	lsls	r1, r2, #5
 800d86c:	69fa      	ldr	r2, [r7, #28]
 800d86e:	440a      	add	r2, r1
 800d870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d874:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d878:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d87a:	79fb      	ldrb	r3, [r7, #7]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d14b      	bne.n	800d918 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	691b      	ldr	r3, [r3, #16]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d009      	beq.n	800d89c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	015a      	lsls	r2, r3, #5
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	4413      	add	r3, r2
 800d890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d894:	461a      	mov	r2, r3
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	691b      	ldr	r3, [r3, #16]
 800d89a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	78db      	ldrb	r3, [r3, #3]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d128      	bne.n	800d8f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d8aa:	689b      	ldr	r3, [r3, #8]
 800d8ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d110      	bne.n	800d8d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	015a      	lsls	r2, r3, #5
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	4413      	add	r3, r2
 800d8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	69ba      	ldr	r2, [r7, #24]
 800d8c4:	0151      	lsls	r1, r2, #5
 800d8c6:	69fa      	ldr	r2, [r7, #28]
 800d8c8:	440a      	add	r2, r1
 800d8ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d8d2:	6013      	str	r3, [r2, #0]
 800d8d4:	e00f      	b.n	800d8f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	015a      	lsls	r2, r3, #5
 800d8da:	69fb      	ldr	r3, [r7, #28]
 800d8dc:	4413      	add	r3, r2
 800d8de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	69ba      	ldr	r2, [r7, #24]
 800d8e6:	0151      	lsls	r1, r2, #5
 800d8e8:	69fa      	ldr	r2, [r7, #28]
 800d8ea:	440a      	add	r2, r1
 800d8ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8f6:	69bb      	ldr	r3, [r7, #24]
 800d8f8:	015a      	lsls	r2, r3, #5
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	69ba      	ldr	r2, [r7, #24]
 800d906:	0151      	lsls	r1, r2, #5
 800d908:	69fa      	ldr	r2, [r7, #28]
 800d90a:	440a      	add	r2, r1
 800d90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d914:	6013      	str	r3, [r2, #0]
 800d916:	e12f      	b.n	800db78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d918:	69bb      	ldr	r3, [r7, #24]
 800d91a:	015a      	lsls	r2, r3, #5
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	4413      	add	r3, r2
 800d920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	69ba      	ldr	r2, [r7, #24]
 800d928:	0151      	lsls	r1, r2, #5
 800d92a:	69fa      	ldr	r2, [r7, #28]
 800d92c:	440a      	add	r2, r1
 800d92e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d932:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d936:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	78db      	ldrb	r3, [r3, #3]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d015      	beq.n	800d96c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	695b      	ldr	r3, [r3, #20]
 800d944:	2b00      	cmp	r3, #0
 800d946:	f000 8117 	beq.w	800db78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d94a:	69fb      	ldr	r3, [r7, #28]
 800d94c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	f003 030f 	and.w	r3, r3, #15
 800d95a:	2101      	movs	r1, #1
 800d95c:	fa01 f303 	lsl.w	r3, r1, r3
 800d960:	69f9      	ldr	r1, [r7, #28]
 800d962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d966:	4313      	orrs	r3, r2
 800d968:	634b      	str	r3, [r1, #52]	; 0x34
 800d96a:	e105      	b.n	800db78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d972:	689b      	ldr	r3, [r3, #8]
 800d974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d110      	bne.n	800d99e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	015a      	lsls	r2, r3, #5
 800d980:	69fb      	ldr	r3, [r7, #28]
 800d982:	4413      	add	r3, r2
 800d984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	69ba      	ldr	r2, [r7, #24]
 800d98c:	0151      	lsls	r1, r2, #5
 800d98e:	69fa      	ldr	r2, [r7, #28]
 800d990:	440a      	add	r2, r1
 800d992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d996:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d99a:	6013      	str	r3, [r2, #0]
 800d99c:	e00f      	b.n	800d9be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	015a      	lsls	r2, r3, #5
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	69ba      	ldr	r2, [r7, #24]
 800d9ae:	0151      	lsls	r1, r2, #5
 800d9b0:	69fa      	ldr	r2, [r7, #28]
 800d9b2:	440a      	add	r2, r1
 800d9b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d9b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d9bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d9be:	68bb      	ldr	r3, [r7, #8]
 800d9c0:	68d9      	ldr	r1, [r3, #12]
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	781a      	ldrb	r2, [r3, #0]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	b298      	uxth	r0, r3
 800d9cc:	79fb      	ldrb	r3, [r7, #7]
 800d9ce:	9300      	str	r3, [sp, #0]
 800d9d0:	4603      	mov	r3, r0
 800d9d2:	68f8      	ldr	r0, [r7, #12]
 800d9d4:	f000 fa2b 	bl	800de2e <USB_WritePacket>
 800d9d8:	e0ce      	b.n	800db78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d9da:	69bb      	ldr	r3, [r7, #24]
 800d9dc:	015a      	lsls	r2, r3, #5
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d9e6:	691b      	ldr	r3, [r3, #16]
 800d9e8:	69ba      	ldr	r2, [r7, #24]
 800d9ea:	0151      	lsls	r1, r2, #5
 800d9ec:	69fa      	ldr	r2, [r7, #28]
 800d9ee:	440a      	add	r2, r1
 800d9f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d9f4:	0cdb      	lsrs	r3, r3, #19
 800d9f6:	04db      	lsls	r3, r3, #19
 800d9f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	015a      	lsls	r2, r3, #5
 800d9fe:	69fb      	ldr	r3, [r7, #28]
 800da00:	4413      	add	r3, r2
 800da02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da06:	691b      	ldr	r3, [r3, #16]
 800da08:	69ba      	ldr	r2, [r7, #24]
 800da0a:	0151      	lsls	r1, r2, #5
 800da0c:	69fa      	ldr	r2, [r7, #28]
 800da0e:	440a      	add	r2, r1
 800da10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800da18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800da1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	695b      	ldr	r3, [r3, #20]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d126      	bne.n	800da74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800da26:	69bb      	ldr	r3, [r7, #24]
 800da28:	015a      	lsls	r2, r3, #5
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	4413      	add	r3, r2
 800da2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da32:	691a      	ldr	r2, [r3, #16]
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	689b      	ldr	r3, [r3, #8]
 800da38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da3c:	69b9      	ldr	r1, [r7, #24]
 800da3e:	0148      	lsls	r0, r1, #5
 800da40:	69f9      	ldr	r1, [r7, #28]
 800da42:	4401      	add	r1, r0
 800da44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800da48:	4313      	orrs	r3, r2
 800da4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	015a      	lsls	r2, r3, #5
 800da50:	69fb      	ldr	r3, [r7, #28]
 800da52:	4413      	add	r3, r2
 800da54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da58:	691b      	ldr	r3, [r3, #16]
 800da5a:	69ba      	ldr	r2, [r7, #24]
 800da5c:	0151      	lsls	r1, r2, #5
 800da5e:	69fa      	ldr	r2, [r7, #28]
 800da60:	440a      	add	r2, r1
 800da62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800da66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800da6a:	6113      	str	r3, [r2, #16]
 800da6c:	e036      	b.n	800dadc <USB_EPStartXfer+0x3dc>
 800da6e:	bf00      	nop
 800da70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	695a      	ldr	r2, [r3, #20]
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	4413      	add	r3, r2
 800da7e:	1e5a      	subs	r2, r3, #1
 800da80:	68bb      	ldr	r3, [r7, #8]
 800da82:	689b      	ldr	r3, [r3, #8]
 800da84:	fbb2 f3f3 	udiv	r3, r2, r3
 800da88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800da8a:	69bb      	ldr	r3, [r7, #24]
 800da8c:	015a      	lsls	r2, r3, #5
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	4413      	add	r3, r2
 800da92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800da96:	691a      	ldr	r2, [r3, #16]
 800da98:	8afb      	ldrh	r3, [r7, #22]
 800da9a:	04d9      	lsls	r1, r3, #19
 800da9c:	4b39      	ldr	r3, [pc, #228]	; (800db84 <USB_EPStartXfer+0x484>)
 800da9e:	400b      	ands	r3, r1
 800daa0:	69b9      	ldr	r1, [r7, #24]
 800daa2:	0148      	lsls	r0, r1, #5
 800daa4:	69f9      	ldr	r1, [r7, #28]
 800daa6:	4401      	add	r1, r0
 800daa8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800daac:	4313      	orrs	r3, r2
 800daae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	015a      	lsls	r2, r3, #5
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	4413      	add	r3, r2
 800dab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dabc:	691a      	ldr	r2, [r3, #16]
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	689b      	ldr	r3, [r3, #8]
 800dac2:	8af9      	ldrh	r1, [r7, #22]
 800dac4:	fb01 f303 	mul.w	r3, r1, r3
 800dac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dacc:	69b9      	ldr	r1, [r7, #24]
 800dace:	0148      	lsls	r0, r1, #5
 800dad0:	69f9      	ldr	r1, [r7, #28]
 800dad2:	4401      	add	r1, r0
 800dad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800dad8:	4313      	orrs	r3, r2
 800dada:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dadc:	79fb      	ldrb	r3, [r7, #7]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d10d      	bne.n	800dafe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d009      	beq.n	800dafe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	68d9      	ldr	r1, [r3, #12]
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	015a      	lsls	r2, r3, #5
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	4413      	add	r3, r2
 800daf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dafa:	460a      	mov	r2, r1
 800dafc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800dafe:	68bb      	ldr	r3, [r7, #8]
 800db00:	78db      	ldrb	r3, [r3, #3]
 800db02:	2b01      	cmp	r3, #1
 800db04:	d128      	bne.n	800db58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db06:	69fb      	ldr	r3, [r7, #28]
 800db08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db0c:	689b      	ldr	r3, [r3, #8]
 800db0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db12:	2b00      	cmp	r3, #0
 800db14:	d110      	bne.n	800db38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800db16:	69bb      	ldr	r3, [r7, #24]
 800db18:	015a      	lsls	r2, r3, #5
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	4413      	add	r3, r2
 800db1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	69ba      	ldr	r2, [r7, #24]
 800db26:	0151      	lsls	r1, r2, #5
 800db28:	69fa      	ldr	r2, [r7, #28]
 800db2a:	440a      	add	r2, r1
 800db2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800db34:	6013      	str	r3, [r2, #0]
 800db36:	e00f      	b.n	800db58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	015a      	lsls	r2, r3, #5
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	4413      	add	r3, r2
 800db40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	69ba      	ldr	r2, [r7, #24]
 800db48:	0151      	lsls	r1, r2, #5
 800db4a:	69fa      	ldr	r2, [r7, #28]
 800db4c:	440a      	add	r2, r1
 800db4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800db58:	69bb      	ldr	r3, [r7, #24]
 800db5a:	015a      	lsls	r2, r3, #5
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	4413      	add	r3, r2
 800db60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	69ba      	ldr	r2, [r7, #24]
 800db68:	0151      	lsls	r1, r2, #5
 800db6a:	69fa      	ldr	r2, [r7, #28]
 800db6c:	440a      	add	r2, r1
 800db6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800db72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800db76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800db78:	2300      	movs	r3, #0
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3720      	adds	r7, #32
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	1ff80000 	.word	0x1ff80000

0800db88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800db88:	b480      	push	{r7}
 800db8a:	b087      	sub	sp, #28
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	4613      	mov	r3, r2
 800db94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	785b      	ldrb	r3, [r3, #1]
 800dba4:	2b01      	cmp	r3, #1
 800dba6:	f040 80cd 	bne.w	800dd44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	695b      	ldr	r3, [r3, #20]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d132      	bne.n	800dc18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	015a      	lsls	r2, r3, #5
 800dbb6:	697b      	ldr	r3, [r7, #20]
 800dbb8:	4413      	add	r3, r2
 800dbba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbbe:	691b      	ldr	r3, [r3, #16]
 800dbc0:	693a      	ldr	r2, [r7, #16]
 800dbc2:	0151      	lsls	r1, r2, #5
 800dbc4:	697a      	ldr	r2, [r7, #20]
 800dbc6:	440a      	add	r2, r1
 800dbc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dbd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dbd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	015a      	lsls	r2, r3, #5
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	4413      	add	r3, r2
 800dbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dbe2:	691b      	ldr	r3, [r3, #16]
 800dbe4:	693a      	ldr	r2, [r7, #16]
 800dbe6:	0151      	lsls	r1, r2, #5
 800dbe8:	697a      	ldr	r2, [r7, #20]
 800dbea:	440a      	add	r2, r1
 800dbec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dbf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	015a      	lsls	r2, r3, #5
 800dbfa:	697b      	ldr	r3, [r7, #20]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	693a      	ldr	r2, [r7, #16]
 800dc06:	0151      	lsls	r1, r2, #5
 800dc08:	697a      	ldr	r2, [r7, #20]
 800dc0a:	440a      	add	r2, r1
 800dc0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc10:	0cdb      	lsrs	r3, r3, #19
 800dc12:	04db      	lsls	r3, r3, #19
 800dc14:	6113      	str	r3, [r2, #16]
 800dc16:	e04e      	b.n	800dcb6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	015a      	lsls	r2, r3, #5
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	4413      	add	r3, r2
 800dc20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc24:	691b      	ldr	r3, [r3, #16]
 800dc26:	693a      	ldr	r2, [r7, #16]
 800dc28:	0151      	lsls	r1, r2, #5
 800dc2a:	697a      	ldr	r2, [r7, #20]
 800dc2c:	440a      	add	r2, r1
 800dc2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc32:	0cdb      	lsrs	r3, r3, #19
 800dc34:	04db      	lsls	r3, r3, #19
 800dc36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	015a      	lsls	r2, r3, #5
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	4413      	add	r3, r2
 800dc40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	693a      	ldr	r2, [r7, #16]
 800dc48:	0151      	lsls	r1, r2, #5
 800dc4a:	697a      	ldr	r2, [r7, #20]
 800dc4c:	440a      	add	r2, r1
 800dc4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dc56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dc5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	695a      	ldr	r2, [r3, #20]
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	689b      	ldr	r3, [r3, #8]
 800dc64:	429a      	cmp	r2, r3
 800dc66:	d903      	bls.n	800dc70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	689a      	ldr	r2, [r3, #8]
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	015a      	lsls	r2, r3, #5
 800dc74:	697b      	ldr	r3, [r7, #20]
 800dc76:	4413      	add	r3, r2
 800dc78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc7c:	691b      	ldr	r3, [r3, #16]
 800dc7e:	693a      	ldr	r2, [r7, #16]
 800dc80:	0151      	lsls	r1, r2, #5
 800dc82:	697a      	ldr	r2, [r7, #20]
 800dc84:	440a      	add	r2, r1
 800dc86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dc8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dc8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	015a      	lsls	r2, r3, #5
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	4413      	add	r3, r2
 800dc98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dc9c:	691a      	ldr	r2, [r3, #16]
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800dca6:	6939      	ldr	r1, [r7, #16]
 800dca8:	0148      	lsls	r0, r1, #5
 800dcaa:	6979      	ldr	r1, [r7, #20]
 800dcac:	4401      	add	r1, r0
 800dcae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800dcb2:	4313      	orrs	r3, r2
 800dcb4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800dcb6:	79fb      	ldrb	r3, [r7, #7]
 800dcb8:	2b01      	cmp	r3, #1
 800dcba:	d11e      	bne.n	800dcfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	691b      	ldr	r3, [r3, #16]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d009      	beq.n	800dcd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	015a      	lsls	r2, r3, #5
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	4413      	add	r3, r2
 800dccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dcd0:	461a      	mov	r2, r3
 800dcd2:	68bb      	ldr	r3, [r7, #8]
 800dcd4:	691b      	ldr	r3, [r3, #16]
 800dcd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	015a      	lsls	r2, r3, #5
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	4413      	add	r3, r2
 800dce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	693a      	ldr	r2, [r7, #16]
 800dce8:	0151      	lsls	r1, r2, #5
 800dcea:	697a      	ldr	r2, [r7, #20]
 800dcec:	440a      	add	r2, r1
 800dcee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dcf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dcf6:	6013      	str	r3, [r2, #0]
 800dcf8:	e092      	b.n	800de20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800dcfa:	693b      	ldr	r3, [r7, #16]
 800dcfc:	015a      	lsls	r2, r3, #5
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	4413      	add	r3, r2
 800dd02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	693a      	ldr	r2, [r7, #16]
 800dd0a:	0151      	lsls	r1, r2, #5
 800dd0c:	697a      	ldr	r2, [r7, #20]
 800dd0e:	440a      	add	r2, r1
 800dd10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dd14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800dd18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	695b      	ldr	r3, [r3, #20]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d07e      	beq.n	800de20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dd28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	f003 030f 	and.w	r3, r3, #15
 800dd32:	2101      	movs	r1, #1
 800dd34:	fa01 f303 	lsl.w	r3, r1, r3
 800dd38:	6979      	ldr	r1, [r7, #20]
 800dd3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd3e:	4313      	orrs	r3, r2
 800dd40:	634b      	str	r3, [r1, #52]	; 0x34
 800dd42:	e06d      	b.n	800de20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800dd44:	693b      	ldr	r3, [r7, #16]
 800dd46:	015a      	lsls	r2, r3, #5
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	4413      	add	r3, r2
 800dd4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	693a      	ldr	r2, [r7, #16]
 800dd54:	0151      	lsls	r1, r2, #5
 800dd56:	697a      	ldr	r2, [r7, #20]
 800dd58:	440a      	add	r2, r1
 800dd5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd5e:	0cdb      	lsrs	r3, r3, #19
 800dd60:	04db      	lsls	r3, r3, #19
 800dd62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800dd64:	693b      	ldr	r3, [r7, #16]
 800dd66:	015a      	lsls	r2, r3, #5
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dd70:	691b      	ldr	r3, [r3, #16]
 800dd72:	693a      	ldr	r2, [r7, #16]
 800dd74:	0151      	lsls	r1, r2, #5
 800dd76:	697a      	ldr	r2, [r7, #20]
 800dd78:	440a      	add	r2, r1
 800dd7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dd7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800dd82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800dd86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	695b      	ldr	r3, [r3, #20]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d003      	beq.n	800dd98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800dd90:	68bb      	ldr	r3, [r7, #8]
 800dd92:	689a      	ldr	r2, [r3, #8]
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	015a      	lsls	r2, r3, #5
 800dd9c:	697b      	ldr	r3, [r7, #20]
 800dd9e:	4413      	add	r3, r2
 800dda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dda4:	691b      	ldr	r3, [r3, #16]
 800dda6:	693a      	ldr	r2, [r7, #16]
 800dda8:	0151      	lsls	r1, r2, #5
 800ddaa:	697a      	ldr	r2, [r7, #20]
 800ddac:	440a      	add	r2, r1
 800ddae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ddb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ddb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ddb8:	693b      	ldr	r3, [r7, #16]
 800ddba:	015a      	lsls	r2, r3, #5
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddc4:	691a      	ldr	r2, [r3, #16]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ddce:	6939      	ldr	r1, [r7, #16]
 800ddd0:	0148      	lsls	r0, r1, #5
 800ddd2:	6979      	ldr	r1, [r7, #20]
 800ddd4:	4401      	add	r1, r0
 800ddd6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ddda:	4313      	orrs	r3, r2
 800dddc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ddde:	79fb      	ldrb	r3, [r7, #7]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d10d      	bne.n	800de00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	68db      	ldr	r3, [r3, #12]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d009      	beq.n	800de00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	68d9      	ldr	r1, [r3, #12]
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	015a      	lsls	r2, r3, #5
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddfc:	460a      	mov	r2, r1
 800ddfe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	015a      	lsls	r2, r3, #5
 800de04:	697b      	ldr	r3, [r7, #20]
 800de06:	4413      	add	r3, r2
 800de08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	693a      	ldr	r2, [r7, #16]
 800de10:	0151      	lsls	r1, r2, #5
 800de12:	697a      	ldr	r2, [r7, #20]
 800de14:	440a      	add	r2, r1
 800de16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800de1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800de1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800de20:	2300      	movs	r3, #0
}
 800de22:	4618      	mov	r0, r3
 800de24:	371c      	adds	r7, #28
 800de26:	46bd      	mov	sp, r7
 800de28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2c:	4770      	bx	lr

0800de2e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800de2e:	b480      	push	{r7}
 800de30:	b089      	sub	sp, #36	; 0x24
 800de32:	af00      	add	r7, sp, #0
 800de34:	60f8      	str	r0, [r7, #12]
 800de36:	60b9      	str	r1, [r7, #8]
 800de38:	4611      	mov	r1, r2
 800de3a:	461a      	mov	r2, r3
 800de3c:	460b      	mov	r3, r1
 800de3e:	71fb      	strb	r3, [r7, #7]
 800de40:	4613      	mov	r3, r2
 800de42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800de4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800de50:	2b00      	cmp	r3, #0
 800de52:	d123      	bne.n	800de9c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800de54:	88bb      	ldrh	r3, [r7, #4]
 800de56:	3303      	adds	r3, #3
 800de58:	089b      	lsrs	r3, r3, #2
 800de5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800de5c:	2300      	movs	r3, #0
 800de5e:	61bb      	str	r3, [r7, #24]
 800de60:	e018      	b.n	800de94 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800de62:	79fb      	ldrb	r3, [r7, #7]
 800de64:	031a      	lsls	r2, r3, #12
 800de66:	697b      	ldr	r3, [r7, #20]
 800de68:	4413      	add	r3, r2
 800de6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800de6e:	461a      	mov	r2, r3
 800de70:	69fb      	ldr	r3, [r7, #28]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	6013      	str	r3, [r2, #0]
      pSrc++;
 800de76:	69fb      	ldr	r3, [r7, #28]
 800de78:	3301      	adds	r3, #1
 800de7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	3301      	adds	r3, #1
 800de80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800de82:	69fb      	ldr	r3, [r7, #28]
 800de84:	3301      	adds	r3, #1
 800de86:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800de88:	69fb      	ldr	r3, [r7, #28]
 800de8a:	3301      	adds	r3, #1
 800de8c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	3301      	adds	r3, #1
 800de92:	61bb      	str	r3, [r7, #24]
 800de94:	69ba      	ldr	r2, [r7, #24]
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d3e2      	bcc.n	800de62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3724      	adds	r7, #36	; 0x24
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr

0800deaa <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800deaa:	b480      	push	{r7}
 800deac:	b08b      	sub	sp, #44	; 0x2c
 800deae:	af00      	add	r7, sp, #0
 800deb0:	60f8      	str	r0, [r7, #12]
 800deb2:	60b9      	str	r1, [r7, #8]
 800deb4:	4613      	mov	r3, r2
 800deb6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800dec0:	88fb      	ldrh	r3, [r7, #6]
 800dec2:	089b      	lsrs	r3, r3, #2
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800dec8:	88fb      	ldrh	r3, [r7, #6]
 800deca:	f003 0303 	and.w	r3, r3, #3
 800dece:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ded0:	2300      	movs	r3, #0
 800ded2:	623b      	str	r3, [r7, #32]
 800ded4:	e014      	b.n	800df00 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ded6:	69bb      	ldr	r3, [r7, #24]
 800ded8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee0:	601a      	str	r2, [r3, #0]
    pDest++;
 800dee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee4:	3301      	adds	r3, #1
 800dee6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	3301      	adds	r3, #1
 800deec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	3301      	adds	r3, #1
 800def2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	3301      	adds	r3, #1
 800def8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800defa:	6a3b      	ldr	r3, [r7, #32]
 800defc:	3301      	adds	r3, #1
 800defe:	623b      	str	r3, [r7, #32]
 800df00:	6a3a      	ldr	r2, [r7, #32]
 800df02:	697b      	ldr	r3, [r7, #20]
 800df04:	429a      	cmp	r2, r3
 800df06:	d3e6      	bcc.n	800ded6 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800df08:	8bfb      	ldrh	r3, [r7, #30]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d01e      	beq.n	800df4c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800df0e:	2300      	movs	r3, #0
 800df10:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800df18:	461a      	mov	r2, r3
 800df1a:	f107 0310 	add.w	r3, r7, #16
 800df1e:	6812      	ldr	r2, [r2, #0]
 800df20:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800df22:	693a      	ldr	r2, [r7, #16]
 800df24:	6a3b      	ldr	r3, [r7, #32]
 800df26:	b2db      	uxtb	r3, r3
 800df28:	00db      	lsls	r3, r3, #3
 800df2a:	fa22 f303 	lsr.w	r3, r2, r3
 800df2e:	b2da      	uxtb	r2, r3
 800df30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df32:	701a      	strb	r2, [r3, #0]
      i++;
 800df34:	6a3b      	ldr	r3, [r7, #32]
 800df36:	3301      	adds	r3, #1
 800df38:	623b      	str	r3, [r7, #32]
      pDest++;
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	3301      	adds	r3, #1
 800df3e:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800df40:	8bfb      	ldrh	r3, [r7, #30]
 800df42:	3b01      	subs	r3, #1
 800df44:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800df46:	8bfb      	ldrh	r3, [r7, #30]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d1ea      	bne.n	800df22 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800df4e:	4618      	mov	r0, r3
 800df50:	372c      	adds	r7, #44	; 0x2c
 800df52:	46bd      	mov	sp, r7
 800df54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df58:	4770      	bx	lr

0800df5a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800df5a:	b480      	push	{r7}
 800df5c:	b085      	sub	sp, #20
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	785b      	ldrb	r3, [r3, #1]
 800df72:	2b01      	cmp	r3, #1
 800df74:	d12c      	bne.n	800dfd0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	015a      	lsls	r2, r3, #5
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	4413      	add	r3, r2
 800df7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	db12      	blt.n	800dfae <USB_EPSetStall+0x54>
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d00f      	beq.n	800dfae <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800df8e:	68bb      	ldr	r3, [r7, #8]
 800df90:	015a      	lsls	r2, r3, #5
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	4413      	add	r3, r2
 800df96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	0151      	lsls	r1, r2, #5
 800dfa0:	68fa      	ldr	r2, [r7, #12]
 800dfa2:	440a      	add	r2, r1
 800dfa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfa8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800dfac:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	015a      	lsls	r2, r3, #5
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	68ba      	ldr	r2, [r7, #8]
 800dfbe:	0151      	lsls	r1, r2, #5
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	440a      	add	r2, r1
 800dfc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800dfc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dfcc:	6013      	str	r3, [r2, #0]
 800dfce:	e02b      	b.n	800e028 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	015a      	lsls	r2, r3, #5
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	db12      	blt.n	800e008 <USB_EPSetStall+0xae>
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d00f      	beq.n	800e008 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800dfe8:	68bb      	ldr	r3, [r7, #8]
 800dfea:	015a      	lsls	r2, r3, #5
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	4413      	add	r3, r2
 800dff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	0151      	lsls	r1, r2, #5
 800dffa:	68fa      	ldr	r2, [r7, #12]
 800dffc:	440a      	add	r2, r1
 800dffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e002:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800e006:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800e008:	68bb      	ldr	r3, [r7, #8]
 800e00a:	015a      	lsls	r2, r3, #5
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	4413      	add	r3, r2
 800e010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	68ba      	ldr	r2, [r7, #8]
 800e018:	0151      	lsls	r1, r2, #5
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	440a      	add	r2, r1
 800e01e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e022:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e028:	2300      	movs	r3, #0
}
 800e02a:	4618      	mov	r0, r3
 800e02c:	3714      	adds	r7, #20
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr

0800e036 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e036:	b480      	push	{r7}
 800e038:	b085      	sub	sp, #20
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
 800e03e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	781b      	ldrb	r3, [r3, #0]
 800e048:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	785b      	ldrb	r3, [r3, #1]
 800e04e:	2b01      	cmp	r3, #1
 800e050:	d128      	bne.n	800e0a4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	015a      	lsls	r2, r3, #5
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	4413      	add	r3, r2
 800e05a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	68ba      	ldr	r2, [r7, #8]
 800e062:	0151      	lsls	r1, r2, #5
 800e064:	68fa      	ldr	r2, [r7, #12]
 800e066:	440a      	add	r2, r1
 800e068:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e06c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e070:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	78db      	ldrb	r3, [r3, #3]
 800e076:	2b03      	cmp	r3, #3
 800e078:	d003      	beq.n	800e082 <USB_EPClearStall+0x4c>
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	78db      	ldrb	r3, [r3, #3]
 800e07e:	2b02      	cmp	r3, #2
 800e080:	d138      	bne.n	800e0f4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	015a      	lsls	r2, r3, #5
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	4413      	add	r3, r2
 800e08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	68ba      	ldr	r2, [r7, #8]
 800e092:	0151      	lsls	r1, r2, #5
 800e094:	68fa      	ldr	r2, [r7, #12]
 800e096:	440a      	add	r2, r1
 800e098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e09c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0a0:	6013      	str	r3, [r2, #0]
 800e0a2:	e027      	b.n	800e0f4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	015a      	lsls	r2, r3, #5
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	4413      	add	r3, r2
 800e0ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	68ba      	ldr	r2, [r7, #8]
 800e0b4:	0151      	lsls	r1, r2, #5
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	440a      	add	r2, r1
 800e0ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e0c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	78db      	ldrb	r3, [r3, #3]
 800e0c8:	2b03      	cmp	r3, #3
 800e0ca:	d003      	beq.n	800e0d4 <USB_EPClearStall+0x9e>
 800e0cc:	683b      	ldr	r3, [r7, #0]
 800e0ce:	78db      	ldrb	r3, [r3, #3]
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d10f      	bne.n	800e0f4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800e0d4:	68bb      	ldr	r3, [r7, #8]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	68ba      	ldr	r2, [r7, #8]
 800e0e4:	0151      	lsls	r1, r2, #5
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	440a      	add	r2, r1
 800e0ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e0ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0f2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3714      	adds	r7, #20
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr

0800e102 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e102:	b480      	push	{r7}
 800e104:	b085      	sub	sp, #20
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
 800e10a:	460b      	mov	r3, r1
 800e10c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e120:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800e124:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	78fb      	ldrb	r3, [r7, #3]
 800e130:	011b      	lsls	r3, r3, #4
 800e132:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800e136:	68f9      	ldr	r1, [r7, #12]
 800e138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e13c:	4313      	orrs	r3, r2
 800e13e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e140:	2300      	movs	r3, #0
}
 800e142:	4618      	mov	r0, r3
 800e144:	3714      	adds	r7, #20
 800e146:	46bd      	mov	sp, r7
 800e148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14c:	4770      	bx	lr

0800e14e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e14e:	b480      	push	{r7}
 800e150:	b085      	sub	sp, #20
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e168:	f023 0303 	bic.w	r3, r3, #3
 800e16c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e17c:	f023 0302 	bic.w	r3, r3, #2
 800e180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	3714      	adds	r7, #20
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	68fa      	ldr	r2, [r7, #12]
 800e1a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e1aa:	f023 0303 	bic.w	r3, r3, #3
 800e1ae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1b6:	685b      	ldr	r3, [r3, #4]
 800e1b8:	68fa      	ldr	r2, [r7, #12]
 800e1ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e1be:	f043 0302 	orr.w	r3, r3, #2
 800e1c2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e1c4:	2300      	movs	r3, #0
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3714      	adds	r7, #20
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr

0800e1d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800e1d2:	b480      	push	{r7}
 800e1d4:	b085      	sub	sp, #20
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	695b      	ldr	r3, [r3, #20]
 800e1de:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	699b      	ldr	r3, [r3, #24]
 800e1e4:	68fa      	ldr	r2, [r7, #12]
 800e1e6:	4013      	ands	r3, r2
 800e1e8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3714      	adds	r7, #20
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f6:	4770      	bx	lr

0800e1f8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e1f8:	b480      	push	{r7}
 800e1fa:	b085      	sub	sp, #20
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e20a:	699b      	ldr	r3, [r3, #24]
 800e20c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e214:	69db      	ldr	r3, [r3, #28]
 800e216:	68ba      	ldr	r2, [r7, #8]
 800e218:	4013      	ands	r3, r2
 800e21a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	0c1b      	lsrs	r3, r3, #16
}
 800e220:	4618      	mov	r0, r3
 800e222:	3714      	adds	r7, #20
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b085      	sub	sp, #20
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e23e:	699b      	ldr	r3, [r3, #24]
 800e240:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e248:	69db      	ldr	r3, [r3, #28]
 800e24a:	68ba      	ldr	r2, [r7, #8]
 800e24c:	4013      	ands	r3, r2
 800e24e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	b29b      	uxth	r3, r3
}
 800e254:	4618      	mov	r0, r3
 800e256:	3714      	adds	r7, #20
 800e258:	46bd      	mov	sp, r7
 800e25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25e:	4770      	bx	lr

0800e260 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e260:	b480      	push	{r7}
 800e262:	b085      	sub	sp, #20
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
 800e268:	460b      	mov	r3, r1
 800e26a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	015a      	lsls	r2, r3, #5
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	4413      	add	r3, r2
 800e278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e27c:	689b      	ldr	r3, [r3, #8]
 800e27e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e286:	695b      	ldr	r3, [r3, #20]
 800e288:	68ba      	ldr	r2, [r7, #8]
 800e28a:	4013      	ands	r3, r2
 800e28c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e28e:	68bb      	ldr	r3, [r7, #8]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3714      	adds	r7, #20
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b087      	sub	sp, #28
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e2bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2be:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e2c0:	78fb      	ldrb	r3, [r7, #3]
 800e2c2:	f003 030f 	and.w	r3, r3, #15
 800e2c6:	68fa      	ldr	r2, [r7, #12]
 800e2c8:	fa22 f303 	lsr.w	r3, r2, r3
 800e2cc:	01db      	lsls	r3, r3, #7
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	693a      	ldr	r2, [r7, #16]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e2d6:	78fb      	ldrb	r3, [r7, #3]
 800e2d8:	015a      	lsls	r2, r3, #5
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	4413      	add	r3, r2
 800e2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2e2:	689b      	ldr	r3, [r3, #8]
 800e2e4:	693a      	ldr	r2, [r7, #16]
 800e2e6:	4013      	ands	r3, r2
 800e2e8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e2ea:	68bb      	ldr	r3, [r7, #8]
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	371c      	adds	r7, #28
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f6:	4770      	bx	lr

0800e2f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800e2f8:	b480      	push	{r7}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	695b      	ldr	r3, [r3, #20]
 800e304:	f003 0301 	and.w	r3, r3, #1
}
 800e308:	4618      	mov	r0, r3
 800e30a:	370c      	adds	r7, #12
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800e314:	b480      	push	{r7}
 800e316:	b085      	sub	sp, #20
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	68fa      	ldr	r2, [r7, #12]
 800e32a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e32e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800e332:	f023 0307 	bic.w	r3, r3, #7
 800e336:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e34a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e34c:	2300      	movs	r3, #0
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3714      	adds	r7, #20
 800e352:	46bd      	mov	sp, r7
 800e354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e358:	4770      	bx	lr
	...

0800e35c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800e35c:	b480      	push	{r7}
 800e35e:	b087      	sub	sp, #28
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	460b      	mov	r3, r1
 800e366:	607a      	str	r2, [r7, #4]
 800e368:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	333c      	adds	r3, #60	; 0x3c
 800e372:	3304      	adds	r3, #4
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	4a26      	ldr	r2, [pc, #152]	; (800e414 <USB_EP0_OutStart+0xb8>)
 800e37c:	4293      	cmp	r3, r2
 800e37e:	d90a      	bls.n	800e396 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e380:	697b      	ldr	r3, [r7, #20]
 800e382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e38c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e390:	d101      	bne.n	800e396 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e392:	2300      	movs	r3, #0
 800e394:	e037      	b.n	800e406 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e39c:	461a      	mov	r2, r3
 800e39e:	2300      	movs	r3, #0
 800e3a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a8:	691b      	ldr	r3, [r3, #16]
 800e3aa:	697a      	ldr	r2, [r7, #20]
 800e3ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e3b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3bc:	691b      	ldr	r3, [r3, #16]
 800e3be:	697a      	ldr	r2, [r7, #20]
 800e3c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3c4:	f043 0318 	orr.w	r3, r3, #24
 800e3c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e3ca:	697b      	ldr	r3, [r7, #20]
 800e3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	697a      	ldr	r2, [r7, #20]
 800e3d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800e3dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e3de:	7afb      	ldrb	r3, [r7, #11]
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d10f      	bne.n	800e404 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e3f0:	697b      	ldr	r3, [r7, #20]
 800e3f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	697a      	ldr	r2, [r7, #20]
 800e3fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800e402:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e404:	2300      	movs	r3, #0
}
 800e406:	4618      	mov	r0, r3
 800e408:	371c      	adds	r7, #28
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop
 800e414:	4f54300a 	.word	0x4f54300a

0800e418 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e418:	b480      	push	{r7}
 800e41a:	b085      	sub	sp, #20
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e420:	2300      	movs	r3, #0
 800e422:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	3301      	adds	r3, #1
 800e428:	60fb      	str	r3, [r7, #12]
 800e42a:	4a13      	ldr	r2, [pc, #76]	; (800e478 <USB_CoreReset+0x60>)
 800e42c:	4293      	cmp	r3, r2
 800e42e:	d901      	bls.n	800e434 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800e430:	2303      	movs	r3, #3
 800e432:	e01a      	b.n	800e46a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	daf3      	bge.n	800e424 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e43c:	2300      	movs	r3, #0
 800e43e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	f043 0201 	orr.w	r2, r3, #1
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	3301      	adds	r3, #1
 800e450:	60fb      	str	r3, [r7, #12]
 800e452:	4a09      	ldr	r2, [pc, #36]	; (800e478 <USB_CoreReset+0x60>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d901      	bls.n	800e45c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800e458:	2303      	movs	r3, #3
 800e45a:	e006      	b.n	800e46a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	f003 0301 	and.w	r3, r3, #1
 800e464:	2b01      	cmp	r3, #1
 800e466:	d0f1      	beq.n	800e44c <USB_CoreReset+0x34>

  return HAL_OK;
 800e468:	2300      	movs	r3, #0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3714      	adds	r7, #20
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	00030d40 	.word	0x00030d40

0800e47c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800e480:	4904      	ldr	r1, [pc, #16]	; (800e494 <MX_FATFS_Init+0x18>)
 800e482:	4805      	ldr	r0, [pc, #20]	; (800e498 <MX_FATFS_Init+0x1c>)
 800e484:	f001 fc34 	bl	800fcf0 <FATFS_LinkDriver>
 800e488:	4603      	mov	r3, r0
 800e48a:	461a      	mov	r2, r3
 800e48c:	4b03      	ldr	r3, [pc, #12]	; (800e49c <MX_FATFS_Init+0x20>)
 800e48e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800e490:	bf00      	nop
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20001464 	.word	0x20001464
 800e498:	08011714 	.word	0x08011714
 800e49c:	20001460 	.word	0x20001460

0800e4a0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b082      	sub	sp, #8
 800e4a4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800e4aa:	f000 f896 	bl	800e5da <BSP_SD_IsDetected>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b01      	cmp	r3, #1
 800e4b2:	d001      	beq.n	800e4b8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	e012      	b.n	800e4de <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800e4b8:	480b      	ldr	r0, [pc, #44]	; (800e4e8 <BSP_SD_Init+0x48>)
 800e4ba:	f7fa fef3 	bl	80092a4 <HAL_SD_Init>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800e4c2:	79fb      	ldrb	r3, [r7, #7]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d109      	bne.n	800e4dc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800e4c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800e4cc:	4806      	ldr	r0, [pc, #24]	; (800e4e8 <BSP_SD_Init+0x48>)
 800e4ce:	f7fb fca9 	bl	8009e24 <HAL_SD_ConfigWideBusOperation>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d001      	beq.n	800e4dc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800e4d8:	2301      	movs	r3, #1
 800e4da:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800e4dc:	79fb      	ldrb	r3, [r7, #7]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	20000ee0 	.word	0x20000ee0

0800e4ec <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b086      	sub	sp, #24
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	68ba      	ldr	r2, [r7, #8]
 800e500:	68f9      	ldr	r1, [r7, #12]
 800e502:	4806      	ldr	r0, [pc, #24]	; (800e51c <BSP_SD_ReadBlocks_DMA+0x30>)
 800e504:	f7fa ff7c 	bl	8009400 <HAL_SD_ReadBlocks_DMA>
 800e508:	4603      	mov	r3, r0
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d001      	beq.n	800e512 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e50e:	2301      	movs	r3, #1
 800e510:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e512:	7dfb      	ldrb	r3, [r7, #23]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3718      	adds	r7, #24
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}
 800e51c:	20000ee0 	.word	0x20000ee0

0800e520 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800e52c:	2300      	movs	r3, #0
 800e52e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	68f9      	ldr	r1, [r7, #12]
 800e536:	4806      	ldr	r0, [pc, #24]	; (800e550 <BSP_SD_WriteBlocks_DMA+0x30>)
 800e538:	f7fb f842 	bl	80095c0 <HAL_SD_WriteBlocks_DMA>
 800e53c:	4603      	mov	r3, r0
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d001      	beq.n	800e546 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800e542:	2301      	movs	r3, #1
 800e544:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800e546:	7dfb      	ldrb	r3, [r7, #23]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3718      	adds	r7, #24
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}
 800e550:	20000ee0 	.word	0x20000ee0

0800e554 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800e554:	b580      	push	{r7, lr}
 800e556:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800e558:	4805      	ldr	r0, [pc, #20]	; (800e570 <BSP_SD_GetCardState+0x1c>)
 800e55a:	f7fb fcfd 	bl	8009f58 <HAL_SD_GetCardState>
 800e55e:	4603      	mov	r3, r0
 800e560:	2b04      	cmp	r3, #4
 800e562:	bf14      	ite	ne
 800e564:	2301      	movne	r3, #1
 800e566:	2300      	moveq	r3, #0
 800e568:	b2db      	uxtb	r3, r3
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	20000ee0 	.word	0x20000ee0

0800e574 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b082      	sub	sp, #8
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800e57c:	6879      	ldr	r1, [r7, #4]
 800e57e:	4803      	ldr	r0, [pc, #12]	; (800e58c <BSP_SD_GetCardInfo+0x18>)
 800e580:	f7fb fc24 	bl	8009dcc <HAL_SD_GetCardInfo>
}
 800e584:	bf00      	nop
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	20000ee0 	.word	0x20000ee0

0800e590 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800e598:	f000 f818 	bl	800e5cc <BSP_SD_AbortCallback>
}
 800e59c:	bf00      	nop
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800e5ac:	f000 f9a8 	bl	800e900 <BSP_SD_WriteCpltCallback>
}
 800e5b0:	bf00      	nop
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}

0800e5b8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800e5b8:	b580      	push	{r7, lr}
 800e5ba:	b082      	sub	sp, #8
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800e5c0:	f000 f9aa 	bl	800e918 <BSP_SD_ReadCpltCallback>
}
 800e5c4:	bf00      	nop
 800e5c6:	3708      	adds	r7, #8
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	bd80      	pop	{r7, pc}

0800e5cc <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	af00      	add	r7, sp, #0

}
 800e5d0:	bf00      	nop
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800e5da:	b580      	push	{r7, lr}
 800e5dc:	b082      	sub	sp, #8
 800e5de:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800e5e4:	f000 f80c 	bl	800e600 <BSP_PlatformIsDetected>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d101      	bne.n	800e5f2 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800e5f2:	79fb      	ldrb	r3, [r7, #7]
 800e5f4:	b2db      	uxtb	r3, r3
}
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	3708      	adds	r7, #8
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
	...

0800e600 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800e606:	2301      	movs	r3, #1
 800e608:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800e60a:	2108      	movs	r1, #8
 800e60c:	4806      	ldr	r0, [pc, #24]	; (800e628 <BSP_PlatformIsDetected+0x28>)
 800e60e:	f7f7 fe0b 	bl	8006228 <HAL_GPIO_ReadPin>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d001      	beq.n	800e61c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800e618:	2300      	movs	r3, #0
 800e61a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800e61c:	79fb      	ldrb	r3, [r7, #7]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3708      	adds	r7, #8
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}
 800e626:	bf00      	nop
 800e628:	40020c00 	.word	0x40020c00

0800e62c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800e634:	f7f5 fe3a 	bl	80042ac <HAL_GetTick>
 800e638:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800e63a:	e006      	b.n	800e64a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e63c:	f7ff ff8a 	bl	800e554 <BSP_SD_GetCardState>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800e646:	2300      	movs	r3, #0
 800e648:	e009      	b.n	800e65e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800e64a:	f7f5 fe2f 	bl	80042ac <HAL_GetTick>
 800e64e:	4602      	mov	r2, r0
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	1ad3      	subs	r3, r2, r3
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	429a      	cmp	r2, r3
 800e658:	d8f0      	bhi.n	800e63c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800e65a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3710      	adds	r7, #16
 800e662:	46bd      	mov	sp, r7
 800e664:	bd80      	pop	{r7, pc}
	...

0800e668 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b082      	sub	sp, #8
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	4603      	mov	r3, r0
 800e670:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800e672:	4b0b      	ldr	r3, [pc, #44]	; (800e6a0 <SD_CheckStatus+0x38>)
 800e674:	2201      	movs	r2, #1
 800e676:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800e678:	f7ff ff6c 	bl	800e554 <BSP_SD_GetCardState>
 800e67c:	4603      	mov	r3, r0
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d107      	bne.n	800e692 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800e682:	4b07      	ldr	r3, [pc, #28]	; (800e6a0 <SD_CheckStatus+0x38>)
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	b2db      	uxtb	r3, r3
 800e688:	f023 0301 	bic.w	r3, r3, #1
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	4b04      	ldr	r3, [pc, #16]	; (800e6a0 <SD_CheckStatus+0x38>)
 800e690:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800e692:	4b03      	ldr	r3, [pc, #12]	; (800e6a0 <SD_CheckStatus+0x38>)
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	b2db      	uxtb	r3, r3
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	2000031d 	.word	0x2000031d

0800e6a4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800e6ae:	f7ff fef7 	bl	800e4a0 <BSP_SD_Init>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d107      	bne.n	800e6c8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800e6b8:	79fb      	ldrb	r3, [r7, #7]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7ff ffd4 	bl	800e668 <SD_CheckStatus>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	461a      	mov	r2, r3
 800e6c4:	4b04      	ldr	r3, [pc, #16]	; (800e6d8 <SD_initialize+0x34>)
 800e6c6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800e6c8:	4b03      	ldr	r3, [pc, #12]	; (800e6d8 <SD_initialize+0x34>)
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	b2db      	uxtb	r3, r3
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	2000031d 	.word	0x2000031d

0800e6dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b082      	sub	sp, #8
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800e6e6:	79fb      	ldrb	r3, [r7, #7]
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff ffbd 	bl	800e668 <SD_CheckStatus>
 800e6ee:	4603      	mov	r3, r0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}

0800e6f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b086      	sub	sp, #24
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	60b9      	str	r1, [r7, #8]
 800e700:	607a      	str	r2, [r7, #4]
 800e702:	603b      	str	r3, [r7, #0]
 800e704:	4603      	mov	r3, r0
 800e706:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e708:	2301      	movs	r3, #1
 800e70a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e70c:	f247 5030 	movw	r0, #30000	; 0x7530
 800e710:	f7ff ff8c 	bl	800e62c <SD_CheckStatusWithTimeout>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	da01      	bge.n	800e71e <SD_read+0x26>
  {
    return res;
 800e71a:	7dfb      	ldrb	r3, [r7, #23]
 800e71c:	e03b      	b.n	800e796 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800e71e:	683a      	ldr	r2, [r7, #0]
 800e720:	6879      	ldr	r1, [r7, #4]
 800e722:	68b8      	ldr	r0, [r7, #8]
 800e724:	f7ff fee2 	bl	800e4ec <BSP_SD_ReadBlocks_DMA>
 800e728:	4603      	mov	r3, r0
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d132      	bne.n	800e794 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800e72e:	4b1c      	ldr	r3, [pc, #112]	; (800e7a0 <SD_read+0xa8>)
 800e730:	2200      	movs	r2, #0
 800e732:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800e734:	f7f5 fdba 	bl	80042ac <HAL_GetTick>
 800e738:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e73a:	bf00      	nop
 800e73c:	4b18      	ldr	r3, [pc, #96]	; (800e7a0 <SD_read+0xa8>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d108      	bne.n	800e756 <SD_read+0x5e>
 800e744:	f7f5 fdb2 	bl	80042ac <HAL_GetTick>
 800e748:	4602      	mov	r2, r0
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	1ad3      	subs	r3, r2, r3
 800e74e:	f247 522f 	movw	r2, #29999	; 0x752f
 800e752:	4293      	cmp	r3, r2
 800e754:	d9f2      	bls.n	800e73c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800e756:	4b12      	ldr	r3, [pc, #72]	; (800e7a0 <SD_read+0xa8>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d102      	bne.n	800e764 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800e75e:	2301      	movs	r3, #1
 800e760:	75fb      	strb	r3, [r7, #23]
 800e762:	e017      	b.n	800e794 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800e764:	4b0e      	ldr	r3, [pc, #56]	; (800e7a0 <SD_read+0xa8>)
 800e766:	2200      	movs	r2, #0
 800e768:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e76a:	f7f5 fd9f 	bl	80042ac <HAL_GetTick>
 800e76e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e770:	e007      	b.n	800e782 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e772:	f7ff feef 	bl	800e554 <BSP_SD_GetCardState>
 800e776:	4603      	mov	r3, r0
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d102      	bne.n	800e782 <SD_read+0x8a>
          {
            res = RES_OK;
 800e77c:	2300      	movs	r3, #0
 800e77e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800e780:	e008      	b.n	800e794 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e782:	f7f5 fd93 	bl	80042ac <HAL_GetTick>
 800e786:	4602      	mov	r2, r0
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	1ad3      	subs	r3, r2, r3
 800e78c:	f247 522f 	movw	r2, #29999	; 0x752f
 800e790:	4293      	cmp	r3, r2
 800e792:	d9ee      	bls.n	800e772 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800e794:	7dfb      	ldrb	r3, [r7, #23]
}
 800e796:	4618      	mov	r0, r3
 800e798:	3718      	adds	r7, #24
 800e79a:	46bd      	mov	sp, r7
 800e79c:	bd80      	pop	{r7, pc}
 800e79e:	bf00      	nop
 800e7a0:	20000428 	.word	0x20000428

0800e7a4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b086      	sub	sp, #24
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60b9      	str	r1, [r7, #8]
 800e7ac:	607a      	str	r2, [r7, #4]
 800e7ae:	603b      	str	r3, [r7, #0]
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800e7b8:	4b24      	ldr	r3, [pc, #144]	; (800e84c <SD_write+0xa8>)
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800e7be:	f247 5030 	movw	r0, #30000	; 0x7530
 800e7c2:	f7ff ff33 	bl	800e62c <SD_CheckStatusWithTimeout>
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	da01      	bge.n	800e7d0 <SD_write+0x2c>
  {
    return res;
 800e7cc:	7dfb      	ldrb	r3, [r7, #23]
 800e7ce:	e038      	b.n	800e842 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800e7d0:	683a      	ldr	r2, [r7, #0]
 800e7d2:	6879      	ldr	r1, [r7, #4]
 800e7d4:	68b8      	ldr	r0, [r7, #8]
 800e7d6:	f7ff fea3 	bl	800e520 <BSP_SD_WriteBlocks_DMA>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d12f      	bne.n	800e840 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800e7e0:	f7f5 fd64 	bl	80042ac <HAL_GetTick>
 800e7e4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800e7e6:	bf00      	nop
 800e7e8:	4b18      	ldr	r3, [pc, #96]	; (800e84c <SD_write+0xa8>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d108      	bne.n	800e802 <SD_write+0x5e>
 800e7f0:	f7f5 fd5c 	bl	80042ac <HAL_GetTick>
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	693b      	ldr	r3, [r7, #16]
 800e7f8:	1ad3      	subs	r3, r2, r3
 800e7fa:	f247 522f 	movw	r2, #29999	; 0x752f
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d9f2      	bls.n	800e7e8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800e802:	4b12      	ldr	r3, [pc, #72]	; (800e84c <SD_write+0xa8>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d102      	bne.n	800e810 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	75fb      	strb	r3, [r7, #23]
 800e80e:	e017      	b.n	800e840 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800e810:	4b0e      	ldr	r3, [pc, #56]	; (800e84c <SD_write+0xa8>)
 800e812:	2200      	movs	r2, #0
 800e814:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800e816:	f7f5 fd49 	bl	80042ac <HAL_GetTick>
 800e81a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e81c:	e007      	b.n	800e82e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800e81e:	f7ff fe99 	bl	800e554 <BSP_SD_GetCardState>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d102      	bne.n	800e82e <SD_write+0x8a>
          {
            res = RES_OK;
 800e828:	2300      	movs	r3, #0
 800e82a:	75fb      	strb	r3, [r7, #23]
            break;
 800e82c:	e008      	b.n	800e840 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800e82e:	f7f5 fd3d 	bl	80042ac <HAL_GetTick>
 800e832:	4602      	mov	r2, r0
 800e834:	693b      	ldr	r3, [r7, #16]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	f247 522f 	movw	r2, #29999	; 0x752f
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d9ee      	bls.n	800e81e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800e840:	7dfb      	ldrb	r3, [r7, #23]
}
 800e842:	4618      	mov	r0, r3
 800e844:	3718      	adds	r7, #24
 800e846:	46bd      	mov	sp, r7
 800e848:	bd80      	pop	{r7, pc}
 800e84a:	bf00      	nop
 800e84c:	20000424 	.word	0x20000424

0800e850 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b08c      	sub	sp, #48	; 0x30
 800e854:	af00      	add	r7, sp, #0
 800e856:	4603      	mov	r3, r0
 800e858:	603a      	str	r2, [r7, #0]
 800e85a:	71fb      	strb	r3, [r7, #7]
 800e85c:	460b      	mov	r3, r1
 800e85e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800e860:	2301      	movs	r3, #1
 800e862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800e866:	4b25      	ldr	r3, [pc, #148]	; (800e8fc <SD_ioctl+0xac>)
 800e868:	781b      	ldrb	r3, [r3, #0]
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	f003 0301 	and.w	r3, r3, #1
 800e870:	2b00      	cmp	r3, #0
 800e872:	d001      	beq.n	800e878 <SD_ioctl+0x28>
 800e874:	2303      	movs	r3, #3
 800e876:	e03c      	b.n	800e8f2 <SD_ioctl+0xa2>

  switch (cmd)
 800e878:	79bb      	ldrb	r3, [r7, #6]
 800e87a:	2b03      	cmp	r3, #3
 800e87c:	d834      	bhi.n	800e8e8 <SD_ioctl+0x98>
 800e87e:	a201      	add	r2, pc, #4	; (adr r2, 800e884 <SD_ioctl+0x34>)
 800e880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e884:	0800e895 	.word	0x0800e895
 800e888:	0800e89d 	.word	0x0800e89d
 800e88c:	0800e8b5 	.word	0x0800e8b5
 800e890:	0800e8cf 	.word	0x0800e8cf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e89a:	e028      	b.n	800e8ee <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800e89c:	f107 030c 	add.w	r3, r7, #12
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7ff fe67 	bl	800e574 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800e8a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8a8:	683b      	ldr	r3, [r7, #0]
 800e8aa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e8b2:	e01c      	b.n	800e8ee <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e8b4:	f107 030c 	add.w	r3, r7, #12
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff fe5b 	bl	800e574 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c0:	b29a      	uxth	r2, r3
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e8cc:	e00f      	b.n	800e8ee <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800e8ce:	f107 030c 	add.w	r3, r7, #12
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f7ff fe4e 	bl	800e574 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	0a5a      	lsrs	r2, r3, #9
 800e8dc:	683b      	ldr	r3, [r7, #0]
 800e8de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800e8e6:	e002      	b.n	800e8ee <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800e8e8:	2304      	movs	r3, #4
 800e8ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800e8ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3730      	adds	r7, #48	; 0x30
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
 800e8fa:	bf00      	nop
 800e8fc:	2000031d 	.word	0x2000031d

0800e900 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800e900:	b480      	push	{r7}
 800e902:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800e904:	4b03      	ldr	r3, [pc, #12]	; (800e914 <BSP_SD_WriteCpltCallback+0x14>)
 800e906:	2201      	movs	r2, #1
 800e908:	601a      	str	r2, [r3, #0]
}
 800e90a:	bf00      	nop
 800e90c:	46bd      	mov	sp, r7
 800e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e912:	4770      	bx	lr
 800e914:	20000424 	.word	0x20000424

0800e918 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800e918:	b480      	push	{r7}
 800e91a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800e91c:	4b03      	ldr	r3, [pc, #12]	; (800e92c <BSP_SD_ReadCpltCallback+0x14>)
 800e91e:	2201      	movs	r2, #1
 800e920:	601a      	str	r2, [r3, #0]
}
 800e922:	bf00      	nop
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr
 800e92c:	20000428 	.word	0x20000428

0800e930 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b086      	sub	sp, #24
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	4613      	mov	r3, r2
 800e93c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d101      	bne.n	800e948 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e944:	2303      	movs	r3, #3
 800e946:	e01f      	b.n	800e988 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	2200      	movs	r2, #0
 800e954:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2200      	movs	r2, #0
 800e95c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e960:	68bb      	ldr	r3, [r7, #8]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d003      	beq.n	800e96e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	68ba      	ldr	r2, [r7, #8]
 800e96a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	2201      	movs	r2, #1
 800e972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	79fa      	ldrb	r2, [r7, #7]
 800e97a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e97c:	68f8      	ldr	r0, [r7, #12]
 800e97e:	f001 fd31 	bl	80103e4 <USBD_LL_Init>
 800e982:	4603      	mov	r3, r0
 800e984:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e986:	7dfb      	ldrb	r3, [r7, #23]
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3718      	adds	r7, #24
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e990:	b580      	push	{r7, lr}
 800e992:	b084      	sub	sp, #16
 800e994:	af00      	add	r7, sp, #0
 800e996:	6078      	str	r0, [r7, #4]
 800e998:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e99a:	2300      	movs	r3, #0
 800e99c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e99e:	683b      	ldr	r3, [r7, #0]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d101      	bne.n	800e9a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e9a4:	2303      	movs	r3, #3
 800e9a6:	e016      	b.n	800e9d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	683a      	ldr	r2, [r7, #0]
 800e9ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00b      	beq.n	800e9d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9c4:	f107 020e 	add.w	r2, r7, #14
 800e9c8:	4610      	mov	r0, r2
 800e9ca:	4798      	blx	r3
 800e9cc:	4602      	mov	r2, r0
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e9d4:	2300      	movs	r3, #0
}
 800e9d6:	4618      	mov	r0, r3
 800e9d8:	3710      	adds	r7, #16
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	bd80      	pop	{r7, pc}

0800e9de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e9de:	b580      	push	{r7, lr}
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e9e6:	6878      	ldr	r0, [r7, #4]
 800e9e8:	f001 fd4c 	bl	8010484 <USBD_LL_Start>
 800e9ec:	4603      	mov	r3, r0
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3708      	adds	r7, #8
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}

0800e9f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e9f6:	b480      	push	{r7}
 800e9f8:	b083      	sub	sp, #12
 800e9fa:	af00      	add	r7, sp, #0
 800e9fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e9fe:	2300      	movs	r3, #0
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	460b      	mov	r3, r1
 800ea16:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ea18:	2303      	movs	r3, #3
 800ea1a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d009      	beq.n	800ea3a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	78fa      	ldrb	r2, [r7, #3]
 800ea30:	4611      	mov	r1, r2
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	4798      	blx	r3
 800ea36:	4603      	mov	r3, r0
 800ea38:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ea3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3710      	adds	r7, #16
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	460b      	mov	r3, r1
 800ea4e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d007      	beq.n	800ea6a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	78fa      	ldrb	r2, [r7, #3]
 800ea64:	4611      	mov	r1, r2
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	4798      	blx	r3
  }

  return USBD_OK;
 800ea6a:	2300      	movs	r3, #0
}
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	3708      	adds	r7, #8
 800ea70:	46bd      	mov	sp, r7
 800ea72:	bd80      	pop	{r7, pc}

0800ea74 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	b084      	sub	sp, #16
 800ea78:	af00      	add	r7, sp, #0
 800ea7a:	6078      	str	r0, [r7, #4]
 800ea7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ea84:	6839      	ldr	r1, [r7, #0]
 800ea86:	4618      	mov	r0, r3
 800ea88:	f000 ffba 	bl	800fa00 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2201      	movs	r2, #1
 800ea90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eaa8:	f003 031f 	and.w	r3, r3, #31
 800eaac:	2b02      	cmp	r3, #2
 800eaae:	d01a      	beq.n	800eae6 <USBD_LL_SetupStage+0x72>
 800eab0:	2b02      	cmp	r3, #2
 800eab2:	d822      	bhi.n	800eafa <USBD_LL_SetupStage+0x86>
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d002      	beq.n	800eabe <USBD_LL_SetupStage+0x4a>
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d00a      	beq.n	800ead2 <USBD_LL_SetupStage+0x5e>
 800eabc:	e01d      	b.n	800eafa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eac4:	4619      	mov	r1, r3
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 fa62 	bl	800ef90 <USBD_StdDevReq>
 800eacc:	4603      	mov	r3, r0
 800eace:	73fb      	strb	r3, [r7, #15]
      break;
 800ead0:	e020      	b.n	800eb14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ead8:	4619      	mov	r1, r3
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 fac6 	bl	800f06c <USBD_StdItfReq>
 800eae0:	4603      	mov	r3, r0
 800eae2:	73fb      	strb	r3, [r7, #15]
      break;
 800eae4:	e016      	b.n	800eb14 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800eaec:	4619      	mov	r1, r3
 800eaee:	6878      	ldr	r0, [r7, #4]
 800eaf0:	f000 fb05 	bl	800f0fe <USBD_StdEPReq>
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	73fb      	strb	r3, [r7, #15]
      break;
 800eaf8:	e00c      	b.n	800eb14 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800eb00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb04:	b2db      	uxtb	r3, r3
 800eb06:	4619      	mov	r1, r3
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f001 fd1b 	bl	8010544 <USBD_LL_StallEP>
 800eb0e:	4603      	mov	r3, r0
 800eb10:	73fb      	strb	r3, [r7, #15]
      break;
 800eb12:	bf00      	nop
  }

  return ret;
 800eb14:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3710      	adds	r7, #16
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}

0800eb1e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800eb1e:	b580      	push	{r7, lr}
 800eb20:	b086      	sub	sp, #24
 800eb22:	af00      	add	r7, sp, #0
 800eb24:	60f8      	str	r0, [r7, #12]
 800eb26:	460b      	mov	r3, r1
 800eb28:	607a      	str	r2, [r7, #4]
 800eb2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800eb2c:	7afb      	ldrb	r3, [r7, #11]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d138      	bne.n	800eba4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800eb38:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eb40:	2b03      	cmp	r3, #3
 800eb42:	d14a      	bne.n	800ebda <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	689a      	ldr	r2, [r3, #8]
 800eb48:	693b      	ldr	r3, [r7, #16]
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d913      	bls.n	800eb78 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	689a      	ldr	r2, [r3, #8]
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	68db      	ldr	r3, [r3, #12]
 800eb58:	1ad2      	subs	r2, r2, r3
 800eb5a:	693b      	ldr	r3, [r7, #16]
 800eb5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800eb5e:	693b      	ldr	r3, [r7, #16]
 800eb60:	68da      	ldr	r2, [r3, #12]
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	4293      	cmp	r3, r2
 800eb68:	bf28      	it	cs
 800eb6a:	4613      	movcs	r3, r2
 800eb6c:	461a      	mov	r2, r3
 800eb6e:	6879      	ldr	r1, [r7, #4]
 800eb70:	68f8      	ldr	r0, [r7, #12]
 800eb72:	f001 f839 	bl	800fbe8 <USBD_CtlContinueRx>
 800eb76:	e030      	b.n	800ebda <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb7e:	b2db      	uxtb	r3, r3
 800eb80:	2b03      	cmp	r3, #3
 800eb82:	d10b      	bne.n	800eb9c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb8a:	691b      	ldr	r3, [r3, #16]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d005      	beq.n	800eb9c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb96:	691b      	ldr	r3, [r3, #16]
 800eb98:	68f8      	ldr	r0, [r7, #12]
 800eb9a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800eb9c:	68f8      	ldr	r0, [r7, #12]
 800eb9e:	f001 f834 	bl	800fc0a <USBD_CtlSendStatus>
 800eba2:	e01a      	b.n	800ebda <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebaa:	b2db      	uxtb	r3, r3
 800ebac:	2b03      	cmp	r3, #3
 800ebae:	d114      	bne.n	800ebda <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebb6:	699b      	ldr	r3, [r3, #24]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00e      	beq.n	800ebda <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	7afa      	ldrb	r2, [r7, #11]
 800ebc6:	4611      	mov	r1, r2
 800ebc8:	68f8      	ldr	r0, [r7, #12]
 800ebca:	4798      	blx	r3
 800ebcc:	4603      	mov	r3, r0
 800ebce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ebd0:	7dfb      	ldrb	r3, [r7, #23]
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d001      	beq.n	800ebda <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	e000      	b.n	800ebdc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ebda:	2300      	movs	r3, #0
}
 800ebdc:	4618      	mov	r0, r3
 800ebde:	3718      	adds	r7, #24
 800ebe0:	46bd      	mov	sp, r7
 800ebe2:	bd80      	pop	{r7, pc}

0800ebe4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ebe4:	b580      	push	{r7, lr}
 800ebe6:	b086      	sub	sp, #24
 800ebe8:	af00      	add	r7, sp, #0
 800ebea:	60f8      	str	r0, [r7, #12]
 800ebec:	460b      	mov	r3, r1
 800ebee:	607a      	str	r2, [r7, #4]
 800ebf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ebf2:	7afb      	ldrb	r3, [r7, #11]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d16b      	bne.n	800ecd0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	3314      	adds	r3, #20
 800ebfc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d156      	bne.n	800ecb6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ec08:	693b      	ldr	r3, [r7, #16]
 800ec0a:	689a      	ldr	r2, [r3, #8]
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	68db      	ldr	r3, [r3, #12]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d914      	bls.n	800ec3e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	693b      	ldr	r3, [r7, #16]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	1ad2      	subs	r2, r2, r3
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ec22:	693b      	ldr	r3, [r7, #16]
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	461a      	mov	r2, r3
 800ec28:	6879      	ldr	r1, [r7, #4]
 800ec2a:	68f8      	ldr	r0, [r7, #12]
 800ec2c:	f000 ffae 	bl	800fb8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec30:	2300      	movs	r3, #0
 800ec32:	2200      	movs	r2, #0
 800ec34:	2100      	movs	r1, #0
 800ec36:	68f8      	ldr	r0, [r7, #12]
 800ec38:	f001 fd2e 	bl	8010698 <USBD_LL_PrepareReceive>
 800ec3c:	e03b      	b.n	800ecb6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ec3e:	693b      	ldr	r3, [r7, #16]
 800ec40:	68da      	ldr	r2, [r3, #12]
 800ec42:	693b      	ldr	r3, [r7, #16]
 800ec44:	689b      	ldr	r3, [r3, #8]
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d11c      	bne.n	800ec84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ec4a:	693b      	ldr	r3, [r7, #16]
 800ec4c:	685a      	ldr	r2, [r3, #4]
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d316      	bcc.n	800ec84 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ec56:	693b      	ldr	r3, [r7, #16]
 800ec58:	685a      	ldr	r2, [r3, #4]
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d20f      	bcs.n	800ec84 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ec64:	2200      	movs	r2, #0
 800ec66:	2100      	movs	r1, #0
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f000 ff8f 	bl	800fb8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ec76:	2300      	movs	r3, #0
 800ec78:	2200      	movs	r2, #0
 800ec7a:	2100      	movs	r1, #0
 800ec7c:	68f8      	ldr	r0, [r7, #12]
 800ec7e:	f001 fd0b 	bl	8010698 <USBD_LL_PrepareReceive>
 800ec82:	e018      	b.n	800ecb6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec8a:	b2db      	uxtb	r3, r3
 800ec8c:	2b03      	cmp	r3, #3
 800ec8e:	d10b      	bne.n	800eca8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec96:	68db      	ldr	r3, [r3, #12]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d005      	beq.n	800eca8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eca2:	68db      	ldr	r3, [r3, #12]
 800eca4:	68f8      	ldr	r0, [r7, #12]
 800eca6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eca8:	2180      	movs	r1, #128	; 0x80
 800ecaa:	68f8      	ldr	r0, [r7, #12]
 800ecac:	f001 fc4a 	bl	8010544 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f000 ffbd 	bl	800fc30 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ecbc:	2b01      	cmp	r3, #1
 800ecbe:	d122      	bne.n	800ed06 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ecc0:	68f8      	ldr	r0, [r7, #12]
 800ecc2:	f7ff fe98 	bl	800e9f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ecce:	e01a      	b.n	800ed06 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecd6:	b2db      	uxtb	r3, r3
 800ecd8:	2b03      	cmp	r3, #3
 800ecda:	d114      	bne.n	800ed06 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ece2:	695b      	ldr	r3, [r3, #20]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00e      	beq.n	800ed06 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecee:	695b      	ldr	r3, [r3, #20]
 800ecf0:	7afa      	ldrb	r2, [r7, #11]
 800ecf2:	4611      	mov	r1, r2
 800ecf4:	68f8      	ldr	r0, [r7, #12]
 800ecf6:	4798      	blx	r3
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ecfc:	7dfb      	ldrb	r3, [r7, #23]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d001      	beq.n	800ed06 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	e000      	b.n	800ed08 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ed06:	2300      	movs	r3, #0
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3718      	adds	r7, #24
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2201      	movs	r2, #1
 800ed1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	2200      	movs	r2, #0
 800ed24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	2200      	movs	r2, #0
 800ed32:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d101      	bne.n	800ed44 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ed40:	2303      	movs	r3, #3
 800ed42:	e02f      	b.n	800eda4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00f      	beq.n	800ed6e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed54:	685b      	ldr	r3, [r3, #4]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d009      	beq.n	800ed6e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	6852      	ldr	r2, [r2, #4]
 800ed66:	b2d2      	uxtb	r2, r2
 800ed68:	4611      	mov	r1, r2
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed6e:	2340      	movs	r3, #64	; 0x40
 800ed70:	2200      	movs	r2, #0
 800ed72:	2100      	movs	r1, #0
 800ed74:	6878      	ldr	r0, [r7, #4]
 800ed76:	f001 fba0 	bl	80104ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	2201      	movs	r2, #1
 800ed7e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2240      	movs	r2, #64	; 0x40
 800ed86:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ed8a:	2340      	movs	r3, #64	; 0x40
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	2180      	movs	r1, #128	; 0x80
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f001 fb92 	bl	80104ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2240      	movs	r2, #64	; 0x40
 800eda0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eda2:	2300      	movs	r3, #0
}
 800eda4:	4618      	mov	r0, r3
 800eda6:	3708      	adds	r7, #8
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}

0800edac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	460b      	mov	r3, r1
 800edb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	78fa      	ldrb	r2, [r7, #3]
 800edbc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800edbe:	2300      	movs	r3, #0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	370c      	adds	r7, #12
 800edc4:	46bd      	mov	sp, r7
 800edc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edca:	4770      	bx	lr

0800edcc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edda:	b2da      	uxtb	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2204      	movs	r2, #4
 800ede6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800edea:	2300      	movs	r3, #0
}
 800edec:	4618      	mov	r0, r3
 800edee:	370c      	adds	r7, #12
 800edf0:	46bd      	mov	sp, r7
 800edf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf6:	4770      	bx	lr

0800edf8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b083      	sub	sp, #12
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee06:	b2db      	uxtb	r3, r3
 800ee08:	2b04      	cmp	r3, #4
 800ee0a:	d106      	bne.n	800ee1a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ee12:	b2da      	uxtb	r2, r3
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	370c      	adds	r7, #12
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d101      	bne.n	800ee3e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ee3a:	2303      	movs	r3, #3
 800ee3c:	e012      	b.n	800ee64 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	2b03      	cmp	r3, #3
 800ee48:	d10b      	bne.n	800ee62 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee50:	69db      	ldr	r3, [r3, #28]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d005      	beq.n	800ee62 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee5c:	69db      	ldr	r3, [r3, #28]
 800ee5e:	6878      	ldr	r0, [r7, #4]
 800ee60:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee62:	2300      	movs	r3, #0
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3708      	adds	r7, #8
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	460b      	mov	r3, r1
 800ee76:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d101      	bne.n	800ee86 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800ee82:	2303      	movs	r3, #3
 800ee84:	e014      	b.n	800eeb0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee8c:	b2db      	uxtb	r3, r3
 800ee8e:	2b03      	cmp	r3, #3
 800ee90:	d10d      	bne.n	800eeae <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee98:	6a1b      	ldr	r3, [r3, #32]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d007      	beq.n	800eeae <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eea4:	6a1b      	ldr	r3, [r3, #32]
 800eea6:	78fa      	ldrb	r2, [r7, #3]
 800eea8:	4611      	mov	r1, r2
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eeae:	2300      	movs	r3, #0
}
 800eeb0:	4618      	mov	r0, r3
 800eeb2:	3708      	adds	r7, #8
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	bd80      	pop	{r7, pc}

0800eeb8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
 800eec0:	460b      	mov	r3, r1
 800eec2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d101      	bne.n	800eed2 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800eece:	2303      	movs	r3, #3
 800eed0:	e014      	b.n	800eefc <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	2b03      	cmp	r3, #3
 800eedc:	d10d      	bne.n	800eefa <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d007      	beq.n	800eefa <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef2:	78fa      	ldrb	r2, [r7, #3]
 800eef4:	4611      	mov	r1, r2
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ef04:	b480      	push	{r7}
 800ef06:	b083      	sub	sp, #12
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ef0c:	2300      	movs	r3, #0
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr

0800ef1a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ef1a:	b580      	push	{r7, lr}
 800ef1c:	b082      	sub	sp, #8
 800ef1e:	af00      	add	r7, sp, #0
 800ef20:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2201      	movs	r2, #1
 800ef26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d009      	beq.n	800ef48 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	687a      	ldr	r2, [r7, #4]
 800ef3e:	6852      	ldr	r2, [r2, #4]
 800ef40:	b2d2      	uxtb	r2, r2
 800ef42:	4611      	mov	r1, r2
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	4798      	blx	r3
  }

  return USBD_OK;
 800ef48:	2300      	movs	r3, #0
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef52:	b480      	push	{r7}
 800ef54:	b087      	sub	sp, #28
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	781b      	ldrb	r3, [r3, #0]
 800ef62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	3301      	adds	r3, #1
 800ef68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ef70:	8a3b      	ldrh	r3, [r7, #16]
 800ef72:	021b      	lsls	r3, r3, #8
 800ef74:	b21a      	sxth	r2, r3
 800ef76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef7a:	4313      	orrs	r3, r2
 800ef7c:	b21b      	sxth	r3, r3
 800ef7e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ef80:	89fb      	ldrh	r3, [r7, #14]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	371c      	adds	r7, #28
 800ef86:	46bd      	mov	sp, r7
 800ef88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8c:	4770      	bx	lr
	...

0800ef90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef9a:	2300      	movs	r3, #0
 800ef9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800efa6:	2b40      	cmp	r3, #64	; 0x40
 800efa8:	d005      	beq.n	800efb6 <USBD_StdDevReq+0x26>
 800efaa:	2b40      	cmp	r3, #64	; 0x40
 800efac:	d853      	bhi.n	800f056 <USBD_StdDevReq+0xc6>
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d00b      	beq.n	800efca <USBD_StdDevReq+0x3a>
 800efb2:	2b20      	cmp	r3, #32
 800efb4:	d14f      	bne.n	800f056 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800efbc:	689b      	ldr	r3, [r3, #8]
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	4798      	blx	r3
 800efc4:	4603      	mov	r3, r0
 800efc6:	73fb      	strb	r3, [r7, #15]
      break;
 800efc8:	e04a      	b.n	800f060 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	785b      	ldrb	r3, [r3, #1]
 800efce:	2b09      	cmp	r3, #9
 800efd0:	d83b      	bhi.n	800f04a <USBD_StdDevReq+0xba>
 800efd2:	a201      	add	r2, pc, #4	; (adr r2, 800efd8 <USBD_StdDevReq+0x48>)
 800efd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efd8:	0800f02d 	.word	0x0800f02d
 800efdc:	0800f041 	.word	0x0800f041
 800efe0:	0800f04b 	.word	0x0800f04b
 800efe4:	0800f037 	.word	0x0800f037
 800efe8:	0800f04b 	.word	0x0800f04b
 800efec:	0800f00b 	.word	0x0800f00b
 800eff0:	0800f001 	.word	0x0800f001
 800eff4:	0800f04b 	.word	0x0800f04b
 800eff8:	0800f023 	.word	0x0800f023
 800effc:	0800f015 	.word	0x0800f015
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f000:	6839      	ldr	r1, [r7, #0]
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 f9de 	bl	800f3c4 <USBD_GetDescriptor>
          break;
 800f008:	e024      	b.n	800f054 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f00a:	6839      	ldr	r1, [r7, #0]
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 fb6d 	bl	800f6ec <USBD_SetAddress>
          break;
 800f012:	e01f      	b.n	800f054 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f014:	6839      	ldr	r1, [r7, #0]
 800f016:	6878      	ldr	r0, [r7, #4]
 800f018:	f000 fbac 	bl	800f774 <USBD_SetConfig>
 800f01c:	4603      	mov	r3, r0
 800f01e:	73fb      	strb	r3, [r7, #15]
          break;
 800f020:	e018      	b.n	800f054 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f022:	6839      	ldr	r1, [r7, #0]
 800f024:	6878      	ldr	r0, [r7, #4]
 800f026:	f000 fc4b 	bl	800f8c0 <USBD_GetConfig>
          break;
 800f02a:	e013      	b.n	800f054 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 fc7c 	bl	800f92c <USBD_GetStatus>
          break;
 800f034:	e00e      	b.n	800f054 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f036:	6839      	ldr	r1, [r7, #0]
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f000 fcab 	bl	800f994 <USBD_SetFeature>
          break;
 800f03e:	e009      	b.n	800f054 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f040:	6839      	ldr	r1, [r7, #0]
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 fcba 	bl	800f9bc <USBD_ClrFeature>
          break;
 800f048:	e004      	b.n	800f054 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800f04a:	6839      	ldr	r1, [r7, #0]
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f000 fd11 	bl	800fa74 <USBD_CtlError>
          break;
 800f052:	bf00      	nop
      }
      break;
 800f054:	e004      	b.n	800f060 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800f056:	6839      	ldr	r1, [r7, #0]
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 fd0b 	bl	800fa74 <USBD_CtlError>
      break;
 800f05e:	bf00      	nop
  }

  return ret;
 800f060:	7bfb      	ldrb	r3, [r7, #15]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3710      	adds	r7, #16
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop

0800f06c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b084      	sub	sp, #16
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f076:	2300      	movs	r3, #0
 800f078:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f07a:	683b      	ldr	r3, [r7, #0]
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f082:	2b40      	cmp	r3, #64	; 0x40
 800f084:	d005      	beq.n	800f092 <USBD_StdItfReq+0x26>
 800f086:	2b40      	cmp	r3, #64	; 0x40
 800f088:	d82f      	bhi.n	800f0ea <USBD_StdItfReq+0x7e>
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d001      	beq.n	800f092 <USBD_StdItfReq+0x26>
 800f08e:	2b20      	cmp	r3, #32
 800f090:	d12b      	bne.n	800f0ea <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f098:	b2db      	uxtb	r3, r3
 800f09a:	3b01      	subs	r3, #1
 800f09c:	2b02      	cmp	r3, #2
 800f09e:	d81d      	bhi.n	800f0dc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	889b      	ldrh	r3, [r3, #4]
 800f0a4:	b2db      	uxtb	r3, r3
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d813      	bhi.n	800f0d2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0b0:	689b      	ldr	r3, [r3, #8]
 800f0b2:	6839      	ldr	r1, [r7, #0]
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	4798      	blx	r3
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	88db      	ldrh	r3, [r3, #6]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d110      	bne.n	800f0e6 <USBD_StdItfReq+0x7a>
 800f0c4:	7bfb      	ldrb	r3, [r7, #15]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10d      	bne.n	800f0e6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 fd9d 	bl	800fc0a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f0d0:	e009      	b.n	800f0e6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 fccd 	bl	800fa74 <USBD_CtlError>
          break;
 800f0da:	e004      	b.n	800f0e6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800f0dc:	6839      	ldr	r1, [r7, #0]
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 fcc8 	bl	800fa74 <USBD_CtlError>
          break;
 800f0e4:	e000      	b.n	800f0e8 <USBD_StdItfReq+0x7c>
          break;
 800f0e6:	bf00      	nop
      }
      break;
 800f0e8:	e004      	b.n	800f0f4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800f0ea:	6839      	ldr	r1, [r7, #0]
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 fcc1 	bl	800fa74 <USBD_CtlError>
      break;
 800f0f2:	bf00      	nop
  }

  return ret;
 800f0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3710      	adds	r7, #16
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	bd80      	pop	{r7, pc}

0800f0fe <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b084      	sub	sp, #16
 800f102:	af00      	add	r7, sp, #0
 800f104:	6078      	str	r0, [r7, #4]
 800f106:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800f108:	2300      	movs	r3, #0
 800f10a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	889b      	ldrh	r3, [r3, #4]
 800f110:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f11a:	2b40      	cmp	r3, #64	; 0x40
 800f11c:	d007      	beq.n	800f12e <USBD_StdEPReq+0x30>
 800f11e:	2b40      	cmp	r3, #64	; 0x40
 800f120:	f200 8145 	bhi.w	800f3ae <USBD_StdEPReq+0x2b0>
 800f124:	2b00      	cmp	r3, #0
 800f126:	d00c      	beq.n	800f142 <USBD_StdEPReq+0x44>
 800f128:	2b20      	cmp	r3, #32
 800f12a:	f040 8140 	bne.w	800f3ae <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	6839      	ldr	r1, [r7, #0]
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	4798      	blx	r3
 800f13c:	4603      	mov	r3, r0
 800f13e:	73fb      	strb	r3, [r7, #15]
      break;
 800f140:	e13a      	b.n	800f3b8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	785b      	ldrb	r3, [r3, #1]
 800f146:	2b03      	cmp	r3, #3
 800f148:	d007      	beq.n	800f15a <USBD_StdEPReq+0x5c>
 800f14a:	2b03      	cmp	r3, #3
 800f14c:	f300 8129 	bgt.w	800f3a2 <USBD_StdEPReq+0x2a4>
 800f150:	2b00      	cmp	r3, #0
 800f152:	d07f      	beq.n	800f254 <USBD_StdEPReq+0x156>
 800f154:	2b01      	cmp	r3, #1
 800f156:	d03c      	beq.n	800f1d2 <USBD_StdEPReq+0xd4>
 800f158:	e123      	b.n	800f3a2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f160:	b2db      	uxtb	r3, r3
 800f162:	2b02      	cmp	r3, #2
 800f164:	d002      	beq.n	800f16c <USBD_StdEPReq+0x6e>
 800f166:	2b03      	cmp	r3, #3
 800f168:	d016      	beq.n	800f198 <USBD_StdEPReq+0x9a>
 800f16a:	e02c      	b.n	800f1c6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f16c:	7bbb      	ldrb	r3, [r7, #14]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00d      	beq.n	800f18e <USBD_StdEPReq+0x90>
 800f172:	7bbb      	ldrb	r3, [r7, #14]
 800f174:	2b80      	cmp	r3, #128	; 0x80
 800f176:	d00a      	beq.n	800f18e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f178:	7bbb      	ldrb	r3, [r7, #14]
 800f17a:	4619      	mov	r1, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f001 f9e1 	bl	8010544 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f182:	2180      	movs	r1, #128	; 0x80
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f001 f9dd 	bl	8010544 <USBD_LL_StallEP>
 800f18a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f18c:	e020      	b.n	800f1d0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800f18e:	6839      	ldr	r1, [r7, #0]
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f000 fc6f 	bl	800fa74 <USBD_CtlError>
              break;
 800f196:	e01b      	b.n	800f1d0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	885b      	ldrh	r3, [r3, #2]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d10e      	bne.n	800f1be <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f1a0:	7bbb      	ldrb	r3, [r7, #14]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d00b      	beq.n	800f1be <USBD_StdEPReq+0xc0>
 800f1a6:	7bbb      	ldrb	r3, [r7, #14]
 800f1a8:	2b80      	cmp	r3, #128	; 0x80
 800f1aa:	d008      	beq.n	800f1be <USBD_StdEPReq+0xc0>
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	88db      	ldrh	r3, [r3, #6]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d104      	bne.n	800f1be <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1b4:	7bbb      	ldrb	r3, [r7, #14]
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f001 f9c3 	bl	8010544 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 fd23 	bl	800fc0a <USBD_CtlSendStatus>

              break;
 800f1c4:	e004      	b.n	800f1d0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 fc53 	bl	800fa74 <USBD_CtlError>
              break;
 800f1ce:	bf00      	nop
          }
          break;
 800f1d0:	e0ec      	b.n	800f3ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b02      	cmp	r3, #2
 800f1dc:	d002      	beq.n	800f1e4 <USBD_StdEPReq+0xe6>
 800f1de:	2b03      	cmp	r3, #3
 800f1e0:	d016      	beq.n	800f210 <USBD_StdEPReq+0x112>
 800f1e2:	e030      	b.n	800f246 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1e4:	7bbb      	ldrb	r3, [r7, #14]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d00d      	beq.n	800f206 <USBD_StdEPReq+0x108>
 800f1ea:	7bbb      	ldrb	r3, [r7, #14]
 800f1ec:	2b80      	cmp	r3, #128	; 0x80
 800f1ee:	d00a      	beq.n	800f206 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1f0:	7bbb      	ldrb	r3, [r7, #14]
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f001 f9a5 	bl	8010544 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f1fa:	2180      	movs	r1, #128	; 0x80
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f001 f9a1 	bl	8010544 <USBD_LL_StallEP>
 800f202:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f204:	e025      	b.n	800f252 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800f206:	6839      	ldr	r1, [r7, #0]
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 fc33 	bl	800fa74 <USBD_CtlError>
              break;
 800f20e:	e020      	b.n	800f252 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	885b      	ldrh	r3, [r3, #2]
 800f214:	2b00      	cmp	r3, #0
 800f216:	d11b      	bne.n	800f250 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f218:	7bbb      	ldrb	r3, [r7, #14]
 800f21a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d004      	beq.n	800f22c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f222:	7bbb      	ldrb	r3, [r7, #14]
 800f224:	4619      	mov	r1, r3
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f001 f9ab 	bl	8010582 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f000 fcec 	bl	800fc0a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f238:	689b      	ldr	r3, [r3, #8]
 800f23a:	6839      	ldr	r1, [r7, #0]
 800f23c:	6878      	ldr	r0, [r7, #4]
 800f23e:	4798      	blx	r3
 800f240:	4603      	mov	r3, r0
 800f242:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800f244:	e004      	b.n	800f250 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800f246:	6839      	ldr	r1, [r7, #0]
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fc13 	bl	800fa74 <USBD_CtlError>
              break;
 800f24e:	e000      	b.n	800f252 <USBD_StdEPReq+0x154>
              break;
 800f250:	bf00      	nop
          }
          break;
 800f252:	e0ab      	b.n	800f3ac <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f25a:	b2db      	uxtb	r3, r3
 800f25c:	2b02      	cmp	r3, #2
 800f25e:	d002      	beq.n	800f266 <USBD_StdEPReq+0x168>
 800f260:	2b03      	cmp	r3, #3
 800f262:	d032      	beq.n	800f2ca <USBD_StdEPReq+0x1cc>
 800f264:	e097      	b.n	800f396 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f266:	7bbb      	ldrb	r3, [r7, #14]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d007      	beq.n	800f27c <USBD_StdEPReq+0x17e>
 800f26c:	7bbb      	ldrb	r3, [r7, #14]
 800f26e:	2b80      	cmp	r3, #128	; 0x80
 800f270:	d004      	beq.n	800f27c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800f272:	6839      	ldr	r1, [r7, #0]
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f000 fbfd 	bl	800fa74 <USBD_CtlError>
                break;
 800f27a:	e091      	b.n	800f3a0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f27c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f280:	2b00      	cmp	r3, #0
 800f282:	da0b      	bge.n	800f29c <USBD_StdEPReq+0x19e>
 800f284:	7bbb      	ldrb	r3, [r7, #14]
 800f286:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f28a:	4613      	mov	r3, r2
 800f28c:	009b      	lsls	r3, r3, #2
 800f28e:	4413      	add	r3, r2
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	3310      	adds	r3, #16
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	4413      	add	r3, r2
 800f298:	3304      	adds	r3, #4
 800f29a:	e00b      	b.n	800f2b4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f29c:	7bbb      	ldrb	r3, [r7, #14]
 800f29e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	4413      	add	r3, r2
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	4413      	add	r3, r2
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f2b6:	68bb      	ldr	r3, [r7, #8]
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	2202      	movs	r2, #2
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	6878      	ldr	r0, [r7, #4]
 800f2c4:	f000 fc47 	bl	800fb56 <USBD_CtlSendData>
              break;
 800f2c8:	e06a      	b.n	800f3a0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f2ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	da11      	bge.n	800f2f6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f2d2:	7bbb      	ldrb	r3, [r7, #14]
 800f2d4:	f003 020f 	and.w	r2, r3, #15
 800f2d8:	6879      	ldr	r1, [r7, #4]
 800f2da:	4613      	mov	r3, r2
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	4413      	add	r3, r2
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	3324      	adds	r3, #36	; 0x24
 800f2e6:	881b      	ldrh	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d117      	bne.n	800f31c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f2ec:	6839      	ldr	r1, [r7, #0]
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f000 fbc0 	bl	800fa74 <USBD_CtlError>
                  break;
 800f2f4:	e054      	b.n	800f3a0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f2f6:	7bbb      	ldrb	r3, [r7, #14]
 800f2f8:	f003 020f 	and.w	r2, r3, #15
 800f2fc:	6879      	ldr	r1, [r7, #4]
 800f2fe:	4613      	mov	r3, r2
 800f300:	009b      	lsls	r3, r3, #2
 800f302:	4413      	add	r3, r2
 800f304:	009b      	lsls	r3, r3, #2
 800f306:	440b      	add	r3, r1
 800f308:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f30c:	881b      	ldrh	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d104      	bne.n	800f31c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800f312:	6839      	ldr	r1, [r7, #0]
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f000 fbad 	bl	800fa74 <USBD_CtlError>
                  break;
 800f31a:	e041      	b.n	800f3a0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f31c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f320:	2b00      	cmp	r3, #0
 800f322:	da0b      	bge.n	800f33c <USBD_StdEPReq+0x23e>
 800f324:	7bbb      	ldrb	r3, [r7, #14]
 800f326:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f32a:	4613      	mov	r3, r2
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	4413      	add	r3, r2
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	3310      	adds	r3, #16
 800f334:	687a      	ldr	r2, [r7, #4]
 800f336:	4413      	add	r3, r2
 800f338:	3304      	adds	r3, #4
 800f33a:	e00b      	b.n	800f354 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f33c:	7bbb      	ldrb	r3, [r7, #14]
 800f33e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f342:	4613      	mov	r3, r2
 800f344:	009b      	lsls	r3, r3, #2
 800f346:	4413      	add	r3, r2
 800f348:	009b      	lsls	r3, r3, #2
 800f34a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f34e:	687a      	ldr	r2, [r7, #4]
 800f350:	4413      	add	r3, r2
 800f352:	3304      	adds	r3, #4
 800f354:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f356:	7bbb      	ldrb	r3, [r7, #14]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d002      	beq.n	800f362 <USBD_StdEPReq+0x264>
 800f35c:	7bbb      	ldrb	r3, [r7, #14]
 800f35e:	2b80      	cmp	r3, #128	; 0x80
 800f360:	d103      	bne.n	800f36a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	2200      	movs	r2, #0
 800f366:	601a      	str	r2, [r3, #0]
 800f368:	e00e      	b.n	800f388 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f36a:	7bbb      	ldrb	r3, [r7, #14]
 800f36c:	4619      	mov	r1, r3
 800f36e:	6878      	ldr	r0, [r7, #4]
 800f370:	f001 f926 	bl	80105c0 <USBD_LL_IsStallEP>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d003      	beq.n	800f382 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	2201      	movs	r2, #1
 800f37e:	601a      	str	r2, [r3, #0]
 800f380:	e002      	b.n	800f388 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800f382:	68bb      	ldr	r3, [r7, #8]
 800f384:	2200      	movs	r2, #0
 800f386:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	2202      	movs	r2, #2
 800f38c:	4619      	mov	r1, r3
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 fbe1 	bl	800fb56 <USBD_CtlSendData>
              break;
 800f394:	e004      	b.n	800f3a0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 fb6b 	bl	800fa74 <USBD_CtlError>
              break;
 800f39e:	bf00      	nop
          }
          break;
 800f3a0:	e004      	b.n	800f3ac <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800f3a2:	6839      	ldr	r1, [r7, #0]
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 fb65 	bl	800fa74 <USBD_CtlError>
          break;
 800f3aa:	bf00      	nop
      }
      break;
 800f3ac:	e004      	b.n	800f3b8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800f3ae:	6839      	ldr	r1, [r7, #0]
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 fb5f 	bl	800fa74 <USBD_CtlError>
      break;
 800f3b6:	bf00      	nop
  }

  return ret;
 800f3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
	...

0800f3c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b084      	sub	sp, #16
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	885b      	ldrh	r3, [r3, #2]
 800f3de:	0a1b      	lsrs	r3, r3, #8
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	3b01      	subs	r3, #1
 800f3e4:	2b0e      	cmp	r3, #14
 800f3e6:	f200 8152 	bhi.w	800f68e <USBD_GetDescriptor+0x2ca>
 800f3ea:	a201      	add	r2, pc, #4	; (adr r2, 800f3f0 <USBD_GetDescriptor+0x2c>)
 800f3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f0:	0800f461 	.word	0x0800f461
 800f3f4:	0800f479 	.word	0x0800f479
 800f3f8:	0800f4b9 	.word	0x0800f4b9
 800f3fc:	0800f68f 	.word	0x0800f68f
 800f400:	0800f68f 	.word	0x0800f68f
 800f404:	0800f62f 	.word	0x0800f62f
 800f408:	0800f65b 	.word	0x0800f65b
 800f40c:	0800f68f 	.word	0x0800f68f
 800f410:	0800f68f 	.word	0x0800f68f
 800f414:	0800f68f 	.word	0x0800f68f
 800f418:	0800f68f 	.word	0x0800f68f
 800f41c:	0800f68f 	.word	0x0800f68f
 800f420:	0800f68f 	.word	0x0800f68f
 800f424:	0800f68f 	.word	0x0800f68f
 800f428:	0800f42d 	.word	0x0800f42d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f432:	69db      	ldr	r3, [r3, #28]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d00b      	beq.n	800f450 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f43e:	69db      	ldr	r3, [r3, #28]
 800f440:	687a      	ldr	r2, [r7, #4]
 800f442:	7c12      	ldrb	r2, [r2, #16]
 800f444:	f107 0108 	add.w	r1, r7, #8
 800f448:	4610      	mov	r0, r2
 800f44a:	4798      	blx	r3
 800f44c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f44e:	e126      	b.n	800f69e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f450:	6839      	ldr	r1, [r7, #0]
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f000 fb0e 	bl	800fa74 <USBD_CtlError>
        err++;
 800f458:	7afb      	ldrb	r3, [r7, #11]
 800f45a:	3301      	adds	r3, #1
 800f45c:	72fb      	strb	r3, [r7, #11]
      break;
 800f45e:	e11e      	b.n	800f69e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	687a      	ldr	r2, [r7, #4]
 800f46a:	7c12      	ldrb	r2, [r2, #16]
 800f46c:	f107 0108 	add.w	r1, r7, #8
 800f470:	4610      	mov	r0, r2
 800f472:	4798      	blx	r3
 800f474:	60f8      	str	r0, [r7, #12]
      break;
 800f476:	e112      	b.n	800f69e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	7c1b      	ldrb	r3, [r3, #16]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d10d      	bne.n	800f49c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f488:	f107 0208 	add.w	r2, r7, #8
 800f48c:	4610      	mov	r0, r2
 800f48e:	4798      	blx	r3
 800f490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	3301      	adds	r3, #1
 800f496:	2202      	movs	r2, #2
 800f498:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f49a:	e100      	b.n	800f69e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a4:	f107 0208 	add.w	r2, r7, #8
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	4798      	blx	r3
 800f4ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	2202      	movs	r2, #2
 800f4b4:	701a      	strb	r2, [r3, #0]
      break;
 800f4b6:	e0f2      	b.n	800f69e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	885b      	ldrh	r3, [r3, #2]
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	2b05      	cmp	r3, #5
 800f4c0:	f200 80ac 	bhi.w	800f61c <USBD_GetDescriptor+0x258>
 800f4c4:	a201      	add	r2, pc, #4	; (adr r2, 800f4cc <USBD_GetDescriptor+0x108>)
 800f4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4ca:	bf00      	nop
 800f4cc:	0800f4e5 	.word	0x0800f4e5
 800f4d0:	0800f519 	.word	0x0800f519
 800f4d4:	0800f54d 	.word	0x0800f54d
 800f4d8:	0800f581 	.word	0x0800f581
 800f4dc:	0800f5b5 	.word	0x0800f5b5
 800f4e0:	0800f5e9 	.word	0x0800f5e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4ea:	685b      	ldr	r3, [r3, #4]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d00b      	beq.n	800f508 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4f6:	685b      	ldr	r3, [r3, #4]
 800f4f8:	687a      	ldr	r2, [r7, #4]
 800f4fa:	7c12      	ldrb	r2, [r2, #16]
 800f4fc:	f107 0108 	add.w	r1, r7, #8
 800f500:	4610      	mov	r0, r2
 800f502:	4798      	blx	r3
 800f504:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f506:	e091      	b.n	800f62c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f508:	6839      	ldr	r1, [r7, #0]
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f000 fab2 	bl	800fa74 <USBD_CtlError>
            err++;
 800f510:	7afb      	ldrb	r3, [r7, #11]
 800f512:	3301      	adds	r3, #1
 800f514:	72fb      	strb	r3, [r7, #11]
          break;
 800f516:	e089      	b.n	800f62c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f51e:	689b      	ldr	r3, [r3, #8]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00b      	beq.n	800f53c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f52a:	689b      	ldr	r3, [r3, #8]
 800f52c:	687a      	ldr	r2, [r7, #4]
 800f52e:	7c12      	ldrb	r2, [r2, #16]
 800f530:	f107 0108 	add.w	r1, r7, #8
 800f534:	4610      	mov	r0, r2
 800f536:	4798      	blx	r3
 800f538:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f53a:	e077      	b.n	800f62c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f53c:	6839      	ldr	r1, [r7, #0]
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 fa98 	bl	800fa74 <USBD_CtlError>
            err++;
 800f544:	7afb      	ldrb	r3, [r7, #11]
 800f546:	3301      	adds	r3, #1
 800f548:	72fb      	strb	r3, [r7, #11]
          break;
 800f54a:	e06f      	b.n	800f62c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00b      	beq.n	800f570 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	7c12      	ldrb	r2, [r2, #16]
 800f564:	f107 0108 	add.w	r1, r7, #8
 800f568:	4610      	mov	r0, r2
 800f56a:	4798      	blx	r3
 800f56c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f56e:	e05d      	b.n	800f62c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f570:	6839      	ldr	r1, [r7, #0]
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f000 fa7e 	bl	800fa74 <USBD_CtlError>
            err++;
 800f578:	7afb      	ldrb	r3, [r7, #11]
 800f57a:	3301      	adds	r3, #1
 800f57c:	72fb      	strb	r3, [r7, #11]
          break;
 800f57e:	e055      	b.n	800f62c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f586:	691b      	ldr	r3, [r3, #16]
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d00b      	beq.n	800f5a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f592:	691b      	ldr	r3, [r3, #16]
 800f594:	687a      	ldr	r2, [r7, #4]
 800f596:	7c12      	ldrb	r2, [r2, #16]
 800f598:	f107 0108 	add.w	r1, r7, #8
 800f59c:	4610      	mov	r0, r2
 800f59e:	4798      	blx	r3
 800f5a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5a2:	e043      	b.n	800f62c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5a4:	6839      	ldr	r1, [r7, #0]
 800f5a6:	6878      	ldr	r0, [r7, #4]
 800f5a8:	f000 fa64 	bl	800fa74 <USBD_CtlError>
            err++;
 800f5ac:	7afb      	ldrb	r3, [r7, #11]
 800f5ae:	3301      	adds	r3, #1
 800f5b0:	72fb      	strb	r3, [r7, #11]
          break;
 800f5b2:	e03b      	b.n	800f62c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5ba:	695b      	ldr	r3, [r3, #20]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00b      	beq.n	800f5d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5c6:	695b      	ldr	r3, [r3, #20]
 800f5c8:	687a      	ldr	r2, [r7, #4]
 800f5ca:	7c12      	ldrb	r2, [r2, #16]
 800f5cc:	f107 0108 	add.w	r1, r7, #8
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	4798      	blx	r3
 800f5d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5d6:	e029      	b.n	800f62c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5d8:	6839      	ldr	r1, [r7, #0]
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 fa4a 	bl	800fa74 <USBD_CtlError>
            err++;
 800f5e0:	7afb      	ldrb	r3, [r7, #11]
 800f5e2:	3301      	adds	r3, #1
 800f5e4:	72fb      	strb	r3, [r7, #11]
          break;
 800f5e6:	e021      	b.n	800f62c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5ee:	699b      	ldr	r3, [r3, #24]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00b      	beq.n	800f60c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5fa:	699b      	ldr	r3, [r3, #24]
 800f5fc:	687a      	ldr	r2, [r7, #4]
 800f5fe:	7c12      	ldrb	r2, [r2, #16]
 800f600:	f107 0108 	add.w	r1, r7, #8
 800f604:	4610      	mov	r0, r2
 800f606:	4798      	blx	r3
 800f608:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f60a:	e00f      	b.n	800f62c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f60c:	6839      	ldr	r1, [r7, #0]
 800f60e:	6878      	ldr	r0, [r7, #4]
 800f610:	f000 fa30 	bl	800fa74 <USBD_CtlError>
            err++;
 800f614:	7afb      	ldrb	r3, [r7, #11]
 800f616:	3301      	adds	r3, #1
 800f618:	72fb      	strb	r3, [r7, #11]
          break;
 800f61a:	e007      	b.n	800f62c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f61c:	6839      	ldr	r1, [r7, #0]
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fa28 	bl	800fa74 <USBD_CtlError>
          err++;
 800f624:	7afb      	ldrb	r3, [r7, #11]
 800f626:	3301      	adds	r3, #1
 800f628:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f62a:	bf00      	nop
      }
      break;
 800f62c:	e037      	b.n	800f69e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	7c1b      	ldrb	r3, [r3, #16]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d109      	bne.n	800f64a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f63c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f63e:	f107 0208 	add.w	r2, r7, #8
 800f642:	4610      	mov	r0, r2
 800f644:	4798      	blx	r3
 800f646:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f648:	e029      	b.n	800f69e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f64a:	6839      	ldr	r1, [r7, #0]
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f000 fa11 	bl	800fa74 <USBD_CtlError>
        err++;
 800f652:	7afb      	ldrb	r3, [r7, #11]
 800f654:	3301      	adds	r3, #1
 800f656:	72fb      	strb	r3, [r7, #11]
      break;
 800f658:	e021      	b.n	800f69e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	7c1b      	ldrb	r3, [r3, #16]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d10d      	bne.n	800f67e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f66a:	f107 0208 	add.w	r2, r7, #8
 800f66e:	4610      	mov	r0, r2
 800f670:	4798      	blx	r3
 800f672:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	3301      	adds	r3, #1
 800f678:	2207      	movs	r2, #7
 800f67a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f67c:	e00f      	b.n	800f69e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f67e:	6839      	ldr	r1, [r7, #0]
 800f680:	6878      	ldr	r0, [r7, #4]
 800f682:	f000 f9f7 	bl	800fa74 <USBD_CtlError>
        err++;
 800f686:	7afb      	ldrb	r3, [r7, #11]
 800f688:	3301      	adds	r3, #1
 800f68a:	72fb      	strb	r3, [r7, #11]
      break;
 800f68c:	e007      	b.n	800f69e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f68e:	6839      	ldr	r1, [r7, #0]
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 f9ef 	bl	800fa74 <USBD_CtlError>
      err++;
 800f696:	7afb      	ldrb	r3, [r7, #11]
 800f698:	3301      	adds	r3, #1
 800f69a:	72fb      	strb	r3, [r7, #11]
      break;
 800f69c:	bf00      	nop
  }

  if (err != 0U)
 800f69e:	7afb      	ldrb	r3, [r7, #11]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d11e      	bne.n	800f6e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	88db      	ldrh	r3, [r3, #6]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d016      	beq.n	800f6da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f6ac:	893b      	ldrh	r3, [r7, #8]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d00e      	beq.n	800f6d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f6b2:	683b      	ldr	r3, [r7, #0]
 800f6b4:	88da      	ldrh	r2, [r3, #6]
 800f6b6:	893b      	ldrh	r3, [r7, #8]
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	bf28      	it	cs
 800f6bc:	4613      	movcs	r3, r2
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f6c2:	893b      	ldrh	r3, [r7, #8]
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	68f9      	ldr	r1, [r7, #12]
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f000 fa44 	bl	800fb56 <USBD_CtlSendData>
 800f6ce:	e009      	b.n	800f6e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f6d0:	6839      	ldr	r1, [r7, #0]
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	f000 f9ce 	bl	800fa74 <USBD_CtlError>
 800f6d8:	e004      	b.n	800f6e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fa95 	bl	800fc0a <USBD_CtlSendStatus>
 800f6e0:	e000      	b.n	800f6e4 <USBD_GetDescriptor+0x320>
    return;
 800f6e2:	bf00      	nop
  }
}
 800f6e4:	3710      	adds	r7, #16
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd80      	pop	{r7, pc}
 800f6ea:	bf00      	nop

0800f6ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f6f6:	683b      	ldr	r3, [r7, #0]
 800f6f8:	889b      	ldrh	r3, [r3, #4]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d131      	bne.n	800f762 <USBD_SetAddress+0x76>
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	88db      	ldrh	r3, [r3, #6]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d12d      	bne.n	800f762 <USBD_SetAddress+0x76>
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	885b      	ldrh	r3, [r3, #2]
 800f70a:	2b7f      	cmp	r3, #127	; 0x7f
 800f70c:	d829      	bhi.n	800f762 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	885b      	ldrh	r3, [r3, #2]
 800f712:	b2db      	uxtb	r3, r3
 800f714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f718:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f720:	b2db      	uxtb	r3, r3
 800f722:	2b03      	cmp	r3, #3
 800f724:	d104      	bne.n	800f730 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f726:	6839      	ldr	r1, [r7, #0]
 800f728:	6878      	ldr	r0, [r7, #4]
 800f72a:	f000 f9a3 	bl	800fa74 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f72e:	e01d      	b.n	800f76c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	7bfa      	ldrb	r2, [r7, #15]
 800f734:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f738:	7bfb      	ldrb	r3, [r7, #15]
 800f73a:	4619      	mov	r1, r3
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f000 ff6b 	bl	8010618 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 fa61 	bl	800fc0a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f748:	7bfb      	ldrb	r3, [r7, #15]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d004      	beq.n	800f758 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2202      	movs	r2, #2
 800f752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f756:	e009      	b.n	800f76c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f760:	e004      	b.n	800f76c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f762:	6839      	ldr	r1, [r7, #0]
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 f985 	bl	800fa74 <USBD_CtlError>
  }
}
 800f76a:	bf00      	nop
 800f76c:	bf00      	nop
 800f76e:	3710      	adds	r7, #16
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b084      	sub	sp, #16
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f77e:	2300      	movs	r3, #0
 800f780:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	885b      	ldrh	r3, [r3, #2]
 800f786:	b2da      	uxtb	r2, r3
 800f788:	4b4c      	ldr	r3, [pc, #304]	; (800f8bc <USBD_SetConfig+0x148>)
 800f78a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f78c:	4b4b      	ldr	r3, [pc, #300]	; (800f8bc <USBD_SetConfig+0x148>)
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	2b01      	cmp	r3, #1
 800f792:	d905      	bls.n	800f7a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f794:	6839      	ldr	r1, [r7, #0]
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 f96c 	bl	800fa74 <USBD_CtlError>
    return USBD_FAIL;
 800f79c:	2303      	movs	r3, #3
 800f79e:	e088      	b.n	800f8b2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	2b02      	cmp	r3, #2
 800f7aa:	d002      	beq.n	800f7b2 <USBD_SetConfig+0x3e>
 800f7ac:	2b03      	cmp	r3, #3
 800f7ae:	d025      	beq.n	800f7fc <USBD_SetConfig+0x88>
 800f7b0:	e071      	b.n	800f896 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f7b2:	4b42      	ldr	r3, [pc, #264]	; (800f8bc <USBD_SetConfig+0x148>)
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d01c      	beq.n	800f7f4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f7ba:	4b40      	ldr	r3, [pc, #256]	; (800f8bc <USBD_SetConfig+0x148>)
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	461a      	mov	r2, r3
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7c4:	4b3d      	ldr	r3, [pc, #244]	; (800f8bc <USBD_SetConfig+0x148>)
 800f7c6:	781b      	ldrb	r3, [r3, #0]
 800f7c8:	4619      	mov	r1, r3
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f7ff f91e 	bl	800ea0c <USBD_SetClassConfig>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f7d4:	7bfb      	ldrb	r3, [r7, #15]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d004      	beq.n	800f7e4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f7da:	6839      	ldr	r1, [r7, #0]
 800f7dc:	6878      	ldr	r0, [r7, #4]
 800f7de:	f000 f949 	bl	800fa74 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f7e2:	e065      	b.n	800f8b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 fa10 	bl	800fc0a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2203      	movs	r2, #3
 800f7ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f7f2:	e05d      	b.n	800f8b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 fa08 	bl	800fc0a <USBD_CtlSendStatus>
      break;
 800f7fa:	e059      	b.n	800f8b0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f7fc:	4b2f      	ldr	r3, [pc, #188]	; (800f8bc <USBD_SetConfig+0x148>)
 800f7fe:	781b      	ldrb	r3, [r3, #0]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d112      	bne.n	800f82a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2202      	movs	r2, #2
 800f808:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f80c:	4b2b      	ldr	r3, [pc, #172]	; (800f8bc <USBD_SetConfig+0x148>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	461a      	mov	r2, r3
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f816:	4b29      	ldr	r3, [pc, #164]	; (800f8bc <USBD_SetConfig+0x148>)
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	4619      	mov	r1, r3
 800f81c:	6878      	ldr	r0, [r7, #4]
 800f81e:	f7ff f911 	bl	800ea44 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 f9f1 	bl	800fc0a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f828:	e042      	b.n	800f8b0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f82a:	4b24      	ldr	r3, [pc, #144]	; (800f8bc <USBD_SetConfig+0x148>)
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	461a      	mov	r2, r3
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	429a      	cmp	r2, r3
 800f836:	d02a      	beq.n	800f88e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	685b      	ldr	r3, [r3, #4]
 800f83c:	b2db      	uxtb	r3, r3
 800f83e:	4619      	mov	r1, r3
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7ff f8ff 	bl	800ea44 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f846:	4b1d      	ldr	r3, [pc, #116]	; (800f8bc <USBD_SetConfig+0x148>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	461a      	mov	r2, r3
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f850:	4b1a      	ldr	r3, [pc, #104]	; (800f8bc <USBD_SetConfig+0x148>)
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	4619      	mov	r1, r3
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f7ff f8d8 	bl	800ea0c <USBD_SetClassConfig>
 800f85c:	4603      	mov	r3, r0
 800f85e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f860:	7bfb      	ldrb	r3, [r7, #15]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d00f      	beq.n	800f886 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f866:	6839      	ldr	r1, [r7, #0]
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f000 f903 	bl	800fa74 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	b2db      	uxtb	r3, r3
 800f874:	4619      	mov	r1, r3
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7ff f8e4 	bl	800ea44 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2202      	movs	r2, #2
 800f880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f884:	e014      	b.n	800f8b0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f000 f9bf 	bl	800fc0a <USBD_CtlSendStatus>
      break;
 800f88c:	e010      	b.n	800f8b0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f88e:	6878      	ldr	r0, [r7, #4]
 800f890:	f000 f9bb 	bl	800fc0a <USBD_CtlSendStatus>
      break;
 800f894:	e00c      	b.n	800f8b0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f896:	6839      	ldr	r1, [r7, #0]
 800f898:	6878      	ldr	r0, [r7, #4]
 800f89a:	f000 f8eb 	bl	800fa74 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f89e:	4b07      	ldr	r3, [pc, #28]	; (800f8bc <USBD_SetConfig+0x148>)
 800f8a0:	781b      	ldrb	r3, [r3, #0]
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f7ff f8cd 	bl	800ea44 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f8aa:	2303      	movs	r3, #3
 800f8ac:	73fb      	strb	r3, [r7, #15]
      break;
 800f8ae:	bf00      	nop
  }

  return ret;
 800f8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8b2:	4618      	mov	r0, r3
 800f8b4:	3710      	adds	r7, #16
 800f8b6:	46bd      	mov	sp, r7
 800f8b8:	bd80      	pop	{r7, pc}
 800f8ba:	bf00      	nop
 800f8bc:	2000042c 	.word	0x2000042c

0800f8c0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f8ca:	683b      	ldr	r3, [r7, #0]
 800f8cc:	88db      	ldrh	r3, [r3, #6]
 800f8ce:	2b01      	cmp	r3, #1
 800f8d0:	d004      	beq.n	800f8dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f8d2:	6839      	ldr	r1, [r7, #0]
 800f8d4:	6878      	ldr	r0, [r7, #4]
 800f8d6:	f000 f8cd 	bl	800fa74 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f8da:	e023      	b.n	800f924 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	2b02      	cmp	r3, #2
 800f8e6:	dc02      	bgt.n	800f8ee <USBD_GetConfig+0x2e>
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	dc03      	bgt.n	800f8f4 <USBD_GetConfig+0x34>
 800f8ec:	e015      	b.n	800f91a <USBD_GetConfig+0x5a>
 800f8ee:	2b03      	cmp	r3, #3
 800f8f0:	d00b      	beq.n	800f90a <USBD_GetConfig+0x4a>
 800f8f2:	e012      	b.n	800f91a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	3308      	adds	r3, #8
 800f8fe:	2201      	movs	r2, #1
 800f900:	4619      	mov	r1, r3
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f000 f927 	bl	800fb56 <USBD_CtlSendData>
        break;
 800f908:	e00c      	b.n	800f924 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	3304      	adds	r3, #4
 800f90e:	2201      	movs	r2, #1
 800f910:	4619      	mov	r1, r3
 800f912:	6878      	ldr	r0, [r7, #4]
 800f914:	f000 f91f 	bl	800fb56 <USBD_CtlSendData>
        break;
 800f918:	e004      	b.n	800f924 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f91a:	6839      	ldr	r1, [r7, #0]
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f000 f8a9 	bl	800fa74 <USBD_CtlError>
        break;
 800f922:	bf00      	nop
}
 800f924:	bf00      	nop
 800f926:	3708      	adds	r7, #8
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	3b01      	subs	r3, #1
 800f940:	2b02      	cmp	r3, #2
 800f942:	d81e      	bhi.n	800f982 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	88db      	ldrh	r3, [r3, #6]
 800f948:	2b02      	cmp	r3, #2
 800f94a:	d004      	beq.n	800f956 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f94c:	6839      	ldr	r1, [r7, #0]
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 f890 	bl	800fa74 <USBD_CtlError>
        break;
 800f954:	e01a      	b.n	800f98c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	2201      	movs	r2, #1
 800f95a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f962:	2b00      	cmp	r3, #0
 800f964:	d005      	beq.n	800f972 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	68db      	ldr	r3, [r3, #12]
 800f96a:	f043 0202 	orr.w	r2, r3, #2
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	330c      	adds	r3, #12
 800f976:	2202      	movs	r2, #2
 800f978:	4619      	mov	r1, r3
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 f8eb 	bl	800fb56 <USBD_CtlSendData>
      break;
 800f980:	e004      	b.n	800f98c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f982:	6839      	ldr	r1, [r7, #0]
 800f984:	6878      	ldr	r0, [r7, #4]
 800f986:	f000 f875 	bl	800fa74 <USBD_CtlError>
      break;
 800f98a:	bf00      	nop
  }
}
 800f98c:	bf00      	nop
 800f98e:	3708      	adds	r7, #8
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	885b      	ldrh	r3, [r3, #2]
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d106      	bne.n	800f9b4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 f92b 	bl	800fc0a <USBD_CtlSendStatus>
  }
}
 800f9b4:	bf00      	nop
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9cc:	b2db      	uxtb	r3, r3
 800f9ce:	3b01      	subs	r3, #1
 800f9d0:	2b02      	cmp	r3, #2
 800f9d2:	d80b      	bhi.n	800f9ec <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	885b      	ldrh	r3, [r3, #2]
 800f9d8:	2b01      	cmp	r3, #1
 800f9da:	d10c      	bne.n	800f9f6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	2200      	movs	r2, #0
 800f9e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 f910 	bl	800fc0a <USBD_CtlSendStatus>
      }
      break;
 800f9ea:	e004      	b.n	800f9f6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f9ec:	6839      	ldr	r1, [r7, #0]
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f000 f840 	bl	800fa74 <USBD_CtlError>
      break;
 800f9f4:	e000      	b.n	800f9f8 <USBD_ClrFeature+0x3c>
      break;
 800f9f6:	bf00      	nop
  }
}
 800f9f8:	bf00      	nop
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	781a      	ldrb	r2, [r3, #0]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	781a      	ldrb	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	3301      	adds	r3, #1
 800fa28:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fa2a:	68f8      	ldr	r0, [r7, #12]
 800fa2c:	f7ff fa91 	bl	800ef52 <SWAPBYTE>
 800fa30:	4603      	mov	r3, r0
 800fa32:	461a      	mov	r2, r3
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	3301      	adds	r3, #1
 800fa42:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fa44:	68f8      	ldr	r0, [r7, #12]
 800fa46:	f7ff fa84 	bl	800ef52 <SWAPBYTE>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	3301      	adds	r3, #1
 800fa56:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	3301      	adds	r3, #1
 800fa5c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fa5e:	68f8      	ldr	r0, [r7, #12]
 800fa60:	f7ff fa77 	bl	800ef52 <SWAPBYTE>
 800fa64:	4603      	mov	r3, r0
 800fa66:	461a      	mov	r2, r3
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	80da      	strh	r2, [r3, #6]
}
 800fa6c:	bf00      	nop
 800fa6e:	3710      	adds	r7, #16
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fa7e:	2180      	movs	r1, #128	; 0x80
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f000 fd5f 	bl	8010544 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fa86:	2100      	movs	r1, #0
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f000 fd5b 	bl	8010544 <USBD_LL_StallEP>
}
 800fa8e:	bf00      	nop
 800fa90:	3708      	adds	r7, #8
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b086      	sub	sp, #24
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	60f8      	str	r0, [r7, #12]
 800fa9e:	60b9      	str	r1, [r7, #8]
 800faa0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800faa2:	2300      	movs	r3, #0
 800faa4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d036      	beq.n	800fb1a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fab0:	6938      	ldr	r0, [r7, #16]
 800fab2:	f000 f836 	bl	800fb22 <USBD_GetLen>
 800fab6:	4603      	mov	r3, r0
 800fab8:	3301      	adds	r3, #1
 800faba:	b29b      	uxth	r3, r3
 800fabc:	005b      	lsls	r3, r3, #1
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fac4:	7dfb      	ldrb	r3, [r7, #23]
 800fac6:	68ba      	ldr	r2, [r7, #8]
 800fac8:	4413      	add	r3, r2
 800faca:	687a      	ldr	r2, [r7, #4]
 800facc:	7812      	ldrb	r2, [r2, #0]
 800face:	701a      	strb	r2, [r3, #0]
  idx++;
 800fad0:	7dfb      	ldrb	r3, [r7, #23]
 800fad2:	3301      	adds	r3, #1
 800fad4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fad6:	7dfb      	ldrb	r3, [r7, #23]
 800fad8:	68ba      	ldr	r2, [r7, #8]
 800fada:	4413      	add	r3, r2
 800fadc:	2203      	movs	r2, #3
 800fade:	701a      	strb	r2, [r3, #0]
  idx++;
 800fae0:	7dfb      	ldrb	r3, [r7, #23]
 800fae2:	3301      	adds	r3, #1
 800fae4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fae6:	e013      	b.n	800fb10 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fae8:	7dfb      	ldrb	r3, [r7, #23]
 800faea:	68ba      	ldr	r2, [r7, #8]
 800faec:	4413      	add	r3, r2
 800faee:	693a      	ldr	r2, [r7, #16]
 800faf0:	7812      	ldrb	r2, [r2, #0]
 800faf2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	3301      	adds	r3, #1
 800faf8:	613b      	str	r3, [r7, #16]
    idx++;
 800fafa:	7dfb      	ldrb	r3, [r7, #23]
 800fafc:	3301      	adds	r3, #1
 800fafe:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fb00:	7dfb      	ldrb	r3, [r7, #23]
 800fb02:	68ba      	ldr	r2, [r7, #8]
 800fb04:	4413      	add	r3, r2
 800fb06:	2200      	movs	r2, #0
 800fb08:	701a      	strb	r2, [r3, #0]
    idx++;
 800fb0a:	7dfb      	ldrb	r3, [r7, #23]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d1e7      	bne.n	800fae8 <USBD_GetString+0x52>
 800fb18:	e000      	b.n	800fb1c <USBD_GetString+0x86>
    return;
 800fb1a:	bf00      	nop
  }
}
 800fb1c:	3718      	adds	r7, #24
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}

0800fb22 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fb22:	b480      	push	{r7}
 800fb24:	b085      	sub	sp, #20
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fb32:	e005      	b.n	800fb40 <USBD_GetLen+0x1e>
  {
    len++;
 800fb34:	7bfb      	ldrb	r3, [r7, #15]
 800fb36:	3301      	adds	r3, #1
 800fb38:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fb3a:	68bb      	ldr	r3, [r7, #8]
 800fb3c:	3301      	adds	r3, #1
 800fb3e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	781b      	ldrb	r3, [r3, #0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d1f5      	bne.n	800fb34 <USBD_GetLen+0x12>
  }

  return len;
 800fb48:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb4a:	4618      	mov	r0, r3
 800fb4c:	3714      	adds	r7, #20
 800fb4e:	46bd      	mov	sp, r7
 800fb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb54:	4770      	bx	lr

0800fb56 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fb56:	b580      	push	{r7, lr}
 800fb58:	b084      	sub	sp, #16
 800fb5a:	af00      	add	r7, sp, #0
 800fb5c:	60f8      	str	r0, [r7, #12]
 800fb5e:	60b9      	str	r1, [r7, #8]
 800fb60:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	2202      	movs	r2, #2
 800fb66:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	687a      	ldr	r2, [r7, #4]
 800fb6e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	68ba      	ldr	r2, [r7, #8]
 800fb7a:	2100      	movs	r1, #0
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f000 fd6a 	bl	8010656 <USBD_LL_Transmit>

  return USBD_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68ba      	ldr	r2, [r7, #8]
 800fb9c:	2100      	movs	r1, #0
 800fb9e:	68f8      	ldr	r0, [r7, #12]
 800fba0:	f000 fd59 	bl	8010656 <USBD_LL_Transmit>

  return USBD_OK;
 800fba4:	2300      	movs	r3, #0
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3710      	adds	r7, #16
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}

0800fbae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fbae:	b580      	push	{r7, lr}
 800fbb0:	b084      	sub	sp, #16
 800fbb2:	af00      	add	r7, sp, #0
 800fbb4:	60f8      	str	r0, [r7, #12]
 800fbb6:	60b9      	str	r1, [r7, #8]
 800fbb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	2203      	movs	r2, #3
 800fbbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fbca:	68fb      	ldr	r3, [r7, #12]
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	68ba      	ldr	r2, [r7, #8]
 800fbd6:	2100      	movs	r1, #0
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f000 fd5d 	bl	8010698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fbde:	2300      	movs	r3, #0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3710      	adds	r7, #16
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b084      	sub	sp, #16
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	68ba      	ldr	r2, [r7, #8]
 800fbf8:	2100      	movs	r1, #0
 800fbfa:	68f8      	ldr	r0, [r7, #12]
 800fbfc:	f000 fd4c 	bl	8010698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc00:	2300      	movs	r3, #0
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3710      	adds	r7, #16
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}

0800fc0a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fc0a:	b580      	push	{r7, lr}
 800fc0c:	b082      	sub	sp, #8
 800fc0e:	af00      	add	r7, sp, #0
 800fc10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2204      	movs	r2, #4
 800fc16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	2100      	movs	r1, #0
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 fd18 	bl	8010656 <USBD_LL_Transmit>

  return USBD_OK;
 800fc26:	2300      	movs	r3, #0
}
 800fc28:	4618      	mov	r0, r3
 800fc2a:	3708      	adds	r7, #8
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	bd80      	pop	{r7, pc}

0800fc30 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fc30:	b580      	push	{r7, lr}
 800fc32:	b082      	sub	sp, #8
 800fc34:	af00      	add	r7, sp, #0
 800fc36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2205      	movs	r2, #5
 800fc3c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fc40:	2300      	movs	r3, #0
 800fc42:	2200      	movs	r2, #0
 800fc44:	2100      	movs	r1, #0
 800fc46:	6878      	ldr	r0, [r7, #4]
 800fc48:	f000 fd26 	bl	8010698 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc4c:	2300      	movs	r3, #0
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3708      	adds	r7, #8
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
	...

0800fc58 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800fc58:	b480      	push	{r7}
 800fc5a:	b087      	sub	sp, #28
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	60f8      	str	r0, [r7, #12]
 800fc60:	60b9      	str	r1, [r7, #8]
 800fc62:	4613      	mov	r3, r2
 800fc64:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800fc66:	2301      	movs	r3, #1
 800fc68:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800fc6e:	4b1f      	ldr	r3, [pc, #124]	; (800fcec <FATFS_LinkDriverEx+0x94>)
 800fc70:	7a5b      	ldrb	r3, [r3, #9]
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d131      	bne.n	800fcdc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800fc78:	4b1c      	ldr	r3, [pc, #112]	; (800fcec <FATFS_LinkDriverEx+0x94>)
 800fc7a:	7a5b      	ldrb	r3, [r3, #9]
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	461a      	mov	r2, r3
 800fc80:	4b1a      	ldr	r3, [pc, #104]	; (800fcec <FATFS_LinkDriverEx+0x94>)
 800fc82:	2100      	movs	r1, #0
 800fc84:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800fc86:	4b19      	ldr	r3, [pc, #100]	; (800fcec <FATFS_LinkDriverEx+0x94>)
 800fc88:	7a5b      	ldrb	r3, [r3, #9]
 800fc8a:	b2db      	uxtb	r3, r3
 800fc8c:	4a17      	ldr	r2, [pc, #92]	; (800fcec <FATFS_LinkDriverEx+0x94>)
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	4413      	add	r3, r2
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800fc96:	4b15      	ldr	r3, [pc, #84]	; (800fcec <FATFS_LinkDriverEx+0x94>)
 800fc98:	7a5b      	ldrb	r3, [r3, #9]
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	461a      	mov	r2, r3
 800fc9e:	4b13      	ldr	r3, [pc, #76]	; (800fcec <FATFS_LinkDriverEx+0x94>)
 800fca0:	4413      	add	r3, r2
 800fca2:	79fa      	ldrb	r2, [r7, #7]
 800fca4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800fca6:	4b11      	ldr	r3, [pc, #68]	; (800fcec <FATFS_LinkDriverEx+0x94>)
 800fca8:	7a5b      	ldrb	r3, [r3, #9]
 800fcaa:	b2db      	uxtb	r3, r3
 800fcac:	1c5a      	adds	r2, r3, #1
 800fcae:	b2d1      	uxtb	r1, r2
 800fcb0:	4a0e      	ldr	r2, [pc, #56]	; (800fcec <FATFS_LinkDriverEx+0x94>)
 800fcb2:	7251      	strb	r1, [r2, #9]
 800fcb4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800fcb6:	7dbb      	ldrb	r3, [r7, #22]
 800fcb8:	3330      	adds	r3, #48	; 0x30
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	223a      	movs	r2, #58	; 0x3a
 800fcc6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	3302      	adds	r3, #2
 800fccc:	222f      	movs	r2, #47	; 0x2f
 800fcce:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	3303      	adds	r3, #3
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800fcd8:	2300      	movs	r3, #0
 800fcda:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fcdc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	371c      	adds	r7, #28
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr
 800fcea:	bf00      	nop
 800fcec:	20000430 	.word	0x20000430

0800fcf0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	6078      	str	r0, [r7, #4]
 800fcf8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	6839      	ldr	r1, [r7, #0]
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f7ff ffaa 	bl	800fc58 <FATFS_LinkDriverEx>
 800fd04:	4603      	mov	r3, r0
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	3708      	adds	r7, #8
 800fd0a:	46bd      	mov	sp, r7
 800fd0c:	bd80      	pop	{r7, pc}
	...

0800fd10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800fd14:	2200      	movs	r2, #0
 800fd16:	4912      	ldr	r1, [pc, #72]	; (800fd60 <MX_USB_DEVICE_Init+0x50>)
 800fd18:	4812      	ldr	r0, [pc, #72]	; (800fd64 <MX_USB_DEVICE_Init+0x54>)
 800fd1a:	f7fe fe09 	bl	800e930 <USBD_Init>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d001      	beq.n	800fd28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800fd24:	f7f2 ffe0 	bl	8002ce8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800fd28:	490f      	ldr	r1, [pc, #60]	; (800fd68 <MX_USB_DEVICE_Init+0x58>)
 800fd2a:	480e      	ldr	r0, [pc, #56]	; (800fd64 <MX_USB_DEVICE_Init+0x54>)
 800fd2c:	f7fe fe30 	bl	800e990 <USBD_RegisterClass>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d001      	beq.n	800fd3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800fd36:	f7f2 ffd7 	bl	8002ce8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800fd3a:	490c      	ldr	r1, [pc, #48]	; (800fd6c <MX_USB_DEVICE_Init+0x5c>)
 800fd3c:	4809      	ldr	r0, [pc, #36]	; (800fd64 <MX_USB_DEVICE_Init+0x54>)
 800fd3e:	f7f4 f9b3 	bl	80040a8 <USBD_CDC_RegisterInterface>
 800fd42:	4603      	mov	r3, r0
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d001      	beq.n	800fd4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800fd48:	f7f2 ffce 	bl	8002ce8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800fd4c:	4805      	ldr	r0, [pc, #20]	; (800fd64 <MX_USB_DEVICE_Init+0x54>)
 800fd4e:	f7fe fe46 	bl	800e9de <USBD_Start>
 800fd52:	4603      	mov	r3, r0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d001      	beq.n	800fd5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800fd58:	f7f2 ffc6 	bl	8002ce8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800fd5c:	bf00      	nop
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	20000334 	.word	0x20000334
 800fd64:	200018c8 	.word	0x200018c8
 800fd68:	200001a8 	.word	0x200001a8
 800fd6c:	20000320 	.word	0x20000320

0800fd70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800fd74:	2200      	movs	r2, #0
 800fd76:	4905      	ldr	r1, [pc, #20]	; (800fd8c <CDC_Init_FS+0x1c>)
 800fd78:	4805      	ldr	r0, [pc, #20]	; (800fd90 <CDC_Init_FS+0x20>)
 800fd7a:	f7f4 f9aa 	bl	80040d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800fd7e:	4905      	ldr	r1, [pc, #20]	; (800fd94 <CDC_Init_FS+0x24>)
 800fd80:	4803      	ldr	r0, [pc, #12]	; (800fd90 <CDC_Init_FS+0x20>)
 800fd82:	f7f4 f9bf 	bl	8004104 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800fd86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	bd80      	pop	{r7, pc}
 800fd8c:	20001f80 	.word	0x20001f80
 800fd90:	200018c8 	.word	0x200018c8
 800fd94:	20001b98 	.word	0x20001b98

0800fd98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fd9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr

0800fda8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800fda8:	b480      	push	{r7}
 800fdaa:	b083      	sub	sp, #12
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	4603      	mov	r3, r0
 800fdb0:	6039      	str	r1, [r7, #0]
 800fdb2:	71fb      	strb	r3, [r7, #7]
 800fdb4:	4613      	mov	r3, r2
 800fdb6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800fdb8:	79fb      	ldrb	r3, [r7, #7]
 800fdba:	2b23      	cmp	r3, #35	; 0x23
 800fdbc:	d84a      	bhi.n	800fe54 <CDC_Control_FS+0xac>
 800fdbe:	a201      	add	r2, pc, #4	; (adr r2, 800fdc4 <CDC_Control_FS+0x1c>)
 800fdc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fdc4:	0800fe55 	.word	0x0800fe55
 800fdc8:	0800fe55 	.word	0x0800fe55
 800fdcc:	0800fe55 	.word	0x0800fe55
 800fdd0:	0800fe55 	.word	0x0800fe55
 800fdd4:	0800fe55 	.word	0x0800fe55
 800fdd8:	0800fe55 	.word	0x0800fe55
 800fddc:	0800fe55 	.word	0x0800fe55
 800fde0:	0800fe55 	.word	0x0800fe55
 800fde4:	0800fe55 	.word	0x0800fe55
 800fde8:	0800fe55 	.word	0x0800fe55
 800fdec:	0800fe55 	.word	0x0800fe55
 800fdf0:	0800fe55 	.word	0x0800fe55
 800fdf4:	0800fe55 	.word	0x0800fe55
 800fdf8:	0800fe55 	.word	0x0800fe55
 800fdfc:	0800fe55 	.word	0x0800fe55
 800fe00:	0800fe55 	.word	0x0800fe55
 800fe04:	0800fe55 	.word	0x0800fe55
 800fe08:	0800fe55 	.word	0x0800fe55
 800fe0c:	0800fe55 	.word	0x0800fe55
 800fe10:	0800fe55 	.word	0x0800fe55
 800fe14:	0800fe55 	.word	0x0800fe55
 800fe18:	0800fe55 	.word	0x0800fe55
 800fe1c:	0800fe55 	.word	0x0800fe55
 800fe20:	0800fe55 	.word	0x0800fe55
 800fe24:	0800fe55 	.word	0x0800fe55
 800fe28:	0800fe55 	.word	0x0800fe55
 800fe2c:	0800fe55 	.word	0x0800fe55
 800fe30:	0800fe55 	.word	0x0800fe55
 800fe34:	0800fe55 	.word	0x0800fe55
 800fe38:	0800fe55 	.word	0x0800fe55
 800fe3c:	0800fe55 	.word	0x0800fe55
 800fe40:	0800fe55 	.word	0x0800fe55
 800fe44:	0800fe55 	.word	0x0800fe55
 800fe48:	0800fe55 	.word	0x0800fe55
 800fe4c:	0800fe55 	.word	0x0800fe55
 800fe50:	0800fe55 	.word	0x0800fe55
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800fe54:	bf00      	nop
  }

  return (USBD_OK);
 800fe56:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	370c      	adds	r7, #12
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe62:	4770      	bx	lr

0800fe64 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800fe6e:	6879      	ldr	r1, [r7, #4]
 800fe70:	4805      	ldr	r0, [pc, #20]	; (800fe88 <CDC_Receive_FS+0x24>)
 800fe72:	f7f4 f947 	bl	8004104 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800fe76:	4804      	ldr	r0, [pc, #16]	; (800fe88 <CDC_Receive_FS+0x24>)
 800fe78:	f7f4 f988 	bl	800418c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800fe7c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	200018c8 	.word	0x200018c8

0800fe8c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b084      	sub	sp, #16
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	6078      	str	r0, [r7, #4]
 800fe94:	460b      	mov	r3, r1
 800fe96:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800fe98:	2300      	movs	r3, #0
 800fe9a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800fe9c:	4b0d      	ldr	r3, [pc, #52]	; (800fed4 <CDC_Transmit_FS+0x48>)
 800fe9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fea2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800fea4:	68bb      	ldr	r3, [r7, #8]
 800fea6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d001      	beq.n	800feb2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800feae:	2301      	movs	r3, #1
 800feb0:	e00b      	b.n	800feca <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800feb2:	887b      	ldrh	r3, [r7, #2]
 800feb4:	461a      	mov	r2, r3
 800feb6:	6879      	ldr	r1, [r7, #4]
 800feb8:	4806      	ldr	r0, [pc, #24]	; (800fed4 <CDC_Transmit_FS+0x48>)
 800feba:	f7f4 f90a 	bl	80040d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800febe:	4805      	ldr	r0, [pc, #20]	; (800fed4 <CDC_Transmit_FS+0x48>)
 800fec0:	f7f4 f934 	bl	800412c <USBD_CDC_TransmitPacket>
 800fec4:	4603      	mov	r3, r0
 800fec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800fec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800feca:	4618      	mov	r0, r3
 800fecc:	3710      	adds	r7, #16
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	200018c8 	.word	0x200018c8

0800fed8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800fed8:	b480      	push	{r7}
 800feda:	b087      	sub	sp, #28
 800fedc:	af00      	add	r7, sp, #0
 800fede:	60f8      	str	r0, [r7, #12]
 800fee0:	60b9      	str	r1, [r7, #8]
 800fee2:	4613      	mov	r3, r2
 800fee4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800fee6:	2300      	movs	r3, #0
 800fee8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800feea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800feee:	4618      	mov	r0, r3
 800fef0:	371c      	adds	r7, #28
 800fef2:	46bd      	mov	sp, r7
 800fef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef8:	4770      	bx	lr
	...

0800fefc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	4603      	mov	r3, r0
 800ff04:	6039      	str	r1, [r7, #0]
 800ff06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	2212      	movs	r2, #18
 800ff0c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ff0e:	4b03      	ldr	r3, [pc, #12]	; (800ff1c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ff10:	4618      	mov	r0, r3
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr
 800ff1c:	20000354 	.word	0x20000354

0800ff20 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	4603      	mov	r3, r0
 800ff28:	6039      	str	r1, [r7, #0]
 800ff2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	2204      	movs	r2, #4
 800ff30:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ff32:	4b03      	ldr	r3, [pc, #12]	; (800ff40 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	370c      	adds	r7, #12
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	20000374 	.word	0x20000374

0800ff44 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff44:	b580      	push	{r7, lr}
 800ff46:	b082      	sub	sp, #8
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	6039      	str	r1, [r7, #0]
 800ff4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ff50:	79fb      	ldrb	r3, [r7, #7]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d105      	bne.n	800ff62 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ff56:	683a      	ldr	r2, [r7, #0]
 800ff58:	4907      	ldr	r1, [pc, #28]	; (800ff78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ff5a:	4808      	ldr	r0, [pc, #32]	; (800ff7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ff5c:	f7ff fd9b 	bl	800fa96 <USBD_GetString>
 800ff60:	e004      	b.n	800ff6c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ff62:	683a      	ldr	r2, [r7, #0]
 800ff64:	4904      	ldr	r1, [pc, #16]	; (800ff78 <USBD_FS_ProductStrDescriptor+0x34>)
 800ff66:	4805      	ldr	r0, [pc, #20]	; (800ff7c <USBD_FS_ProductStrDescriptor+0x38>)
 800ff68:	f7ff fd95 	bl	800fa96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ff6c:	4b02      	ldr	r3, [pc, #8]	; (800ff78 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3708      	adds	r7, #8
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}
 800ff76:	bf00      	nop
 800ff78:	20002368 	.word	0x20002368
 800ff7c:	080116b4 	.word	0x080116b4

0800ff80 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b082      	sub	sp, #8
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	4603      	mov	r3, r0
 800ff88:	6039      	str	r1, [r7, #0]
 800ff8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ff8c:	683a      	ldr	r2, [r7, #0]
 800ff8e:	4904      	ldr	r1, [pc, #16]	; (800ffa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ff90:	4804      	ldr	r0, [pc, #16]	; (800ffa4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ff92:	f7ff fd80 	bl	800fa96 <USBD_GetString>
  return USBD_StrDesc;
 800ff96:	4b02      	ldr	r3, [pc, #8]	; (800ffa0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ff98:	4618      	mov	r0, r3
 800ff9a:	3708      	adds	r7, #8
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	20002368 	.word	0x20002368
 800ffa4:	080116c4 	.word	0x080116c4

0800ffa8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	4603      	mov	r3, r0
 800ffb0:	6039      	str	r1, [r7, #0]
 800ffb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ffb4:	683b      	ldr	r3, [r7, #0]
 800ffb6:	221a      	movs	r2, #26
 800ffb8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ffba:	f000 f855 	bl	8010068 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ffbe:	4b02      	ldr	r3, [pc, #8]	; (800ffc8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}
 800ffc8:	20000378 	.word	0x20000378

0800ffcc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ffcc:	b580      	push	{r7, lr}
 800ffce:	b082      	sub	sp, #8
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	4603      	mov	r3, r0
 800ffd4:	6039      	str	r1, [r7, #0]
 800ffd6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ffd8:	79fb      	ldrb	r3, [r7, #7]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d105      	bne.n	800ffea <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ffde:	683a      	ldr	r2, [r7, #0]
 800ffe0:	4907      	ldr	r1, [pc, #28]	; (8010000 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ffe2:	4808      	ldr	r0, [pc, #32]	; (8010004 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ffe4:	f7ff fd57 	bl	800fa96 <USBD_GetString>
 800ffe8:	e004      	b.n	800fff4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ffea:	683a      	ldr	r2, [r7, #0]
 800ffec:	4904      	ldr	r1, [pc, #16]	; (8010000 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ffee:	4805      	ldr	r0, [pc, #20]	; (8010004 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fff0:	f7ff fd51 	bl	800fa96 <USBD_GetString>
  }
  return USBD_StrDesc;
 800fff4:	4b02      	ldr	r3, [pc, #8]	; (8010000 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3708      	adds	r7, #8
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
 800fffe:	bf00      	nop
 8010000:	20002368 	.word	0x20002368
 8010004:	080116d8 	.word	0x080116d8

08010008 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	4603      	mov	r3, r0
 8010010:	6039      	str	r1, [r7, #0]
 8010012:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010014:	79fb      	ldrb	r3, [r7, #7]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d105      	bne.n	8010026 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801001a:	683a      	ldr	r2, [r7, #0]
 801001c:	4907      	ldr	r1, [pc, #28]	; (801003c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801001e:	4808      	ldr	r0, [pc, #32]	; (8010040 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010020:	f7ff fd39 	bl	800fa96 <USBD_GetString>
 8010024:	e004      	b.n	8010030 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010026:	683a      	ldr	r2, [r7, #0]
 8010028:	4904      	ldr	r1, [pc, #16]	; (801003c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801002a:	4805      	ldr	r0, [pc, #20]	; (8010040 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801002c:	f7ff fd33 	bl	800fa96 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010030:	4b02      	ldr	r3, [pc, #8]	; (801003c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}
 801003a:	bf00      	nop
 801003c:	20002368 	.word	0x20002368
 8010040:	080116e4 	.word	0x080116e4

08010044 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	4603      	mov	r3, r0
 801004c:	6039      	str	r1, [r7, #0]
 801004e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	220c      	movs	r2, #12
 8010054:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8010056:	4b03      	ldr	r3, [pc, #12]	; (8010064 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8010058:	4618      	mov	r0, r3
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr
 8010064:	20000368 	.word	0x20000368

08010068 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	b084      	sub	sp, #16
 801006c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801006e:	4b0f      	ldr	r3, [pc, #60]	; (80100ac <Get_SerialNum+0x44>)
 8010070:	681b      	ldr	r3, [r3, #0]
 8010072:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010074:	4b0e      	ldr	r3, [pc, #56]	; (80100b0 <Get_SerialNum+0x48>)
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801007a:	4b0e      	ldr	r3, [pc, #56]	; (80100b4 <Get_SerialNum+0x4c>)
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010080:	68fa      	ldr	r2, [r7, #12]
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4413      	add	r3, r2
 8010086:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	2b00      	cmp	r3, #0
 801008c:	d009      	beq.n	80100a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801008e:	2208      	movs	r2, #8
 8010090:	4909      	ldr	r1, [pc, #36]	; (80100b8 <Get_SerialNum+0x50>)
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f000 f814 	bl	80100c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010098:	2204      	movs	r2, #4
 801009a:	4908      	ldr	r1, [pc, #32]	; (80100bc <Get_SerialNum+0x54>)
 801009c:	68b8      	ldr	r0, [r7, #8]
 801009e:	f000 f80f 	bl	80100c0 <IntToUnicode>
  }
}
 80100a2:	bf00      	nop
 80100a4:	3710      	adds	r7, #16
 80100a6:	46bd      	mov	sp, r7
 80100a8:	bd80      	pop	{r7, pc}
 80100aa:	bf00      	nop
 80100ac:	1fff7a10 	.word	0x1fff7a10
 80100b0:	1fff7a14 	.word	0x1fff7a14
 80100b4:	1fff7a18 	.word	0x1fff7a18
 80100b8:	2000037a 	.word	0x2000037a
 80100bc:	2000038a 	.word	0x2000038a

080100c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b087      	sub	sp, #28
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	60f8      	str	r0, [r7, #12]
 80100c8:	60b9      	str	r1, [r7, #8]
 80100ca:	4613      	mov	r3, r2
 80100cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80100ce:	2300      	movs	r3, #0
 80100d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80100d2:	2300      	movs	r3, #0
 80100d4:	75fb      	strb	r3, [r7, #23]
 80100d6:	e027      	b.n	8010128 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	0f1b      	lsrs	r3, r3, #28
 80100dc:	2b09      	cmp	r3, #9
 80100de:	d80b      	bhi.n	80100f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	0f1b      	lsrs	r3, r3, #28
 80100e4:	b2da      	uxtb	r2, r3
 80100e6:	7dfb      	ldrb	r3, [r7, #23]
 80100e8:	005b      	lsls	r3, r3, #1
 80100ea:	4619      	mov	r1, r3
 80100ec:	68bb      	ldr	r3, [r7, #8]
 80100ee:	440b      	add	r3, r1
 80100f0:	3230      	adds	r2, #48	; 0x30
 80100f2:	b2d2      	uxtb	r2, r2
 80100f4:	701a      	strb	r2, [r3, #0]
 80100f6:	e00a      	b.n	801010e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	0f1b      	lsrs	r3, r3, #28
 80100fc:	b2da      	uxtb	r2, r3
 80100fe:	7dfb      	ldrb	r3, [r7, #23]
 8010100:	005b      	lsls	r3, r3, #1
 8010102:	4619      	mov	r1, r3
 8010104:	68bb      	ldr	r3, [r7, #8]
 8010106:	440b      	add	r3, r1
 8010108:	3237      	adds	r2, #55	; 0x37
 801010a:	b2d2      	uxtb	r2, r2
 801010c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	011b      	lsls	r3, r3, #4
 8010112:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010114:	7dfb      	ldrb	r3, [r7, #23]
 8010116:	005b      	lsls	r3, r3, #1
 8010118:	3301      	adds	r3, #1
 801011a:	68ba      	ldr	r2, [r7, #8]
 801011c:	4413      	add	r3, r2
 801011e:	2200      	movs	r2, #0
 8010120:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010122:	7dfb      	ldrb	r3, [r7, #23]
 8010124:	3301      	adds	r3, #1
 8010126:	75fb      	strb	r3, [r7, #23]
 8010128:	7dfa      	ldrb	r2, [r7, #23]
 801012a:	79fb      	ldrb	r3, [r7, #7]
 801012c:	429a      	cmp	r2, r3
 801012e:	d3d3      	bcc.n	80100d8 <IntToUnicode+0x18>
  }
}
 8010130:	bf00      	nop
 8010132:	bf00      	nop
 8010134:	371c      	adds	r7, #28
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr
	...

08010140 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b098      	sub	sp, #96	; 0x60
 8010144:	af00      	add	r7, sp, #0
 8010146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010148:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 801014c:	2200      	movs	r2, #0
 801014e:	601a      	str	r2, [r3, #0]
 8010150:	605a      	str	r2, [r3, #4]
 8010152:	609a      	str	r2, [r3, #8]
 8010154:	60da      	str	r2, [r3, #12]
 8010156:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8010158:	f107 0310 	add.w	r3, r7, #16
 801015c:	223c      	movs	r2, #60	; 0x3c
 801015e:	2100      	movs	r1, #0
 8010160:	4618      	mov	r0, r3
 8010162:	f000 fb89 	bl	8010878 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801016e:	d148      	bne.n	8010202 <HAL_PCD_MspInit+0xc2>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8010170:	2320      	movs	r3, #32
 8010172:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8010174:	2300      	movs	r3, #0
 8010176:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8010178:	f107 0310 	add.w	r3, r7, #16
 801017c:	4618      	mov	r0, r3
 801017e:	f7f8 fadb 	bl	8008738 <HAL_RCCEx_PeriphCLKConfig>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <HAL_PCD_MspInit+0x4c>
    {
      Error_Handler();
 8010188:	f7f2 fdae 	bl	8002ce8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801018c:	2300      	movs	r3, #0
 801018e:	60fb      	str	r3, [r7, #12]
 8010190:	4b1e      	ldr	r3, [pc, #120]	; (801020c <HAL_PCD_MspInit+0xcc>)
 8010192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010194:	4a1d      	ldr	r2, [pc, #116]	; (801020c <HAL_PCD_MspInit+0xcc>)
 8010196:	f043 0301 	orr.w	r3, r3, #1
 801019a:	6313      	str	r3, [r2, #48]	; 0x30
 801019c:	4b1b      	ldr	r3, [pc, #108]	; (801020c <HAL_PCD_MspInit+0xcc>)
 801019e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101a0:	f003 0301 	and.w	r3, r3, #1
 80101a4:	60fb      	str	r3, [r7, #12]
 80101a6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DM_Pin|USB_OTGFS_DP_Pin;
 80101a8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80101ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80101ae:	2302      	movs	r3, #2
 80101b0:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101b2:	2300      	movs	r3, #0
 80101b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80101b6:	2303      	movs	r3, #3
 80101b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80101ba:	230a      	movs	r3, #10
 80101bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80101be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80101c2:	4619      	mov	r1, r3
 80101c4:	4812      	ldr	r0, [pc, #72]	; (8010210 <HAL_PCD_MspInit+0xd0>)
 80101c6:	f7f5 fe9b 	bl	8005f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80101ca:	4b10      	ldr	r3, [pc, #64]	; (801020c <HAL_PCD_MspInit+0xcc>)
 80101cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80101ce:	4a0f      	ldr	r2, [pc, #60]	; (801020c <HAL_PCD_MspInit+0xcc>)
 80101d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101d4:	6353      	str	r3, [r2, #52]	; 0x34
 80101d6:	2300      	movs	r3, #0
 80101d8:	60bb      	str	r3, [r7, #8]
 80101da:	4b0c      	ldr	r3, [pc, #48]	; (801020c <HAL_PCD_MspInit+0xcc>)
 80101dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101de:	4a0b      	ldr	r2, [pc, #44]	; (801020c <HAL_PCD_MspInit+0xcc>)
 80101e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80101e4:	6453      	str	r3, [r2, #68]	; 0x44
 80101e6:	4b09      	ldr	r3, [pc, #36]	; (801020c <HAL_PCD_MspInit+0xcc>)
 80101e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101ee:	60bb      	str	r3, [r7, #8]
 80101f0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80101f2:	2200      	movs	r2, #0
 80101f4:	2100      	movs	r1, #0
 80101f6:	2043      	movs	r0, #67	; 0x43
 80101f8:	f7f4 ff55 	bl	80050a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80101fc:	2043      	movs	r0, #67	; 0x43
 80101fe:	f7f4 ff6e 	bl	80050de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8010202:	bf00      	nop
 8010204:	3760      	adds	r7, #96	; 0x60
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	40023800 	.word	0x40023800
 8010210:	40020000 	.word	0x40020000

08010214 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010228:	4619      	mov	r1, r3
 801022a:	4610      	mov	r0, r2
 801022c:	f7fe fc22 	bl	800ea74 <USBD_LL_SetupStage>
}
 8010230:	bf00      	nop
 8010232:	3708      	adds	r7, #8
 8010234:	46bd      	mov	sp, r7
 8010236:	bd80      	pop	{r7, pc}

08010238 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
 8010240:	460b      	mov	r3, r1
 8010242:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801024a:	78fa      	ldrb	r2, [r7, #3]
 801024c:	6879      	ldr	r1, [r7, #4]
 801024e:	4613      	mov	r3, r2
 8010250:	00db      	lsls	r3, r3, #3
 8010252:	1a9b      	subs	r3, r3, r2
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	440b      	add	r3, r1
 8010258:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801025c:	681a      	ldr	r2, [r3, #0]
 801025e:	78fb      	ldrb	r3, [r7, #3]
 8010260:	4619      	mov	r1, r3
 8010262:	f7fe fc5c 	bl	800eb1e <USBD_LL_DataOutStage>
}
 8010266:	bf00      	nop
 8010268:	3708      	adds	r7, #8
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b082      	sub	sp, #8
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
 8010276:	460b      	mov	r3, r1
 8010278:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8010280:	78fa      	ldrb	r2, [r7, #3]
 8010282:	6879      	ldr	r1, [r7, #4]
 8010284:	4613      	mov	r3, r2
 8010286:	00db      	lsls	r3, r3, #3
 8010288:	1a9b      	subs	r3, r3, r2
 801028a:	009b      	lsls	r3, r3, #2
 801028c:	440b      	add	r3, r1
 801028e:	3348      	adds	r3, #72	; 0x48
 8010290:	681a      	ldr	r2, [r3, #0]
 8010292:	78fb      	ldrb	r3, [r7, #3]
 8010294:	4619      	mov	r1, r3
 8010296:	f7fe fca5 	bl	800ebe4 <USBD_LL_DataInStage>
}
 801029a:	bf00      	nop
 801029c:	3708      	adds	r7, #8
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b082      	sub	sp, #8
 80102a6:	af00      	add	r7, sp, #0
 80102a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fe fdb9 	bl	800ee28 <USBD_LL_SOF>
}
 80102b6:	bf00      	nop
 80102b8:	3708      	adds	r7, #8
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b084      	sub	sp, #16
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80102c6:	2301      	movs	r3, #1
 80102c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	2b02      	cmp	r3, #2
 80102d0:	d001      	beq.n	80102d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80102d2:	f7f2 fd09 	bl	8002ce8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102dc:	7bfa      	ldrb	r2, [r7, #15]
 80102de:	4611      	mov	r1, r2
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7fe fd63 	bl	800edac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80102ec:	4618      	mov	r0, r3
 80102ee:	f7fe fd0f 	bl	800ed10 <USBD_LL_Reset>
}
 80102f2:	bf00      	nop
 80102f4:	3710      	adds	r7, #16
 80102f6:	46bd      	mov	sp, r7
 80102f8:	bd80      	pop	{r7, pc}
	...

080102fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80102fc:	b580      	push	{r7, lr}
 80102fe:	b082      	sub	sp, #8
 8010300:	af00      	add	r7, sp, #0
 8010302:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801030a:	4618      	mov	r0, r3
 801030c:	f7fe fd5e 	bl	800edcc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	687a      	ldr	r2, [r7, #4]
 801031c:	6812      	ldr	r2, [r2, #0]
 801031e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010322:	f043 0301 	orr.w	r3, r3, #1
 8010326:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	6a1b      	ldr	r3, [r3, #32]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d005      	beq.n	801033c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010330:	4b04      	ldr	r3, [pc, #16]	; (8010344 <HAL_PCD_SuspendCallback+0x48>)
 8010332:	691b      	ldr	r3, [r3, #16]
 8010334:	4a03      	ldr	r2, [pc, #12]	; (8010344 <HAL_PCD_SuspendCallback+0x48>)
 8010336:	f043 0306 	orr.w	r3, r3, #6
 801033a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801033c:	bf00      	nop
 801033e:	3708      	adds	r7, #8
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}
 8010344:	e000ed00 	.word	0xe000ed00

08010348 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010356:	4618      	mov	r0, r3
 8010358:	f7fe fd4e 	bl	800edf8 <USBD_LL_Resume>
}
 801035c:	bf00      	nop
 801035e:	3708      	adds	r7, #8
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010364:	b580      	push	{r7, lr}
 8010366:	b082      	sub	sp, #8
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	460b      	mov	r3, r1
 801036e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010376:	78fa      	ldrb	r2, [r7, #3]
 8010378:	4611      	mov	r1, r2
 801037a:	4618      	mov	r0, r3
 801037c:	f7fe fd9c 	bl	800eeb8 <USBD_LL_IsoOUTIncomplete>
}
 8010380:	bf00      	nop
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	460b      	mov	r3, r1
 8010392:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801039a:	78fa      	ldrb	r2, [r7, #3]
 801039c:	4611      	mov	r1, r2
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fe fd64 	bl	800ee6c <USBD_LL_IsoINIncomplete>
}
 80103a4:	bf00      	nop
 80103a6:	3708      	adds	r7, #8
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b082      	sub	sp, #8
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fe fda2 	bl	800ef04 <USBD_LL_DevConnected>
}
 80103c0:	bf00      	nop
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}

080103c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7fe fd9f 	bl	800ef1a <USBD_LL_DevDisconnected>
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	781b      	ldrb	r3, [r3, #0]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d13f      	bne.n	8010474 <USBD_LL_Init+0x90>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80103f4:	4a22      	ldr	r2, [pc, #136]	; (8010480 <USBD_LL_Init+0x9c>)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	4a20      	ldr	r2, [pc, #128]	; (8010480 <USBD_LL_Init+0x9c>)
 8010400:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8010404:	4b1e      	ldr	r3, [pc, #120]	; (8010480 <USBD_LL_Init+0x9c>)
 8010406:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801040a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801040c:	4b1c      	ldr	r3, [pc, #112]	; (8010480 <USBD_LL_Init+0x9c>)
 801040e:	2206      	movs	r2, #6
 8010410:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8010412:	4b1b      	ldr	r3, [pc, #108]	; (8010480 <USBD_LL_Init+0x9c>)
 8010414:	2202      	movs	r2, #2
 8010416:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8010418:	4b19      	ldr	r3, [pc, #100]	; (8010480 <USBD_LL_Init+0x9c>)
 801041a:	2200      	movs	r2, #0
 801041c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801041e:	4b18      	ldr	r3, [pc, #96]	; (8010480 <USBD_LL_Init+0x9c>)
 8010420:	2202      	movs	r2, #2
 8010422:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8010424:	4b16      	ldr	r3, [pc, #88]	; (8010480 <USBD_LL_Init+0x9c>)
 8010426:	2200      	movs	r2, #0
 8010428:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801042a:	4b15      	ldr	r3, [pc, #84]	; (8010480 <USBD_LL_Init+0x9c>)
 801042c:	2200      	movs	r2, #0
 801042e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8010430:	4b13      	ldr	r3, [pc, #76]	; (8010480 <USBD_LL_Init+0x9c>)
 8010432:	2200      	movs	r2, #0
 8010434:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8010436:	4b12      	ldr	r3, [pc, #72]	; (8010480 <USBD_LL_Init+0x9c>)
 8010438:	2200      	movs	r2, #0
 801043a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801043c:	4b10      	ldr	r3, [pc, #64]	; (8010480 <USBD_LL_Init+0x9c>)
 801043e:	2200      	movs	r2, #0
 8010440:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8010442:	4b0f      	ldr	r3, [pc, #60]	; (8010480 <USBD_LL_Init+0x9c>)
 8010444:	2200      	movs	r2, #0
 8010446:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8010448:	480d      	ldr	r0, [pc, #52]	; (8010480 <USBD_LL_Init+0x9c>)
 801044a:	f7f6 fd41 	bl	8006ed0 <HAL_PCD_Init>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d001      	beq.n	8010458 <USBD_LL_Init+0x74>
  {
    Error_Handler( );
 8010454:	f7f2 fc48 	bl	8002ce8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8010458:	2180      	movs	r1, #128	; 0x80
 801045a:	4809      	ldr	r0, [pc, #36]	; (8010480 <USBD_LL_Init+0x9c>)
 801045c:	f7f7 fed3 	bl	8008206 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8010460:	2240      	movs	r2, #64	; 0x40
 8010462:	2100      	movs	r1, #0
 8010464:	4806      	ldr	r0, [pc, #24]	; (8010480 <USBD_LL_Init+0x9c>)
 8010466:	f7f7 fe87 	bl	8008178 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801046a:	2280      	movs	r2, #128	; 0x80
 801046c:	2101      	movs	r1, #1
 801046e:	4804      	ldr	r0, [pc, #16]	; (8010480 <USBD_LL_Init+0x9c>)
 8010470:	f7f7 fe82 	bl	8008178 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8010474:	2300      	movs	r3, #0
}
 8010476:	4618      	mov	r0, r3
 8010478:	3708      	adds	r7, #8
 801047a:	46bd      	mov	sp, r7
 801047c:	bd80      	pop	{r7, pc}
 801047e:	bf00      	nop
 8010480:	20002568 	.word	0x20002568

08010484 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b084      	sub	sp, #16
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801048c:	2300      	movs	r3, #0
 801048e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010490:	2300      	movs	r3, #0
 8010492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801049a:	4618      	mov	r0, r3
 801049c:	f7f6 fe3c 	bl	8007118 <HAL_PCD_Start>
 80104a0:	4603      	mov	r3, r0
 80104a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104a4:	7bfb      	ldrb	r3, [r7, #15]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f000 f990 	bl	80107cc <USBD_Get_USB_Status>
 80104ac:	4603      	mov	r3, r0
 80104ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3710      	adds	r7, #16
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}

080104ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80104ba:	b580      	push	{r7, lr}
 80104bc:	b084      	sub	sp, #16
 80104be:	af00      	add	r7, sp, #0
 80104c0:	6078      	str	r0, [r7, #4]
 80104c2:	4608      	mov	r0, r1
 80104c4:	4611      	mov	r1, r2
 80104c6:	461a      	mov	r2, r3
 80104c8:	4603      	mov	r3, r0
 80104ca:	70fb      	strb	r3, [r7, #3]
 80104cc:	460b      	mov	r3, r1
 80104ce:	70bb      	strb	r3, [r7, #2]
 80104d0:	4613      	mov	r3, r2
 80104d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80104d4:	2300      	movs	r3, #0
 80104d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80104d8:	2300      	movs	r3, #0
 80104da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80104e2:	78bb      	ldrb	r3, [r7, #2]
 80104e4:	883a      	ldrh	r2, [r7, #0]
 80104e6:	78f9      	ldrb	r1, [r7, #3]
 80104e8:	f7f7 fa4d 	bl	8007986 <HAL_PCD_EP_Open>
 80104ec:	4603      	mov	r3, r0
 80104ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80104f0:	7bfb      	ldrb	r3, [r7, #15]
 80104f2:	4618      	mov	r0, r3
 80104f4:	f000 f96a 	bl	80107cc <USBD_Get_USB_Status>
 80104f8:	4603      	mov	r3, r0
 80104fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80104fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80104fe:	4618      	mov	r0, r3
 8010500:	3710      	adds	r7, #16
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}

08010506 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010506:	b580      	push	{r7, lr}
 8010508:	b084      	sub	sp, #16
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
 801050e:	460b      	mov	r3, r1
 8010510:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010512:	2300      	movs	r3, #0
 8010514:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010516:	2300      	movs	r3, #0
 8010518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010520:	78fa      	ldrb	r2, [r7, #3]
 8010522:	4611      	mov	r1, r2
 8010524:	4618      	mov	r0, r3
 8010526:	f7f7 fa96 	bl	8007a56 <HAL_PCD_EP_Close>
 801052a:	4603      	mov	r3, r0
 801052c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801052e:	7bfb      	ldrb	r3, [r7, #15]
 8010530:	4618      	mov	r0, r3
 8010532:	f000 f94b 	bl	80107cc <USBD_Get_USB_Status>
 8010536:	4603      	mov	r3, r0
 8010538:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801053a:	7bbb      	ldrb	r3, [r7, #14]
}
 801053c:	4618      	mov	r0, r3
 801053e:	3710      	adds	r7, #16
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b084      	sub	sp, #16
 8010548:	af00      	add	r7, sp, #0
 801054a:	6078      	str	r0, [r7, #4]
 801054c:	460b      	mov	r3, r1
 801054e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010550:	2300      	movs	r3, #0
 8010552:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010554:	2300      	movs	r3, #0
 8010556:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801055e:	78fa      	ldrb	r2, [r7, #3]
 8010560:	4611      	mov	r1, r2
 8010562:	4618      	mov	r0, r3
 8010564:	f7f7 fb6e 	bl	8007c44 <HAL_PCD_EP_SetStall>
 8010568:	4603      	mov	r3, r0
 801056a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801056c:	7bfb      	ldrb	r3, [r7, #15]
 801056e:	4618      	mov	r0, r3
 8010570:	f000 f92c 	bl	80107cc <USBD_Get_USB_Status>
 8010574:	4603      	mov	r3, r0
 8010576:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010578:	7bbb      	ldrb	r3, [r7, #14]
}
 801057a:	4618      	mov	r0, r3
 801057c:	3710      	adds	r7, #16
 801057e:	46bd      	mov	sp, r7
 8010580:	bd80      	pop	{r7, pc}

08010582 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010582:	b580      	push	{r7, lr}
 8010584:	b084      	sub	sp, #16
 8010586:	af00      	add	r7, sp, #0
 8010588:	6078      	str	r0, [r7, #4]
 801058a:	460b      	mov	r3, r1
 801058c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801058e:	2300      	movs	r3, #0
 8010590:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010592:	2300      	movs	r3, #0
 8010594:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801059c:	78fa      	ldrb	r2, [r7, #3]
 801059e:	4611      	mov	r1, r2
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7f7 fbb3 	bl	8007d0c <HAL_PCD_EP_ClrStall>
 80105a6:	4603      	mov	r3, r0
 80105a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80105aa:	7bfb      	ldrb	r3, [r7, #15]
 80105ac:	4618      	mov	r0, r3
 80105ae:	f000 f90d 	bl	80107cc <USBD_Get_USB_Status>
 80105b2:	4603      	mov	r3, r0
 80105b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80105b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80105b8:	4618      	mov	r0, r3
 80105ba:	3710      	adds	r7, #16
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}

080105c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80105c0:	b480      	push	{r7}
 80105c2:	b085      	sub	sp, #20
 80105c4:	af00      	add	r7, sp, #0
 80105c6:	6078      	str	r0, [r7, #4]
 80105c8:	460b      	mov	r3, r1
 80105ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80105d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80105d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	da0b      	bge.n	80105f4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80105dc:	78fb      	ldrb	r3, [r7, #3]
 80105de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105e2:	68f9      	ldr	r1, [r7, #12]
 80105e4:	4613      	mov	r3, r2
 80105e6:	00db      	lsls	r3, r3, #3
 80105e8:	1a9b      	subs	r3, r3, r2
 80105ea:	009b      	lsls	r3, r3, #2
 80105ec:	440b      	add	r3, r1
 80105ee:	333e      	adds	r3, #62	; 0x3e
 80105f0:	781b      	ldrb	r3, [r3, #0]
 80105f2:	e00b      	b.n	801060c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80105f4:	78fb      	ldrb	r3, [r7, #3]
 80105f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80105fa:	68f9      	ldr	r1, [r7, #12]
 80105fc:	4613      	mov	r3, r2
 80105fe:	00db      	lsls	r3, r3, #3
 8010600:	1a9b      	subs	r3, r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	440b      	add	r3, r1
 8010606:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801060a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801060c:	4618      	mov	r0, r3
 801060e:	3714      	adds	r7, #20
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr

08010618 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b084      	sub	sp, #16
 801061c:	af00      	add	r7, sp, #0
 801061e:	6078      	str	r0, [r7, #4]
 8010620:	460b      	mov	r3, r1
 8010622:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010624:	2300      	movs	r3, #0
 8010626:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010628:	2300      	movs	r3, #0
 801062a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010632:	78fa      	ldrb	r2, [r7, #3]
 8010634:	4611      	mov	r1, r2
 8010636:	4618      	mov	r0, r3
 8010638:	f7f7 f980 	bl	800793c <HAL_PCD_SetAddress>
 801063c:	4603      	mov	r3, r0
 801063e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010640:	7bfb      	ldrb	r3, [r7, #15]
 8010642:	4618      	mov	r0, r3
 8010644:	f000 f8c2 	bl	80107cc <USBD_Get_USB_Status>
 8010648:	4603      	mov	r3, r0
 801064a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801064c:	7bbb      	ldrb	r3, [r7, #14]
}
 801064e:	4618      	mov	r0, r3
 8010650:	3710      	adds	r7, #16
 8010652:	46bd      	mov	sp, r7
 8010654:	bd80      	pop	{r7, pc}

08010656 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010656:	b580      	push	{r7, lr}
 8010658:	b086      	sub	sp, #24
 801065a:	af00      	add	r7, sp, #0
 801065c:	60f8      	str	r0, [r7, #12]
 801065e:	607a      	str	r2, [r7, #4]
 8010660:	603b      	str	r3, [r7, #0]
 8010662:	460b      	mov	r3, r1
 8010664:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010666:	2300      	movs	r3, #0
 8010668:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801066a:	2300      	movs	r3, #0
 801066c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010674:	7af9      	ldrb	r1, [r7, #11]
 8010676:	683b      	ldr	r3, [r7, #0]
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	f7f7 fa99 	bl	8007bb0 <HAL_PCD_EP_Transmit>
 801067e:	4603      	mov	r3, r0
 8010680:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010682:	7dfb      	ldrb	r3, [r7, #23]
 8010684:	4618      	mov	r0, r3
 8010686:	f000 f8a1 	bl	80107cc <USBD_Get_USB_Status>
 801068a:	4603      	mov	r3, r0
 801068c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801068e:	7dbb      	ldrb	r3, [r7, #22]
}
 8010690:	4618      	mov	r0, r3
 8010692:	3718      	adds	r7, #24
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	b086      	sub	sp, #24
 801069c:	af00      	add	r7, sp, #0
 801069e:	60f8      	str	r0, [r7, #12]
 80106a0:	607a      	str	r2, [r7, #4]
 80106a2:	603b      	str	r3, [r7, #0]
 80106a4:	460b      	mov	r3, r1
 80106a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80106a8:	2300      	movs	r3, #0
 80106aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80106ac:	2300      	movs	r3, #0
 80106ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80106b6:	7af9      	ldrb	r1, [r7, #11]
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	687a      	ldr	r2, [r7, #4]
 80106bc:	f7f7 fa15 	bl	8007aea <HAL_PCD_EP_Receive>
 80106c0:	4603      	mov	r3, r0
 80106c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80106c4:	7dfb      	ldrb	r3, [r7, #23]
 80106c6:	4618      	mov	r0, r3
 80106c8:	f000 f880 	bl	80107cc <USBD_Get_USB_Status>
 80106cc:	4603      	mov	r3, r0
 80106ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80106d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3718      	adds	r7, #24
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80106da:	b580      	push	{r7, lr}
 80106dc:	b082      	sub	sp, #8
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
 80106e2:	460b      	mov	r3, r1
 80106e4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80106ec:	78fa      	ldrb	r2, [r7, #3]
 80106ee:	4611      	mov	r1, r2
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7f7 fa45 	bl	8007b80 <HAL_PCD_EP_GetRxCount>
 80106f6:	4603      	mov	r3, r0
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3708      	adds	r7, #8
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b082      	sub	sp, #8
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	460b      	mov	r3, r1
 801070a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801070c:	78fb      	ldrb	r3, [r7, #3]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d002      	beq.n	8010718 <HAL_PCDEx_LPM_Callback+0x18>
 8010712:	2b01      	cmp	r3, #1
 8010714:	d01f      	beq.n	8010756 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8010716:	e03b      	b.n	8010790 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	6a1b      	ldr	r3, [r3, #32]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d007      	beq.n	8010730 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8010720:	f7f0 fc84 	bl	800102c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010724:	4b1c      	ldr	r3, [pc, #112]	; (8010798 <HAL_PCDEx_LPM_Callback+0x98>)
 8010726:	691b      	ldr	r3, [r3, #16]
 8010728:	4a1b      	ldr	r2, [pc, #108]	; (8010798 <HAL_PCDEx_LPM_Callback+0x98>)
 801072a:	f023 0306 	bic.w	r3, r3, #6
 801072e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	6812      	ldr	r2, [r2, #0]
 801073e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010742:	f023 0301 	bic.w	r3, r3, #1
 8010746:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801074e:	4618      	mov	r0, r3
 8010750:	f7fe fb52 	bl	800edf8 <USBD_LL_Resume>
    break;
 8010754:	e01c      	b.n	8010790 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	687a      	ldr	r2, [r7, #4]
 8010762:	6812      	ldr	r2, [r2, #0]
 8010764:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010768:	f043 0301 	orr.w	r3, r3, #1
 801076c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8010774:	4618      	mov	r0, r3
 8010776:	f7fe fb29 	bl	800edcc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6a1b      	ldr	r3, [r3, #32]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d005      	beq.n	801078e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010782:	4b05      	ldr	r3, [pc, #20]	; (8010798 <HAL_PCDEx_LPM_Callback+0x98>)
 8010784:	691b      	ldr	r3, [r3, #16]
 8010786:	4a04      	ldr	r2, [pc, #16]	; (8010798 <HAL_PCDEx_LPM_Callback+0x98>)
 8010788:	f043 0306 	orr.w	r3, r3, #6
 801078c:	6113      	str	r3, [r2, #16]
    break;
 801078e:	bf00      	nop
}
 8010790:	bf00      	nop
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	e000ed00 	.word	0xe000ed00

0801079c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801079c:	b480      	push	{r7}
 801079e:	b083      	sub	sp, #12
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80107a4:	4b03      	ldr	r3, [pc, #12]	; (80107b4 <USBD_static_malloc+0x18>)
}
 80107a6:	4618      	mov	r0, r3
 80107a8:	370c      	adds	r7, #12
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	2000043c 	.word	0x2000043c

080107b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80107b8:	b480      	push	{r7}
 80107ba:	b083      	sub	sp, #12
 80107bc:	af00      	add	r7, sp, #0
 80107be:	6078      	str	r0, [r7, #4]

}
 80107c0:	bf00      	nop
 80107c2:	370c      	adds	r7, #12
 80107c4:	46bd      	mov	sp, r7
 80107c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ca:	4770      	bx	lr

080107cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b085      	sub	sp, #20
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	4603      	mov	r3, r0
 80107d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80107d6:	2300      	movs	r3, #0
 80107d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80107da:	79fb      	ldrb	r3, [r7, #7]
 80107dc:	2b03      	cmp	r3, #3
 80107de:	d817      	bhi.n	8010810 <USBD_Get_USB_Status+0x44>
 80107e0:	a201      	add	r2, pc, #4	; (adr r2, 80107e8 <USBD_Get_USB_Status+0x1c>)
 80107e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107e6:	bf00      	nop
 80107e8:	080107f9 	.word	0x080107f9
 80107ec:	080107ff 	.word	0x080107ff
 80107f0:	08010805 	.word	0x08010805
 80107f4:	0801080b 	.word	0x0801080b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80107f8:	2300      	movs	r3, #0
 80107fa:	73fb      	strb	r3, [r7, #15]
    break;
 80107fc:	e00b      	b.n	8010816 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80107fe:	2303      	movs	r3, #3
 8010800:	73fb      	strb	r3, [r7, #15]
    break;
 8010802:	e008      	b.n	8010816 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010804:	2301      	movs	r3, #1
 8010806:	73fb      	strb	r3, [r7, #15]
    break;
 8010808:	e005      	b.n	8010816 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801080a:	2303      	movs	r3, #3
 801080c:	73fb      	strb	r3, [r7, #15]
    break;
 801080e:	e002      	b.n	8010816 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010810:	2303      	movs	r3, #3
 8010812:	73fb      	strb	r3, [r7, #15]
    break;
 8010814:	bf00      	nop
  }
  return usb_status;
 8010816:	7bfb      	ldrb	r3, [r7, #15]
}
 8010818:	4618      	mov	r0, r3
 801081a:	3714      	adds	r7, #20
 801081c:	46bd      	mov	sp, r7
 801081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010822:	4770      	bx	lr

08010824 <__errno>:
 8010824:	4b01      	ldr	r3, [pc, #4]	; (801082c <__errno+0x8>)
 8010826:	6818      	ldr	r0, [r3, #0]
 8010828:	4770      	bx	lr
 801082a:	bf00      	nop
 801082c:	20000394 	.word	0x20000394

08010830 <__libc_init_array>:
 8010830:	b570      	push	{r4, r5, r6, lr}
 8010832:	4d0d      	ldr	r5, [pc, #52]	; (8010868 <__libc_init_array+0x38>)
 8010834:	4c0d      	ldr	r4, [pc, #52]	; (801086c <__libc_init_array+0x3c>)
 8010836:	1b64      	subs	r4, r4, r5
 8010838:	10a4      	asrs	r4, r4, #2
 801083a:	2600      	movs	r6, #0
 801083c:	42a6      	cmp	r6, r4
 801083e:	d109      	bne.n	8010854 <__libc_init_array+0x24>
 8010840:	4d0b      	ldr	r5, [pc, #44]	; (8010870 <__libc_init_array+0x40>)
 8010842:	4c0c      	ldr	r4, [pc, #48]	; (8010874 <__libc_init_array+0x44>)
 8010844:	f000 fc4e 	bl	80110e4 <_init>
 8010848:	1b64      	subs	r4, r4, r5
 801084a:	10a4      	asrs	r4, r4, #2
 801084c:	2600      	movs	r6, #0
 801084e:	42a6      	cmp	r6, r4
 8010850:	d105      	bne.n	801085e <__libc_init_array+0x2e>
 8010852:	bd70      	pop	{r4, r5, r6, pc}
 8010854:	f855 3b04 	ldr.w	r3, [r5], #4
 8010858:	4798      	blx	r3
 801085a:	3601      	adds	r6, #1
 801085c:	e7ee      	b.n	801083c <__libc_init_array+0xc>
 801085e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010862:	4798      	blx	r3
 8010864:	3601      	adds	r6, #1
 8010866:	e7f2      	b.n	801084e <__libc_init_array+0x1e>
 8010868:	08011764 	.word	0x08011764
 801086c:	08011764 	.word	0x08011764
 8010870:	08011764 	.word	0x08011764
 8010874:	08011768 	.word	0x08011768

08010878 <memset>:
 8010878:	4402      	add	r2, r0
 801087a:	4603      	mov	r3, r0
 801087c:	4293      	cmp	r3, r2
 801087e:	d100      	bne.n	8010882 <memset+0xa>
 8010880:	4770      	bx	lr
 8010882:	f803 1b01 	strb.w	r1, [r3], #1
 8010886:	e7f9      	b.n	801087c <memset+0x4>

08010888 <siprintf>:
 8010888:	b40e      	push	{r1, r2, r3}
 801088a:	b500      	push	{lr}
 801088c:	b09c      	sub	sp, #112	; 0x70
 801088e:	ab1d      	add	r3, sp, #116	; 0x74
 8010890:	9002      	str	r0, [sp, #8]
 8010892:	9006      	str	r0, [sp, #24]
 8010894:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010898:	4809      	ldr	r0, [pc, #36]	; (80108c0 <siprintf+0x38>)
 801089a:	9107      	str	r1, [sp, #28]
 801089c:	9104      	str	r1, [sp, #16]
 801089e:	4909      	ldr	r1, [pc, #36]	; (80108c4 <siprintf+0x3c>)
 80108a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80108a4:	9105      	str	r1, [sp, #20]
 80108a6:	6800      	ldr	r0, [r0, #0]
 80108a8:	9301      	str	r3, [sp, #4]
 80108aa:	a902      	add	r1, sp, #8
 80108ac:	f000 f868 	bl	8010980 <_svfiprintf_r>
 80108b0:	9b02      	ldr	r3, [sp, #8]
 80108b2:	2200      	movs	r2, #0
 80108b4:	701a      	strb	r2, [r3, #0]
 80108b6:	b01c      	add	sp, #112	; 0x70
 80108b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80108bc:	b003      	add	sp, #12
 80108be:	4770      	bx	lr
 80108c0:	20000394 	.word	0x20000394
 80108c4:	ffff0208 	.word	0xffff0208

080108c8 <__ssputs_r>:
 80108c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108cc:	688e      	ldr	r6, [r1, #8]
 80108ce:	429e      	cmp	r6, r3
 80108d0:	4682      	mov	sl, r0
 80108d2:	460c      	mov	r4, r1
 80108d4:	4690      	mov	r8, r2
 80108d6:	461f      	mov	r7, r3
 80108d8:	d838      	bhi.n	801094c <__ssputs_r+0x84>
 80108da:	898a      	ldrh	r2, [r1, #12]
 80108dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108e0:	d032      	beq.n	8010948 <__ssputs_r+0x80>
 80108e2:	6825      	ldr	r5, [r4, #0]
 80108e4:	6909      	ldr	r1, [r1, #16]
 80108e6:	eba5 0901 	sub.w	r9, r5, r1
 80108ea:	6965      	ldr	r5, [r4, #20]
 80108ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108f4:	3301      	adds	r3, #1
 80108f6:	444b      	add	r3, r9
 80108f8:	106d      	asrs	r5, r5, #1
 80108fa:	429d      	cmp	r5, r3
 80108fc:	bf38      	it	cc
 80108fe:	461d      	movcc	r5, r3
 8010900:	0553      	lsls	r3, r2, #21
 8010902:	d531      	bpl.n	8010968 <__ssputs_r+0xa0>
 8010904:	4629      	mov	r1, r5
 8010906:	f000 fb47 	bl	8010f98 <_malloc_r>
 801090a:	4606      	mov	r6, r0
 801090c:	b950      	cbnz	r0, 8010924 <__ssputs_r+0x5c>
 801090e:	230c      	movs	r3, #12
 8010910:	f8ca 3000 	str.w	r3, [sl]
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801091a:	81a3      	strh	r3, [r4, #12]
 801091c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010924:	6921      	ldr	r1, [r4, #16]
 8010926:	464a      	mov	r2, r9
 8010928:	f000 fabe 	bl	8010ea8 <memcpy>
 801092c:	89a3      	ldrh	r3, [r4, #12]
 801092e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010936:	81a3      	strh	r3, [r4, #12]
 8010938:	6126      	str	r6, [r4, #16]
 801093a:	6165      	str	r5, [r4, #20]
 801093c:	444e      	add	r6, r9
 801093e:	eba5 0509 	sub.w	r5, r5, r9
 8010942:	6026      	str	r6, [r4, #0]
 8010944:	60a5      	str	r5, [r4, #8]
 8010946:	463e      	mov	r6, r7
 8010948:	42be      	cmp	r6, r7
 801094a:	d900      	bls.n	801094e <__ssputs_r+0x86>
 801094c:	463e      	mov	r6, r7
 801094e:	4632      	mov	r2, r6
 8010950:	6820      	ldr	r0, [r4, #0]
 8010952:	4641      	mov	r1, r8
 8010954:	f000 fab6 	bl	8010ec4 <memmove>
 8010958:	68a3      	ldr	r3, [r4, #8]
 801095a:	6822      	ldr	r2, [r4, #0]
 801095c:	1b9b      	subs	r3, r3, r6
 801095e:	4432      	add	r2, r6
 8010960:	60a3      	str	r3, [r4, #8]
 8010962:	6022      	str	r2, [r4, #0]
 8010964:	2000      	movs	r0, #0
 8010966:	e7db      	b.n	8010920 <__ssputs_r+0x58>
 8010968:	462a      	mov	r2, r5
 801096a:	f000 fb6f 	bl	801104c <_realloc_r>
 801096e:	4606      	mov	r6, r0
 8010970:	2800      	cmp	r0, #0
 8010972:	d1e1      	bne.n	8010938 <__ssputs_r+0x70>
 8010974:	6921      	ldr	r1, [r4, #16]
 8010976:	4650      	mov	r0, sl
 8010978:	f000 fabe 	bl	8010ef8 <_free_r>
 801097c:	e7c7      	b.n	801090e <__ssputs_r+0x46>
	...

08010980 <_svfiprintf_r>:
 8010980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010984:	4698      	mov	r8, r3
 8010986:	898b      	ldrh	r3, [r1, #12]
 8010988:	061b      	lsls	r3, r3, #24
 801098a:	b09d      	sub	sp, #116	; 0x74
 801098c:	4607      	mov	r7, r0
 801098e:	460d      	mov	r5, r1
 8010990:	4614      	mov	r4, r2
 8010992:	d50e      	bpl.n	80109b2 <_svfiprintf_r+0x32>
 8010994:	690b      	ldr	r3, [r1, #16]
 8010996:	b963      	cbnz	r3, 80109b2 <_svfiprintf_r+0x32>
 8010998:	2140      	movs	r1, #64	; 0x40
 801099a:	f000 fafd 	bl	8010f98 <_malloc_r>
 801099e:	6028      	str	r0, [r5, #0]
 80109a0:	6128      	str	r0, [r5, #16]
 80109a2:	b920      	cbnz	r0, 80109ae <_svfiprintf_r+0x2e>
 80109a4:	230c      	movs	r3, #12
 80109a6:	603b      	str	r3, [r7, #0]
 80109a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80109ac:	e0d1      	b.n	8010b52 <_svfiprintf_r+0x1d2>
 80109ae:	2340      	movs	r3, #64	; 0x40
 80109b0:	616b      	str	r3, [r5, #20]
 80109b2:	2300      	movs	r3, #0
 80109b4:	9309      	str	r3, [sp, #36]	; 0x24
 80109b6:	2320      	movs	r3, #32
 80109b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80109bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80109c0:	2330      	movs	r3, #48	; 0x30
 80109c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010b6c <_svfiprintf_r+0x1ec>
 80109c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109ca:	f04f 0901 	mov.w	r9, #1
 80109ce:	4623      	mov	r3, r4
 80109d0:	469a      	mov	sl, r3
 80109d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109d6:	b10a      	cbz	r2, 80109dc <_svfiprintf_r+0x5c>
 80109d8:	2a25      	cmp	r2, #37	; 0x25
 80109da:	d1f9      	bne.n	80109d0 <_svfiprintf_r+0x50>
 80109dc:	ebba 0b04 	subs.w	fp, sl, r4
 80109e0:	d00b      	beq.n	80109fa <_svfiprintf_r+0x7a>
 80109e2:	465b      	mov	r3, fp
 80109e4:	4622      	mov	r2, r4
 80109e6:	4629      	mov	r1, r5
 80109e8:	4638      	mov	r0, r7
 80109ea:	f7ff ff6d 	bl	80108c8 <__ssputs_r>
 80109ee:	3001      	adds	r0, #1
 80109f0:	f000 80aa 	beq.w	8010b48 <_svfiprintf_r+0x1c8>
 80109f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109f6:	445a      	add	r2, fp
 80109f8:	9209      	str	r2, [sp, #36]	; 0x24
 80109fa:	f89a 3000 	ldrb.w	r3, [sl]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	f000 80a2 	beq.w	8010b48 <_svfiprintf_r+0x1c8>
 8010a04:	2300      	movs	r3, #0
 8010a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010a0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a0e:	f10a 0a01 	add.w	sl, sl, #1
 8010a12:	9304      	str	r3, [sp, #16]
 8010a14:	9307      	str	r3, [sp, #28]
 8010a16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010a1a:	931a      	str	r3, [sp, #104]	; 0x68
 8010a1c:	4654      	mov	r4, sl
 8010a1e:	2205      	movs	r2, #5
 8010a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a24:	4851      	ldr	r0, [pc, #324]	; (8010b6c <_svfiprintf_r+0x1ec>)
 8010a26:	f7ef fbfb 	bl	8000220 <memchr>
 8010a2a:	9a04      	ldr	r2, [sp, #16]
 8010a2c:	b9d8      	cbnz	r0, 8010a66 <_svfiprintf_r+0xe6>
 8010a2e:	06d0      	lsls	r0, r2, #27
 8010a30:	bf44      	itt	mi
 8010a32:	2320      	movmi	r3, #32
 8010a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a38:	0711      	lsls	r1, r2, #28
 8010a3a:	bf44      	itt	mi
 8010a3c:	232b      	movmi	r3, #43	; 0x2b
 8010a3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010a42:	f89a 3000 	ldrb.w	r3, [sl]
 8010a46:	2b2a      	cmp	r3, #42	; 0x2a
 8010a48:	d015      	beq.n	8010a76 <_svfiprintf_r+0xf6>
 8010a4a:	9a07      	ldr	r2, [sp, #28]
 8010a4c:	4654      	mov	r4, sl
 8010a4e:	2000      	movs	r0, #0
 8010a50:	f04f 0c0a 	mov.w	ip, #10
 8010a54:	4621      	mov	r1, r4
 8010a56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a5a:	3b30      	subs	r3, #48	; 0x30
 8010a5c:	2b09      	cmp	r3, #9
 8010a5e:	d94e      	bls.n	8010afe <_svfiprintf_r+0x17e>
 8010a60:	b1b0      	cbz	r0, 8010a90 <_svfiprintf_r+0x110>
 8010a62:	9207      	str	r2, [sp, #28]
 8010a64:	e014      	b.n	8010a90 <_svfiprintf_r+0x110>
 8010a66:	eba0 0308 	sub.w	r3, r0, r8
 8010a6a:	fa09 f303 	lsl.w	r3, r9, r3
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	9304      	str	r3, [sp, #16]
 8010a72:	46a2      	mov	sl, r4
 8010a74:	e7d2      	b.n	8010a1c <_svfiprintf_r+0x9c>
 8010a76:	9b03      	ldr	r3, [sp, #12]
 8010a78:	1d19      	adds	r1, r3, #4
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	9103      	str	r1, [sp, #12]
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	bfbb      	ittet	lt
 8010a82:	425b      	neglt	r3, r3
 8010a84:	f042 0202 	orrlt.w	r2, r2, #2
 8010a88:	9307      	strge	r3, [sp, #28]
 8010a8a:	9307      	strlt	r3, [sp, #28]
 8010a8c:	bfb8      	it	lt
 8010a8e:	9204      	strlt	r2, [sp, #16]
 8010a90:	7823      	ldrb	r3, [r4, #0]
 8010a92:	2b2e      	cmp	r3, #46	; 0x2e
 8010a94:	d10c      	bne.n	8010ab0 <_svfiprintf_r+0x130>
 8010a96:	7863      	ldrb	r3, [r4, #1]
 8010a98:	2b2a      	cmp	r3, #42	; 0x2a
 8010a9a:	d135      	bne.n	8010b08 <_svfiprintf_r+0x188>
 8010a9c:	9b03      	ldr	r3, [sp, #12]
 8010a9e:	1d1a      	adds	r2, r3, #4
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	9203      	str	r2, [sp, #12]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	bfb8      	it	lt
 8010aa8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010aac:	3402      	adds	r4, #2
 8010aae:	9305      	str	r3, [sp, #20]
 8010ab0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010b7c <_svfiprintf_r+0x1fc>
 8010ab4:	7821      	ldrb	r1, [r4, #0]
 8010ab6:	2203      	movs	r2, #3
 8010ab8:	4650      	mov	r0, sl
 8010aba:	f7ef fbb1 	bl	8000220 <memchr>
 8010abe:	b140      	cbz	r0, 8010ad2 <_svfiprintf_r+0x152>
 8010ac0:	2340      	movs	r3, #64	; 0x40
 8010ac2:	eba0 000a 	sub.w	r0, r0, sl
 8010ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8010aca:	9b04      	ldr	r3, [sp, #16]
 8010acc:	4303      	orrs	r3, r0
 8010ace:	3401      	adds	r4, #1
 8010ad0:	9304      	str	r3, [sp, #16]
 8010ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ad6:	4826      	ldr	r0, [pc, #152]	; (8010b70 <_svfiprintf_r+0x1f0>)
 8010ad8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010adc:	2206      	movs	r2, #6
 8010ade:	f7ef fb9f 	bl	8000220 <memchr>
 8010ae2:	2800      	cmp	r0, #0
 8010ae4:	d038      	beq.n	8010b58 <_svfiprintf_r+0x1d8>
 8010ae6:	4b23      	ldr	r3, [pc, #140]	; (8010b74 <_svfiprintf_r+0x1f4>)
 8010ae8:	bb1b      	cbnz	r3, 8010b32 <_svfiprintf_r+0x1b2>
 8010aea:	9b03      	ldr	r3, [sp, #12]
 8010aec:	3307      	adds	r3, #7
 8010aee:	f023 0307 	bic.w	r3, r3, #7
 8010af2:	3308      	adds	r3, #8
 8010af4:	9303      	str	r3, [sp, #12]
 8010af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010af8:	4433      	add	r3, r6
 8010afa:	9309      	str	r3, [sp, #36]	; 0x24
 8010afc:	e767      	b.n	80109ce <_svfiprintf_r+0x4e>
 8010afe:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b02:	460c      	mov	r4, r1
 8010b04:	2001      	movs	r0, #1
 8010b06:	e7a5      	b.n	8010a54 <_svfiprintf_r+0xd4>
 8010b08:	2300      	movs	r3, #0
 8010b0a:	3401      	adds	r4, #1
 8010b0c:	9305      	str	r3, [sp, #20]
 8010b0e:	4619      	mov	r1, r3
 8010b10:	f04f 0c0a 	mov.w	ip, #10
 8010b14:	4620      	mov	r0, r4
 8010b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b1a:	3a30      	subs	r2, #48	; 0x30
 8010b1c:	2a09      	cmp	r2, #9
 8010b1e:	d903      	bls.n	8010b28 <_svfiprintf_r+0x1a8>
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d0c5      	beq.n	8010ab0 <_svfiprintf_r+0x130>
 8010b24:	9105      	str	r1, [sp, #20]
 8010b26:	e7c3      	b.n	8010ab0 <_svfiprintf_r+0x130>
 8010b28:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b2c:	4604      	mov	r4, r0
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e7f0      	b.n	8010b14 <_svfiprintf_r+0x194>
 8010b32:	ab03      	add	r3, sp, #12
 8010b34:	9300      	str	r3, [sp, #0]
 8010b36:	462a      	mov	r2, r5
 8010b38:	4b0f      	ldr	r3, [pc, #60]	; (8010b78 <_svfiprintf_r+0x1f8>)
 8010b3a:	a904      	add	r1, sp, #16
 8010b3c:	4638      	mov	r0, r7
 8010b3e:	f3af 8000 	nop.w
 8010b42:	1c42      	adds	r2, r0, #1
 8010b44:	4606      	mov	r6, r0
 8010b46:	d1d6      	bne.n	8010af6 <_svfiprintf_r+0x176>
 8010b48:	89ab      	ldrh	r3, [r5, #12]
 8010b4a:	065b      	lsls	r3, r3, #25
 8010b4c:	f53f af2c 	bmi.w	80109a8 <_svfiprintf_r+0x28>
 8010b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b52:	b01d      	add	sp, #116	; 0x74
 8010b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b58:	ab03      	add	r3, sp, #12
 8010b5a:	9300      	str	r3, [sp, #0]
 8010b5c:	462a      	mov	r2, r5
 8010b5e:	4b06      	ldr	r3, [pc, #24]	; (8010b78 <_svfiprintf_r+0x1f8>)
 8010b60:	a904      	add	r1, sp, #16
 8010b62:	4638      	mov	r0, r7
 8010b64:	f000 f87a 	bl	8010c5c <_printf_i>
 8010b68:	e7eb      	b.n	8010b42 <_svfiprintf_r+0x1c2>
 8010b6a:	bf00      	nop
 8010b6c:	08011728 	.word	0x08011728
 8010b70:	08011732 	.word	0x08011732
 8010b74:	00000000 	.word	0x00000000
 8010b78:	080108c9 	.word	0x080108c9
 8010b7c:	0801172e 	.word	0x0801172e

08010b80 <_printf_common>:
 8010b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b84:	4616      	mov	r6, r2
 8010b86:	4699      	mov	r9, r3
 8010b88:	688a      	ldr	r2, [r1, #8]
 8010b8a:	690b      	ldr	r3, [r1, #16]
 8010b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b90:	4293      	cmp	r3, r2
 8010b92:	bfb8      	it	lt
 8010b94:	4613      	movlt	r3, r2
 8010b96:	6033      	str	r3, [r6, #0]
 8010b98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b9c:	4607      	mov	r7, r0
 8010b9e:	460c      	mov	r4, r1
 8010ba0:	b10a      	cbz	r2, 8010ba6 <_printf_common+0x26>
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	6033      	str	r3, [r6, #0]
 8010ba6:	6823      	ldr	r3, [r4, #0]
 8010ba8:	0699      	lsls	r1, r3, #26
 8010baa:	bf42      	ittt	mi
 8010bac:	6833      	ldrmi	r3, [r6, #0]
 8010bae:	3302      	addmi	r3, #2
 8010bb0:	6033      	strmi	r3, [r6, #0]
 8010bb2:	6825      	ldr	r5, [r4, #0]
 8010bb4:	f015 0506 	ands.w	r5, r5, #6
 8010bb8:	d106      	bne.n	8010bc8 <_printf_common+0x48>
 8010bba:	f104 0a19 	add.w	sl, r4, #25
 8010bbe:	68e3      	ldr	r3, [r4, #12]
 8010bc0:	6832      	ldr	r2, [r6, #0]
 8010bc2:	1a9b      	subs	r3, r3, r2
 8010bc4:	42ab      	cmp	r3, r5
 8010bc6:	dc26      	bgt.n	8010c16 <_printf_common+0x96>
 8010bc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010bcc:	1e13      	subs	r3, r2, #0
 8010bce:	6822      	ldr	r2, [r4, #0]
 8010bd0:	bf18      	it	ne
 8010bd2:	2301      	movne	r3, #1
 8010bd4:	0692      	lsls	r2, r2, #26
 8010bd6:	d42b      	bmi.n	8010c30 <_printf_common+0xb0>
 8010bd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bdc:	4649      	mov	r1, r9
 8010bde:	4638      	mov	r0, r7
 8010be0:	47c0      	blx	r8
 8010be2:	3001      	adds	r0, #1
 8010be4:	d01e      	beq.n	8010c24 <_printf_common+0xa4>
 8010be6:	6823      	ldr	r3, [r4, #0]
 8010be8:	68e5      	ldr	r5, [r4, #12]
 8010bea:	6832      	ldr	r2, [r6, #0]
 8010bec:	f003 0306 	and.w	r3, r3, #6
 8010bf0:	2b04      	cmp	r3, #4
 8010bf2:	bf08      	it	eq
 8010bf4:	1aad      	subeq	r5, r5, r2
 8010bf6:	68a3      	ldr	r3, [r4, #8]
 8010bf8:	6922      	ldr	r2, [r4, #16]
 8010bfa:	bf0c      	ite	eq
 8010bfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010c00:	2500      	movne	r5, #0
 8010c02:	4293      	cmp	r3, r2
 8010c04:	bfc4      	itt	gt
 8010c06:	1a9b      	subgt	r3, r3, r2
 8010c08:	18ed      	addgt	r5, r5, r3
 8010c0a:	2600      	movs	r6, #0
 8010c0c:	341a      	adds	r4, #26
 8010c0e:	42b5      	cmp	r5, r6
 8010c10:	d11a      	bne.n	8010c48 <_printf_common+0xc8>
 8010c12:	2000      	movs	r0, #0
 8010c14:	e008      	b.n	8010c28 <_printf_common+0xa8>
 8010c16:	2301      	movs	r3, #1
 8010c18:	4652      	mov	r2, sl
 8010c1a:	4649      	mov	r1, r9
 8010c1c:	4638      	mov	r0, r7
 8010c1e:	47c0      	blx	r8
 8010c20:	3001      	adds	r0, #1
 8010c22:	d103      	bne.n	8010c2c <_printf_common+0xac>
 8010c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c2c:	3501      	adds	r5, #1
 8010c2e:	e7c6      	b.n	8010bbe <_printf_common+0x3e>
 8010c30:	18e1      	adds	r1, r4, r3
 8010c32:	1c5a      	adds	r2, r3, #1
 8010c34:	2030      	movs	r0, #48	; 0x30
 8010c36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c3a:	4422      	add	r2, r4
 8010c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c44:	3302      	adds	r3, #2
 8010c46:	e7c7      	b.n	8010bd8 <_printf_common+0x58>
 8010c48:	2301      	movs	r3, #1
 8010c4a:	4622      	mov	r2, r4
 8010c4c:	4649      	mov	r1, r9
 8010c4e:	4638      	mov	r0, r7
 8010c50:	47c0      	blx	r8
 8010c52:	3001      	adds	r0, #1
 8010c54:	d0e6      	beq.n	8010c24 <_printf_common+0xa4>
 8010c56:	3601      	adds	r6, #1
 8010c58:	e7d9      	b.n	8010c0e <_printf_common+0x8e>
	...

08010c5c <_printf_i>:
 8010c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010c60:	460c      	mov	r4, r1
 8010c62:	4691      	mov	r9, r2
 8010c64:	7e27      	ldrb	r7, [r4, #24]
 8010c66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8010c68:	2f78      	cmp	r7, #120	; 0x78
 8010c6a:	4680      	mov	r8, r0
 8010c6c:	469a      	mov	sl, r3
 8010c6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010c72:	d807      	bhi.n	8010c84 <_printf_i+0x28>
 8010c74:	2f62      	cmp	r7, #98	; 0x62
 8010c76:	d80a      	bhi.n	8010c8e <_printf_i+0x32>
 8010c78:	2f00      	cmp	r7, #0
 8010c7a:	f000 80d8 	beq.w	8010e2e <_printf_i+0x1d2>
 8010c7e:	2f58      	cmp	r7, #88	; 0x58
 8010c80:	f000 80a3 	beq.w	8010dca <_printf_i+0x16e>
 8010c84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010c88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010c8c:	e03a      	b.n	8010d04 <_printf_i+0xa8>
 8010c8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010c92:	2b15      	cmp	r3, #21
 8010c94:	d8f6      	bhi.n	8010c84 <_printf_i+0x28>
 8010c96:	a001      	add	r0, pc, #4	; (adr r0, 8010c9c <_printf_i+0x40>)
 8010c98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8010c9c:	08010cf5 	.word	0x08010cf5
 8010ca0:	08010d09 	.word	0x08010d09
 8010ca4:	08010c85 	.word	0x08010c85
 8010ca8:	08010c85 	.word	0x08010c85
 8010cac:	08010c85 	.word	0x08010c85
 8010cb0:	08010c85 	.word	0x08010c85
 8010cb4:	08010d09 	.word	0x08010d09
 8010cb8:	08010c85 	.word	0x08010c85
 8010cbc:	08010c85 	.word	0x08010c85
 8010cc0:	08010c85 	.word	0x08010c85
 8010cc4:	08010c85 	.word	0x08010c85
 8010cc8:	08010e15 	.word	0x08010e15
 8010ccc:	08010d39 	.word	0x08010d39
 8010cd0:	08010df7 	.word	0x08010df7
 8010cd4:	08010c85 	.word	0x08010c85
 8010cd8:	08010c85 	.word	0x08010c85
 8010cdc:	08010e37 	.word	0x08010e37
 8010ce0:	08010c85 	.word	0x08010c85
 8010ce4:	08010d39 	.word	0x08010d39
 8010ce8:	08010c85 	.word	0x08010c85
 8010cec:	08010c85 	.word	0x08010c85
 8010cf0:	08010dff 	.word	0x08010dff
 8010cf4:	680b      	ldr	r3, [r1, #0]
 8010cf6:	1d1a      	adds	r2, r3, #4
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	600a      	str	r2, [r1, #0]
 8010cfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8010d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010d04:	2301      	movs	r3, #1
 8010d06:	e0a3      	b.n	8010e50 <_printf_i+0x1f4>
 8010d08:	6825      	ldr	r5, [r4, #0]
 8010d0a:	6808      	ldr	r0, [r1, #0]
 8010d0c:	062e      	lsls	r6, r5, #24
 8010d0e:	f100 0304 	add.w	r3, r0, #4
 8010d12:	d50a      	bpl.n	8010d2a <_printf_i+0xce>
 8010d14:	6805      	ldr	r5, [r0, #0]
 8010d16:	600b      	str	r3, [r1, #0]
 8010d18:	2d00      	cmp	r5, #0
 8010d1a:	da03      	bge.n	8010d24 <_printf_i+0xc8>
 8010d1c:	232d      	movs	r3, #45	; 0x2d
 8010d1e:	426d      	negs	r5, r5
 8010d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010d24:	485e      	ldr	r0, [pc, #376]	; (8010ea0 <_printf_i+0x244>)
 8010d26:	230a      	movs	r3, #10
 8010d28:	e019      	b.n	8010d5e <_printf_i+0x102>
 8010d2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8010d2e:	6805      	ldr	r5, [r0, #0]
 8010d30:	600b      	str	r3, [r1, #0]
 8010d32:	bf18      	it	ne
 8010d34:	b22d      	sxthne	r5, r5
 8010d36:	e7ef      	b.n	8010d18 <_printf_i+0xbc>
 8010d38:	680b      	ldr	r3, [r1, #0]
 8010d3a:	6825      	ldr	r5, [r4, #0]
 8010d3c:	1d18      	adds	r0, r3, #4
 8010d3e:	6008      	str	r0, [r1, #0]
 8010d40:	0628      	lsls	r0, r5, #24
 8010d42:	d501      	bpl.n	8010d48 <_printf_i+0xec>
 8010d44:	681d      	ldr	r5, [r3, #0]
 8010d46:	e002      	b.n	8010d4e <_printf_i+0xf2>
 8010d48:	0669      	lsls	r1, r5, #25
 8010d4a:	d5fb      	bpl.n	8010d44 <_printf_i+0xe8>
 8010d4c:	881d      	ldrh	r5, [r3, #0]
 8010d4e:	4854      	ldr	r0, [pc, #336]	; (8010ea0 <_printf_i+0x244>)
 8010d50:	2f6f      	cmp	r7, #111	; 0x6f
 8010d52:	bf0c      	ite	eq
 8010d54:	2308      	moveq	r3, #8
 8010d56:	230a      	movne	r3, #10
 8010d58:	2100      	movs	r1, #0
 8010d5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d5e:	6866      	ldr	r6, [r4, #4]
 8010d60:	60a6      	str	r6, [r4, #8]
 8010d62:	2e00      	cmp	r6, #0
 8010d64:	bfa2      	ittt	ge
 8010d66:	6821      	ldrge	r1, [r4, #0]
 8010d68:	f021 0104 	bicge.w	r1, r1, #4
 8010d6c:	6021      	strge	r1, [r4, #0]
 8010d6e:	b90d      	cbnz	r5, 8010d74 <_printf_i+0x118>
 8010d70:	2e00      	cmp	r6, #0
 8010d72:	d04d      	beq.n	8010e10 <_printf_i+0x1b4>
 8010d74:	4616      	mov	r6, r2
 8010d76:	fbb5 f1f3 	udiv	r1, r5, r3
 8010d7a:	fb03 5711 	mls	r7, r3, r1, r5
 8010d7e:	5dc7      	ldrb	r7, [r0, r7]
 8010d80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010d84:	462f      	mov	r7, r5
 8010d86:	42bb      	cmp	r3, r7
 8010d88:	460d      	mov	r5, r1
 8010d8a:	d9f4      	bls.n	8010d76 <_printf_i+0x11a>
 8010d8c:	2b08      	cmp	r3, #8
 8010d8e:	d10b      	bne.n	8010da8 <_printf_i+0x14c>
 8010d90:	6823      	ldr	r3, [r4, #0]
 8010d92:	07df      	lsls	r7, r3, #31
 8010d94:	d508      	bpl.n	8010da8 <_printf_i+0x14c>
 8010d96:	6923      	ldr	r3, [r4, #16]
 8010d98:	6861      	ldr	r1, [r4, #4]
 8010d9a:	4299      	cmp	r1, r3
 8010d9c:	bfde      	ittt	le
 8010d9e:	2330      	movle	r3, #48	; 0x30
 8010da0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010da4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8010da8:	1b92      	subs	r2, r2, r6
 8010daa:	6122      	str	r2, [r4, #16]
 8010dac:	f8cd a000 	str.w	sl, [sp]
 8010db0:	464b      	mov	r3, r9
 8010db2:	aa03      	add	r2, sp, #12
 8010db4:	4621      	mov	r1, r4
 8010db6:	4640      	mov	r0, r8
 8010db8:	f7ff fee2 	bl	8010b80 <_printf_common>
 8010dbc:	3001      	adds	r0, #1
 8010dbe:	d14c      	bne.n	8010e5a <_printf_i+0x1fe>
 8010dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010dc4:	b004      	add	sp, #16
 8010dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dca:	4835      	ldr	r0, [pc, #212]	; (8010ea0 <_printf_i+0x244>)
 8010dcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8010dd0:	6823      	ldr	r3, [r4, #0]
 8010dd2:	680e      	ldr	r6, [r1, #0]
 8010dd4:	061f      	lsls	r7, r3, #24
 8010dd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8010dda:	600e      	str	r6, [r1, #0]
 8010ddc:	d514      	bpl.n	8010e08 <_printf_i+0x1ac>
 8010dde:	07d9      	lsls	r1, r3, #31
 8010de0:	bf44      	itt	mi
 8010de2:	f043 0320 	orrmi.w	r3, r3, #32
 8010de6:	6023      	strmi	r3, [r4, #0]
 8010de8:	b91d      	cbnz	r5, 8010df2 <_printf_i+0x196>
 8010dea:	6823      	ldr	r3, [r4, #0]
 8010dec:	f023 0320 	bic.w	r3, r3, #32
 8010df0:	6023      	str	r3, [r4, #0]
 8010df2:	2310      	movs	r3, #16
 8010df4:	e7b0      	b.n	8010d58 <_printf_i+0xfc>
 8010df6:	6823      	ldr	r3, [r4, #0]
 8010df8:	f043 0320 	orr.w	r3, r3, #32
 8010dfc:	6023      	str	r3, [r4, #0]
 8010dfe:	2378      	movs	r3, #120	; 0x78
 8010e00:	4828      	ldr	r0, [pc, #160]	; (8010ea4 <_printf_i+0x248>)
 8010e02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010e06:	e7e3      	b.n	8010dd0 <_printf_i+0x174>
 8010e08:	065e      	lsls	r6, r3, #25
 8010e0a:	bf48      	it	mi
 8010e0c:	b2ad      	uxthmi	r5, r5
 8010e0e:	e7e6      	b.n	8010dde <_printf_i+0x182>
 8010e10:	4616      	mov	r6, r2
 8010e12:	e7bb      	b.n	8010d8c <_printf_i+0x130>
 8010e14:	680b      	ldr	r3, [r1, #0]
 8010e16:	6826      	ldr	r6, [r4, #0]
 8010e18:	6960      	ldr	r0, [r4, #20]
 8010e1a:	1d1d      	adds	r5, r3, #4
 8010e1c:	600d      	str	r5, [r1, #0]
 8010e1e:	0635      	lsls	r5, r6, #24
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	d501      	bpl.n	8010e28 <_printf_i+0x1cc>
 8010e24:	6018      	str	r0, [r3, #0]
 8010e26:	e002      	b.n	8010e2e <_printf_i+0x1d2>
 8010e28:	0671      	lsls	r1, r6, #25
 8010e2a:	d5fb      	bpl.n	8010e24 <_printf_i+0x1c8>
 8010e2c:	8018      	strh	r0, [r3, #0]
 8010e2e:	2300      	movs	r3, #0
 8010e30:	6123      	str	r3, [r4, #16]
 8010e32:	4616      	mov	r6, r2
 8010e34:	e7ba      	b.n	8010dac <_printf_i+0x150>
 8010e36:	680b      	ldr	r3, [r1, #0]
 8010e38:	1d1a      	adds	r2, r3, #4
 8010e3a:	600a      	str	r2, [r1, #0]
 8010e3c:	681e      	ldr	r6, [r3, #0]
 8010e3e:	6862      	ldr	r2, [r4, #4]
 8010e40:	2100      	movs	r1, #0
 8010e42:	4630      	mov	r0, r6
 8010e44:	f7ef f9ec 	bl	8000220 <memchr>
 8010e48:	b108      	cbz	r0, 8010e4e <_printf_i+0x1f2>
 8010e4a:	1b80      	subs	r0, r0, r6
 8010e4c:	6060      	str	r0, [r4, #4]
 8010e4e:	6863      	ldr	r3, [r4, #4]
 8010e50:	6123      	str	r3, [r4, #16]
 8010e52:	2300      	movs	r3, #0
 8010e54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e58:	e7a8      	b.n	8010dac <_printf_i+0x150>
 8010e5a:	6923      	ldr	r3, [r4, #16]
 8010e5c:	4632      	mov	r2, r6
 8010e5e:	4649      	mov	r1, r9
 8010e60:	4640      	mov	r0, r8
 8010e62:	47d0      	blx	sl
 8010e64:	3001      	adds	r0, #1
 8010e66:	d0ab      	beq.n	8010dc0 <_printf_i+0x164>
 8010e68:	6823      	ldr	r3, [r4, #0]
 8010e6a:	079b      	lsls	r3, r3, #30
 8010e6c:	d413      	bmi.n	8010e96 <_printf_i+0x23a>
 8010e6e:	68e0      	ldr	r0, [r4, #12]
 8010e70:	9b03      	ldr	r3, [sp, #12]
 8010e72:	4298      	cmp	r0, r3
 8010e74:	bfb8      	it	lt
 8010e76:	4618      	movlt	r0, r3
 8010e78:	e7a4      	b.n	8010dc4 <_printf_i+0x168>
 8010e7a:	2301      	movs	r3, #1
 8010e7c:	4632      	mov	r2, r6
 8010e7e:	4649      	mov	r1, r9
 8010e80:	4640      	mov	r0, r8
 8010e82:	47d0      	blx	sl
 8010e84:	3001      	adds	r0, #1
 8010e86:	d09b      	beq.n	8010dc0 <_printf_i+0x164>
 8010e88:	3501      	adds	r5, #1
 8010e8a:	68e3      	ldr	r3, [r4, #12]
 8010e8c:	9903      	ldr	r1, [sp, #12]
 8010e8e:	1a5b      	subs	r3, r3, r1
 8010e90:	42ab      	cmp	r3, r5
 8010e92:	dcf2      	bgt.n	8010e7a <_printf_i+0x21e>
 8010e94:	e7eb      	b.n	8010e6e <_printf_i+0x212>
 8010e96:	2500      	movs	r5, #0
 8010e98:	f104 0619 	add.w	r6, r4, #25
 8010e9c:	e7f5      	b.n	8010e8a <_printf_i+0x22e>
 8010e9e:	bf00      	nop
 8010ea0:	08011739 	.word	0x08011739
 8010ea4:	0801174a 	.word	0x0801174a

08010ea8 <memcpy>:
 8010ea8:	440a      	add	r2, r1
 8010eaa:	4291      	cmp	r1, r2
 8010eac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010eb0:	d100      	bne.n	8010eb4 <memcpy+0xc>
 8010eb2:	4770      	bx	lr
 8010eb4:	b510      	push	{r4, lr}
 8010eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ebe:	4291      	cmp	r1, r2
 8010ec0:	d1f9      	bne.n	8010eb6 <memcpy+0xe>
 8010ec2:	bd10      	pop	{r4, pc}

08010ec4 <memmove>:
 8010ec4:	4288      	cmp	r0, r1
 8010ec6:	b510      	push	{r4, lr}
 8010ec8:	eb01 0402 	add.w	r4, r1, r2
 8010ecc:	d902      	bls.n	8010ed4 <memmove+0x10>
 8010ece:	4284      	cmp	r4, r0
 8010ed0:	4623      	mov	r3, r4
 8010ed2:	d807      	bhi.n	8010ee4 <memmove+0x20>
 8010ed4:	1e43      	subs	r3, r0, #1
 8010ed6:	42a1      	cmp	r1, r4
 8010ed8:	d008      	beq.n	8010eec <memmove+0x28>
 8010eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010ee2:	e7f8      	b.n	8010ed6 <memmove+0x12>
 8010ee4:	4402      	add	r2, r0
 8010ee6:	4601      	mov	r1, r0
 8010ee8:	428a      	cmp	r2, r1
 8010eea:	d100      	bne.n	8010eee <memmove+0x2a>
 8010eec:	bd10      	pop	{r4, pc}
 8010eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010ef6:	e7f7      	b.n	8010ee8 <memmove+0x24>

08010ef8 <_free_r>:
 8010ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010efa:	2900      	cmp	r1, #0
 8010efc:	d048      	beq.n	8010f90 <_free_r+0x98>
 8010efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f02:	9001      	str	r0, [sp, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	f1a1 0404 	sub.w	r4, r1, #4
 8010f0a:	bfb8      	it	lt
 8010f0c:	18e4      	addlt	r4, r4, r3
 8010f0e:	f000 f8d3 	bl	80110b8 <__malloc_lock>
 8010f12:	4a20      	ldr	r2, [pc, #128]	; (8010f94 <_free_r+0x9c>)
 8010f14:	9801      	ldr	r0, [sp, #4]
 8010f16:	6813      	ldr	r3, [r2, #0]
 8010f18:	4615      	mov	r5, r2
 8010f1a:	b933      	cbnz	r3, 8010f2a <_free_r+0x32>
 8010f1c:	6063      	str	r3, [r4, #4]
 8010f1e:	6014      	str	r4, [r2, #0]
 8010f20:	b003      	add	sp, #12
 8010f22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f26:	f000 b8cd 	b.w	80110c4 <__malloc_unlock>
 8010f2a:	42a3      	cmp	r3, r4
 8010f2c:	d90b      	bls.n	8010f46 <_free_r+0x4e>
 8010f2e:	6821      	ldr	r1, [r4, #0]
 8010f30:	1862      	adds	r2, r4, r1
 8010f32:	4293      	cmp	r3, r2
 8010f34:	bf04      	itt	eq
 8010f36:	681a      	ldreq	r2, [r3, #0]
 8010f38:	685b      	ldreq	r3, [r3, #4]
 8010f3a:	6063      	str	r3, [r4, #4]
 8010f3c:	bf04      	itt	eq
 8010f3e:	1852      	addeq	r2, r2, r1
 8010f40:	6022      	streq	r2, [r4, #0]
 8010f42:	602c      	str	r4, [r5, #0]
 8010f44:	e7ec      	b.n	8010f20 <_free_r+0x28>
 8010f46:	461a      	mov	r2, r3
 8010f48:	685b      	ldr	r3, [r3, #4]
 8010f4a:	b10b      	cbz	r3, 8010f50 <_free_r+0x58>
 8010f4c:	42a3      	cmp	r3, r4
 8010f4e:	d9fa      	bls.n	8010f46 <_free_r+0x4e>
 8010f50:	6811      	ldr	r1, [r2, #0]
 8010f52:	1855      	adds	r5, r2, r1
 8010f54:	42a5      	cmp	r5, r4
 8010f56:	d10b      	bne.n	8010f70 <_free_r+0x78>
 8010f58:	6824      	ldr	r4, [r4, #0]
 8010f5a:	4421      	add	r1, r4
 8010f5c:	1854      	adds	r4, r2, r1
 8010f5e:	42a3      	cmp	r3, r4
 8010f60:	6011      	str	r1, [r2, #0]
 8010f62:	d1dd      	bne.n	8010f20 <_free_r+0x28>
 8010f64:	681c      	ldr	r4, [r3, #0]
 8010f66:	685b      	ldr	r3, [r3, #4]
 8010f68:	6053      	str	r3, [r2, #4]
 8010f6a:	4421      	add	r1, r4
 8010f6c:	6011      	str	r1, [r2, #0]
 8010f6e:	e7d7      	b.n	8010f20 <_free_r+0x28>
 8010f70:	d902      	bls.n	8010f78 <_free_r+0x80>
 8010f72:	230c      	movs	r3, #12
 8010f74:	6003      	str	r3, [r0, #0]
 8010f76:	e7d3      	b.n	8010f20 <_free_r+0x28>
 8010f78:	6825      	ldr	r5, [r4, #0]
 8010f7a:	1961      	adds	r1, r4, r5
 8010f7c:	428b      	cmp	r3, r1
 8010f7e:	bf04      	itt	eq
 8010f80:	6819      	ldreq	r1, [r3, #0]
 8010f82:	685b      	ldreq	r3, [r3, #4]
 8010f84:	6063      	str	r3, [r4, #4]
 8010f86:	bf04      	itt	eq
 8010f88:	1949      	addeq	r1, r1, r5
 8010f8a:	6021      	streq	r1, [r4, #0]
 8010f8c:	6054      	str	r4, [r2, #4]
 8010f8e:	e7c7      	b.n	8010f20 <_free_r+0x28>
 8010f90:	b003      	add	sp, #12
 8010f92:	bd30      	pop	{r4, r5, pc}
 8010f94:	2000065c 	.word	0x2000065c

08010f98 <_malloc_r>:
 8010f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f9a:	1ccd      	adds	r5, r1, #3
 8010f9c:	f025 0503 	bic.w	r5, r5, #3
 8010fa0:	3508      	adds	r5, #8
 8010fa2:	2d0c      	cmp	r5, #12
 8010fa4:	bf38      	it	cc
 8010fa6:	250c      	movcc	r5, #12
 8010fa8:	2d00      	cmp	r5, #0
 8010faa:	4606      	mov	r6, r0
 8010fac:	db01      	blt.n	8010fb2 <_malloc_r+0x1a>
 8010fae:	42a9      	cmp	r1, r5
 8010fb0:	d903      	bls.n	8010fba <_malloc_r+0x22>
 8010fb2:	230c      	movs	r3, #12
 8010fb4:	6033      	str	r3, [r6, #0]
 8010fb6:	2000      	movs	r0, #0
 8010fb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fba:	f000 f87d 	bl	80110b8 <__malloc_lock>
 8010fbe:	4921      	ldr	r1, [pc, #132]	; (8011044 <_malloc_r+0xac>)
 8010fc0:	680a      	ldr	r2, [r1, #0]
 8010fc2:	4614      	mov	r4, r2
 8010fc4:	b99c      	cbnz	r4, 8010fee <_malloc_r+0x56>
 8010fc6:	4f20      	ldr	r7, [pc, #128]	; (8011048 <_malloc_r+0xb0>)
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	b923      	cbnz	r3, 8010fd6 <_malloc_r+0x3e>
 8010fcc:	4621      	mov	r1, r4
 8010fce:	4630      	mov	r0, r6
 8010fd0:	f000 f862 	bl	8011098 <_sbrk_r>
 8010fd4:	6038      	str	r0, [r7, #0]
 8010fd6:	4629      	mov	r1, r5
 8010fd8:	4630      	mov	r0, r6
 8010fda:	f000 f85d 	bl	8011098 <_sbrk_r>
 8010fde:	1c43      	adds	r3, r0, #1
 8010fe0:	d123      	bne.n	801102a <_malloc_r+0x92>
 8010fe2:	230c      	movs	r3, #12
 8010fe4:	6033      	str	r3, [r6, #0]
 8010fe6:	4630      	mov	r0, r6
 8010fe8:	f000 f86c 	bl	80110c4 <__malloc_unlock>
 8010fec:	e7e3      	b.n	8010fb6 <_malloc_r+0x1e>
 8010fee:	6823      	ldr	r3, [r4, #0]
 8010ff0:	1b5b      	subs	r3, r3, r5
 8010ff2:	d417      	bmi.n	8011024 <_malloc_r+0x8c>
 8010ff4:	2b0b      	cmp	r3, #11
 8010ff6:	d903      	bls.n	8011000 <_malloc_r+0x68>
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	441c      	add	r4, r3
 8010ffc:	6025      	str	r5, [r4, #0]
 8010ffe:	e004      	b.n	801100a <_malloc_r+0x72>
 8011000:	6863      	ldr	r3, [r4, #4]
 8011002:	42a2      	cmp	r2, r4
 8011004:	bf0c      	ite	eq
 8011006:	600b      	streq	r3, [r1, #0]
 8011008:	6053      	strne	r3, [r2, #4]
 801100a:	4630      	mov	r0, r6
 801100c:	f000 f85a 	bl	80110c4 <__malloc_unlock>
 8011010:	f104 000b 	add.w	r0, r4, #11
 8011014:	1d23      	adds	r3, r4, #4
 8011016:	f020 0007 	bic.w	r0, r0, #7
 801101a:	1ac2      	subs	r2, r0, r3
 801101c:	d0cc      	beq.n	8010fb8 <_malloc_r+0x20>
 801101e:	1a1b      	subs	r3, r3, r0
 8011020:	50a3      	str	r3, [r4, r2]
 8011022:	e7c9      	b.n	8010fb8 <_malloc_r+0x20>
 8011024:	4622      	mov	r2, r4
 8011026:	6864      	ldr	r4, [r4, #4]
 8011028:	e7cc      	b.n	8010fc4 <_malloc_r+0x2c>
 801102a:	1cc4      	adds	r4, r0, #3
 801102c:	f024 0403 	bic.w	r4, r4, #3
 8011030:	42a0      	cmp	r0, r4
 8011032:	d0e3      	beq.n	8010ffc <_malloc_r+0x64>
 8011034:	1a21      	subs	r1, r4, r0
 8011036:	4630      	mov	r0, r6
 8011038:	f000 f82e 	bl	8011098 <_sbrk_r>
 801103c:	3001      	adds	r0, #1
 801103e:	d1dd      	bne.n	8010ffc <_malloc_r+0x64>
 8011040:	e7cf      	b.n	8010fe2 <_malloc_r+0x4a>
 8011042:	bf00      	nop
 8011044:	2000065c 	.word	0x2000065c
 8011048:	20000660 	.word	0x20000660

0801104c <_realloc_r>:
 801104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801104e:	4607      	mov	r7, r0
 8011050:	4614      	mov	r4, r2
 8011052:	460e      	mov	r6, r1
 8011054:	b921      	cbnz	r1, 8011060 <_realloc_r+0x14>
 8011056:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801105a:	4611      	mov	r1, r2
 801105c:	f7ff bf9c 	b.w	8010f98 <_malloc_r>
 8011060:	b922      	cbnz	r2, 801106c <_realloc_r+0x20>
 8011062:	f7ff ff49 	bl	8010ef8 <_free_r>
 8011066:	4625      	mov	r5, r4
 8011068:	4628      	mov	r0, r5
 801106a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801106c:	f000 f830 	bl	80110d0 <_malloc_usable_size_r>
 8011070:	42a0      	cmp	r0, r4
 8011072:	d20f      	bcs.n	8011094 <_realloc_r+0x48>
 8011074:	4621      	mov	r1, r4
 8011076:	4638      	mov	r0, r7
 8011078:	f7ff ff8e 	bl	8010f98 <_malloc_r>
 801107c:	4605      	mov	r5, r0
 801107e:	2800      	cmp	r0, #0
 8011080:	d0f2      	beq.n	8011068 <_realloc_r+0x1c>
 8011082:	4631      	mov	r1, r6
 8011084:	4622      	mov	r2, r4
 8011086:	f7ff ff0f 	bl	8010ea8 <memcpy>
 801108a:	4631      	mov	r1, r6
 801108c:	4638      	mov	r0, r7
 801108e:	f7ff ff33 	bl	8010ef8 <_free_r>
 8011092:	e7e9      	b.n	8011068 <_realloc_r+0x1c>
 8011094:	4635      	mov	r5, r6
 8011096:	e7e7      	b.n	8011068 <_realloc_r+0x1c>

08011098 <_sbrk_r>:
 8011098:	b538      	push	{r3, r4, r5, lr}
 801109a:	4d06      	ldr	r5, [pc, #24]	; (80110b4 <_sbrk_r+0x1c>)
 801109c:	2300      	movs	r3, #0
 801109e:	4604      	mov	r4, r0
 80110a0:	4608      	mov	r0, r1
 80110a2:	602b      	str	r3, [r5, #0]
 80110a4:	f7f2 fa7e 	bl	80035a4 <_sbrk>
 80110a8:	1c43      	adds	r3, r0, #1
 80110aa:	d102      	bne.n	80110b2 <_sbrk_r+0x1a>
 80110ac:	682b      	ldr	r3, [r5, #0]
 80110ae:	b103      	cbz	r3, 80110b2 <_sbrk_r+0x1a>
 80110b0:	6023      	str	r3, [r4, #0]
 80110b2:	bd38      	pop	{r3, r4, r5, pc}
 80110b4:	20002970 	.word	0x20002970

080110b8 <__malloc_lock>:
 80110b8:	4801      	ldr	r0, [pc, #4]	; (80110c0 <__malloc_lock+0x8>)
 80110ba:	f000 b811 	b.w	80110e0 <__retarget_lock_acquire_recursive>
 80110be:	bf00      	nop
 80110c0:	20002978 	.word	0x20002978

080110c4 <__malloc_unlock>:
 80110c4:	4801      	ldr	r0, [pc, #4]	; (80110cc <__malloc_unlock+0x8>)
 80110c6:	f000 b80c 	b.w	80110e2 <__retarget_lock_release_recursive>
 80110ca:	bf00      	nop
 80110cc:	20002978 	.word	0x20002978

080110d0 <_malloc_usable_size_r>:
 80110d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110d4:	1f18      	subs	r0, r3, #4
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	bfbc      	itt	lt
 80110da:	580b      	ldrlt	r3, [r1, r0]
 80110dc:	18c0      	addlt	r0, r0, r3
 80110de:	4770      	bx	lr

080110e0 <__retarget_lock_acquire_recursive>:
 80110e0:	4770      	bx	lr

080110e2 <__retarget_lock_release_recursive>:
 80110e2:	4770      	bx	lr

080110e4 <_init>:
 80110e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110e6:	bf00      	nop
 80110e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ea:	bc08      	pop	{r3}
 80110ec:	469e      	mov	lr, r3
 80110ee:	4770      	bx	lr

080110f0 <_fini>:
 80110f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110f2:	bf00      	nop
 80110f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110f6:	bc08      	pop	{r3}
 80110f8:	469e      	mov	lr, r3
 80110fa:	4770      	bx	lr
